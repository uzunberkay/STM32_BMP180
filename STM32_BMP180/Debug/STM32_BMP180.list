
STM32_BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800d0d8  0800d0d8  0001d0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d510  0800d510  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d510  0800d510  0001d510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d518  0800d518  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d518  0800d518  0001d518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d51c  0800d51c  0001d51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800d520  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d8  2**0
                  CONTENTS
 10 .bss          00001e84  200002d8  200002d8  000202d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000215c  2000215c  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011630  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003229  00000000  00000000  0003197b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f08  00000000  00000000  00034ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b56  00000000  00000000  00035ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002406b  00000000  00000000  00036606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a19  00000000  00000000  0005a671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8a19  00000000  00000000  0006f08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000051bc  00000000  00000000  00137aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0013cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0c0 	.word	0x0800d0c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800d0c0 	.word	0x0800d0c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <read_calliberation_data>:




void read_calliberation_data (void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000f9c:	23aa      	movs	r3, #170	; 0xaa
 8000f9e:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa0:	8afa      	ldrh	r2, [r7, #22]
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2316      	movs	r3, #22
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	463b      	mov	r3, r7
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	21ee      	movs	r1, #238	; 0xee
 8000fb4:	485c      	ldr	r0, [pc, #368]	; (8001128 <read_calliberation_data+0x1a4>)
 8000fb6:	f001 fcff 	bl	80029b8 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fba:	783b      	ldrb	r3, [r7, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	4b58      	ldr	r3, [pc, #352]	; (800112c <read_calliberation_data+0x1a8>)
 8000fca:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fcc:	78bb      	ldrb	r3, [r7, #2]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b55      	ldr	r3, [pc, #340]	; (8001130 <read_calliberation_data+0x1ac>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fde:	793b      	ldrb	r3, [r7, #4]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	4b51      	ldr	r3, [pc, #324]	; (8001134 <read_calliberation_data+0x1b0>)
 8000fee:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <read_calliberation_data+0x1b4>)
 8001002:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001004:	7a3b      	ldrb	r3, [r7, #8]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7a7b      	ldrb	r3, [r7, #9]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b49      	ldr	r3, [pc, #292]	; (800113c <read_calliberation_data+0x1b8>)
 8001016:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b45      	ldr	r3, [pc, #276]	; (8001140 <read_calliberation_data+0x1bc>)
 800102a:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <read_calliberation_data+0x1c0>)
 800103c:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <read_calliberation_data+0x1c4>)
 800104e:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001050:	7c3b      	ldrb	r3, [r7, #16]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7c7b      	ldrb	r3, [r7, #17]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b3b      	ldr	r3, [pc, #236]	; (800114c <read_calliberation_data+0x1c8>)
 8001060:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001062:	7cbb      	ldrb	r3, [r7, #18]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	7cfb      	ldrb	r3, [r7, #19]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b37      	ldr	r3, [pc, #220]	; (8001150 <read_calliberation_data+0x1cc>)
 8001072:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001074:	7d3b      	ldrb	r3, [r7, #20]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7d7b      	ldrb	r3, [r7, #21]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <read_calliberation_data+0x1d0>)
 8001084:	801a      	strh	r2, [r3, #0]
	if ((AC1 == 0x0000 || AC1 == 0xFFFF) ||
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <read_calliberation_data+0x1a8>)
 8001088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d040      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (AC2 == 0x0000 || AC2 == 0xFFFF) ||
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <read_calliberation_data+0x1ac>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((AC1 == 0x0000 || AC1 == 0xFFFF) ||
 8001096:	2b00      	cmp	r3, #0
 8001098:	d03b      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (AC3 == 0x0000 || AC3 == 0xFFFF) ||
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <read_calliberation_data+0x1b0>)
 800109c:	f9b3 3000 	ldrsh.w	r3, [r3]
	    (AC2 == 0x0000 || AC2 == 0xFFFF) ||
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d036      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (AC4 == 0x0000 || AC4 == 0xFFFF) ||
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <read_calliberation_data+0x1b4>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
	    (AC3 == 0x0000 || AC3 == 0xFFFF) ||
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d032      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (AC4 == 0x0000 || AC4 == 0xFFFF) ||
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <read_calliberation_data+0x1b4>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d02c      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (AC5 == 0x0000 || AC5 == 0xFFFF) ||
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <read_calliberation_data+0x1b8>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
	    (AC4 == 0x0000 || AC4 == 0xFFFF) ||
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d028      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (AC5 == 0x0000 || AC5 == 0xFFFF) ||
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <read_calliberation_data+0x1b8>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d022      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (AC6 == 0x0000 || AC6 == 0xFFFF) ||
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <read_calliberation_data+0x1bc>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
	    (AC5 == 0x0000 || AC5 == 0xFFFF) ||
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01e      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (AC6 == 0x0000 || AC6 == 0xFFFF) ||
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <read_calliberation_data+0x1bc>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010dc:	4293      	cmp	r3, r2
 80010de:	d018      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (B1 == 0x0000 || B1 == 0xFFFF) ||
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <read_calliberation_data+0x1c0>)
 80010e2:	f9b3 3000 	ldrsh.w	r3, [r3]
	    (AC6 == 0x0000 || AC6 == 0xFFFF) ||
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d013      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (B2 == 0x0000 || B2 == 0xFFFF) ||
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <read_calliberation_data+0x1c4>)
 80010ec:	f9b3 3000 	ldrsh.w	r3, [r3]
	    (B1 == 0x0000 || B1 == 0xFFFF) ||
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (MB == 0x0000 || MB == 0xFFFF) ||
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <read_calliberation_data+0x1c8>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
	    (B2 == 0x0000 || B2 == 0xFFFF) ||
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d009      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (MC == 0x0000 || MC == 0xFFFF) ||
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <read_calliberation_data+0x1cc>)
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
	    (MB == 0x0000 || MB == 0xFFFF) ||
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <read_calliberation_data+0x18e>
	    (MD == 0x0000 || MD == 0xFFFF))
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <read_calliberation_data+0x1d0>)
 800110a:	f9b3 3000 	ldrsh.w	r3, [r3]
	    (MC == 0x0000 || MC == 0xFFFF) ||
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <read_calliberation_data+0x19c>
	{
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001118:	480f      	ldr	r0, [pc, #60]	; (8001158 <read_calliberation_data+0x1d4>)
 800111a:	f001 f9f5 	bl	8002508 <HAL_GPIO_WritePin>
	    while(1);												// Kalibrasyonun gerceklesmedigini gosterir
 800111e:	e7fe      	b.n	800111e <read_calliberation_data+0x19a>
	}


}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000033c 	.word	0x2000033c
 800112c:	200002f4 	.word	0x200002f4
 8001130:	200002f6 	.word	0x200002f6
 8001134:	200002f8 	.word	0x200002f8
 8001138:	200002fa 	.word	0x200002fa
 800113c:	200002fc 	.word	0x200002fc
 8001140:	200002fe 	.word	0x200002fe
 8001144:	20000300 	.word	0x20000300
 8001148:	20000302 	.word	0x20000302
 800114c:	20000304 	.word	0x20000304
 8001150:	20000306 	.word	0x20000306
 8001154:	20000308 	.word	0x20000308
 8001158:	40020c00 	.word	0x40020c00

0800115c <Get_UTemp>:
uint16_t Get_UTemp (void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8001162:	232e      	movs	r3, #46	; 0x2e
 8001164:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 8001166:	2300      	movs	r3, #0
 8001168:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2301      	movs	r3, #1
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	22f4      	movs	r2, #244	; 0xf4
 800117c:	21ee      	movs	r1, #238	; 0xee
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <Get_UTemp+0x60>)
 8001180:	f001 fb20 	bl	80027c4 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001184:	2005      	movs	r0, #5
 8001186:	f000 feed 	bl	8001f64 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2302      	movs	r3, #2
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	22f6      	movs	r2, #246	; 0xf6
 800119c:	21ee      	movs	r1, #238	; 0xee
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <Get_UTemp+0x60>)
 80011a0:	f001 fc0a 	bl	80029b8 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	797b      	ldrb	r3, [r7, #5]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b29b      	uxth	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000033c 	.word	0x2000033c

080011c0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80011c4:	f7ff ffca 	bl	800115c <Get_UTemp>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b39      	ldr	r3, [pc, #228]	; (80012b4 <BMP180_GetTemp+0xf4>)
 80011ce:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <BMP180_GetTemp+0xf4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a38      	ldr	r2, [pc, #224]	; (80012b8 <BMP180_GetTemp+0xf8>)
 80011d6:	8812      	ldrh	r2, [r2, #0]
 80011d8:	1a9b      	subs	r3, r3, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9a2 	bl	8000524 <__aeabi_i2d>
 80011e0:	4604      	mov	r4, r0
 80011e2:	460d      	mov	r5, r1
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <BMP180_GetTemp+0xfc>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f99b 	bl	8000524 <__aeabi_i2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <BMP180_GetTemp+0x100>)
 80011f4:	f7ff fb2a 	bl	800084c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7ff f9fa 	bl	80005f8 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fca4 	bl	8000b58 <__aeabi_d2iz>
 8001210:	4603      	mov	r3, r0
 8001212:	4a2c      	ldr	r2, [pc, #176]	; (80012c4 <BMP180_GetTemp+0x104>)
 8001214:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <BMP180_GetTemp+0x108>)
 8001218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f981 	bl	8000524 <__aeabi_i2d>
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <BMP180_GetTemp+0x10c>)
 8001228:	f7ff f9e6 	bl	80005f8 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4614      	mov	r4, r2
 8001232:	461d      	mov	r5, r3
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <BMP180_GetTemp+0x110>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	461a      	mov	r2, r3
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <BMP180_GetTemp+0x104>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4413      	add	r3, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f96e 	bl	8000524 <__aeabi_i2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff fafc 	bl	800084c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fc7c 	bl	8000b58 <__aeabi_d2iz>
 8001260:	4603      	mov	r3, r0
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <BMP180_GetTemp+0x114>)
 8001264:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <BMP180_GetTemp+0x104>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <BMP180_GetTemp+0x114>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <BMP180_GetTemp+0x118>)
 8001272:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <BMP180_GetTemp+0x118>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3308      	adds	r3, #8
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f952 	bl	8000524 <__aeabi_i2d>
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <BMP180_GetTemp+0x11c>)
 8001286:	f7ff fae1 	bl	800084c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fca9 	bl	8000be8 <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <BMP180_GetTemp+0x120>)
 800129a:	6013      	str	r3, [r2, #0]

	return Temp/10;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <BMP180_GetTemp+0x120>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80012ae:	eeb0 0a67 	vmov.f32	s0, s15
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}
 80012b4:	2000030c 	.word	0x2000030c
 80012b8:	200002fe 	.word	0x200002fe
 80012bc:	200002fc 	.word	0x200002fc
 80012c0:	40e00000 	.word	0x40e00000
 80012c4:	20000314 	.word	0x20000314
 80012c8:	20000306 	.word	0x20000306
 80012cc:	40a00000 	.word	0x40a00000
 80012d0:	20000308 	.word	0x20000308
 80012d4:	20000318 	.word	0x20000318
 80012d8:	20000324 	.word	0x20000324
 80012dc:	40300000 	.word	0x40300000
 80012e0:	20000338 	.word	0x20000338

080012e4 <Get_UPress>:
uint32_t Get_UPress (int oss)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3334      	adds	r3, #52	; 0x34
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <Get_UPress+0xb4>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	81bb      	strh	r3, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030f 	add.w	r3, r7, #15
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	22f4      	movs	r2, #244	; 0xf4
 8001318:	21ee      	movs	r1, #238	; 0xee
 800131a:	4820      	ldr	r0, [pc, #128]	; (800139c <Get_UPress+0xb8>)
 800131c:	f001 fa52 	bl	80027c4 <HAL_I2C_Mem_Write>
	switch (oss)		 //  Çözünürlük modları "oversampling_setting"
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d81a      	bhi.n	800135c <Get_UPress+0x78>
 8001326:	a201      	add	r2, pc, #4	; (adr r2, 800132c <Get_UPress+0x48>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	0800133d 	.word	0x0800133d
 8001330:	08001345 	.word	0x08001345
 8001334:	0800134d 	.word	0x0800134d
 8001338:	08001355 	.word	0x08001355
	{
		case (0):
			HAL_Delay (5);
 800133c:	2005      	movs	r0, #5
 800133e:	f000 fe11 	bl	8001f64 <HAL_Delay>
			break;
 8001342:	e00b      	b.n	800135c <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 8001344:	2008      	movs	r0, #8
 8001346:	f000 fe0d 	bl	8001f64 <HAL_Delay>
			break;
 800134a:	e007      	b.n	800135c <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 800134c:	200e      	movs	r0, #14
 800134e:	f000 fe09 	bl	8001f64 <HAL_Delay>
			break;
 8001352:	e003      	b.n	800135c <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001354:	201a      	movs	r0, #26
 8001356:	f000 fe05 	bl	8001f64 <HAL_Delay>
			break;
 800135a:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 800135c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2303      	movs	r3, #3
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	22f6      	movs	r2, #246	; 0xf6
 8001370:	21ee      	movs	r1, #238	; 0xee
 8001372:	480a      	ldr	r0, [pc, #40]	; (800139c <Get_UPress+0xb8>)
 8001374:	f001 fb20 	bl	80029b8 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001378:	7b3b      	ldrb	r3, [r7, #12]
 800137a:	041a      	lsls	r2, r3, #16
 800137c:	7b7b      	ldrb	r3, [r7, #13]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4413      	add	r3, r2
 8001382:	7bba      	ldrb	r2, [r7, #14]
 8001384:	441a      	add	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f1c3 0308 	rsb	r3, r3, #8
 800138c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0800d0d8 	.word	0x0800d0d8
 800139c:	2000033c 	.word	0x2000033c

080013a0 <BMP180_GetPress>:

float BMP180_GetPress (int oss)
{
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff9b 	bl	80012e4 <Get_UPress>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	4ba8      	ldr	r3, [pc, #672]	; (8001654 <BMP180_GetPress+0x2b4>)
 80013b4:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80013b6:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <BMP180_GetPress+0x2b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4aa8      	ldr	r2, [pc, #672]	; (800165c <BMP180_GetPress+0x2bc>)
 80013bc:	8812      	ldrh	r2, [r2, #0]
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8af 	bl	8000524 <__aeabi_i2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	4ba5      	ldr	r3, [pc, #660]	; (8001660 <BMP180_GetPress+0x2c0>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8a8 	bl	8000524 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4ba2      	ldr	r3, [pc, #648]	; (8001664 <BMP180_GetPress+0x2c4>)
 80013da:	f7ff fa37 	bl	800084c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7ff f907 	bl	80005f8 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fbb1 	bl	8000b58 <__aeabi_d2iz>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a9b      	ldr	r2, [pc, #620]	; (8001668 <BMP180_GetPress+0x2c8>)
 80013fa:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013fc:	4b9b      	ldr	r3, [pc, #620]	; (800166c <BMP180_GetPress+0x2cc>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f88e 	bl	8000524 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b98      	ldr	r3, [pc, #608]	; (8001670 <BMP180_GetPress+0x2d0>)
 800140e:	f7ff f8f3 	bl	80005f8 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	4b96      	ldr	r3, [pc, #600]	; (8001674 <BMP180_GetPress+0x2d4>)
 800141c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001420:	461a      	mov	r2, r3
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <BMP180_GetPress+0x2c8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f87b 	bl	8000524 <__aeabi_i2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff fa09 	bl	800084c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fb89 	bl	8000b58 <__aeabi_d2iz>
 8001446:	4603      	mov	r3, r0
 8001448:	4a8b      	ldr	r2, [pc, #556]	; (8001678 <BMP180_GetPress+0x2d8>)
 800144a:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800144c:	4b86      	ldr	r3, [pc, #536]	; (8001668 <BMP180_GetPress+0x2c8>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b89      	ldr	r3, [pc, #548]	; (8001678 <BMP180_GetPress+0x2d8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4413      	add	r3, r2
 8001456:	4a89      	ldr	r2, [pc, #548]	; (800167c <BMP180_GetPress+0x2dc>)
 8001458:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800145a:	4b88      	ldr	r3, [pc, #544]	; (800167c <BMP180_GetPress+0x2dc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001462:	4a87      	ldr	r2, [pc, #540]	; (8001680 <BMP180_GetPress+0x2e0>)
 8001464:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001466:	4b87      	ldr	r3, [pc, #540]	; (8001684 <BMP180_GetPress+0x2e4>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f859 	bl	8000524 <__aeabi_i2d>
 8001472:	4604      	mov	r4, r0
 8001474:	460d      	mov	r5, r1
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <BMP180_GetPress+0x2e0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a81      	ldr	r2, [pc, #516]	; (8001680 <BMP180_GetPress+0x2e0>)
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f84e 	bl	8000524 <__aeabi_i2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <BMP180_GetPress+0x2e8>)
 800148e:	f7ff f9dd 	bl	800084c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4620      	mov	r0, r4
 8001498:	4629      	mov	r1, r5
 800149a:	f7ff f8ad 	bl	80005f8 <__aeabi_dmul>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b71      	ldr	r3, [pc, #452]	; (8001670 <BMP180_GetPress+0x2d0>)
 80014ac:	f7ff f9ce 	bl	800084c <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fb4e 	bl	8000b58 <__aeabi_d2iz>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <BMP180_GetPress+0x2c8>)
 80014c0:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014c2:	4b72      	ldr	r3, [pc, #456]	; (800168c <BMP180_GetPress+0x2ec>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <BMP180_GetPress+0x2e0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f826 	bl	8000524 <__aeabi_i2d>
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <BMP180_GetPress+0x2d0>)
 80014de:	f7ff f9b5 	bl	800084c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb35 	bl	8000b58 <__aeabi_d2iz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a61      	ldr	r2, [pc, #388]	; (8001678 <BMP180_GetPress+0x2d8>)
 80014f2:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014f4:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <BMP180_GetPress+0x2c8>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <BMP180_GetPress+0x2d8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a64      	ldr	r2, [pc, #400]	; (8001690 <BMP180_GetPress+0x2f0>)
 8001500:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001502:	4b64      	ldr	r3, [pc, #400]	; (8001694 <BMP180_GetPress+0x2f4>)
 8001504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001508:	009a      	lsls	r2, r3, #2
 800150a:	4b61      	ldr	r3, [pc, #388]	; (8001690 <BMP180_GetPress+0x2f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	441a      	add	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	3302      	adds	r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	da00      	bge.n	800151e <BMP180_GetPress+0x17e>
 800151c:	3303      	adds	r3, #3
 800151e:	109b      	asrs	r3, r3, #2
 8001520:	461a      	mov	r2, r3
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <BMP180_GetPress+0x2f8>)
 8001524:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <BMP180_GetPress+0x2fc>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	461a      	mov	r2, r3
 800152e:	4b54      	ldr	r3, [pc, #336]	; (8001680 <BMP180_GetPress+0x2e0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe fff4 	bl	8000524 <__aeabi_i2d>
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b57      	ldr	r3, [pc, #348]	; (80016a0 <BMP180_GetPress+0x300>)
 8001542:	f7ff f983 	bl	800084c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb03 	bl	8000b58 <__aeabi_d2iz>
 8001552:	4603      	mov	r3, r0
 8001554:	4a44      	ldr	r2, [pc, #272]	; (8001668 <BMP180_GetPress+0x2c8>)
 8001556:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001558:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <BMP180_GetPress+0x304>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffe0 	bl	8000524 <__aeabi_i2d>
 8001564:	4604      	mov	r4, r0
 8001566:	460d      	mov	r5, r1
 8001568:	4b45      	ldr	r3, [pc, #276]	; (8001680 <BMP180_GetPress+0x2e0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a44      	ldr	r2, [pc, #272]	; (8001680 <BMP180_GetPress+0x2e0>)
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffd5 	bl	8000524 <__aeabi_i2d>
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b42      	ldr	r3, [pc, #264]	; (8001688 <BMP180_GetPress+0x2e8>)
 8001580:	f7ff f964 	bl	800084c <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7ff f834 	bl	80005f8 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <BMP180_GetPress+0x308>)
 800159e:	f7ff f955 	bl	800084c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fad5 	bl	8000b58 <__aeabi_d2iz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a31      	ldr	r2, [pc, #196]	; (8001678 <BMP180_GetPress+0x2d8>)
 80015b2:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80015b4:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <BMP180_GetPress+0x2c8>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <BMP180_GetPress+0x2d8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	3302      	adds	r3, #2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffaf 	bl	8000524 <__aeabi_i2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <BMP180_GetPress+0x30c>)
 80015cc:	f7ff f93e 	bl	800084c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fabe 	bl	8000b58 <__aeabi_d2iz>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <BMP180_GetPress+0x2f0>)
 80015e0:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <BMP180_GetPress+0x310>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <BMP180_GetPress+0x2f0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff85 	bl	8000504 <__aeabi_ui2d>
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <BMP180_GetPress+0x2c4>)
 8001600:	f7ff f924 	bl	800084c <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff facc 	bl	8000ba8 <__aeabi_d2uiz>
 8001610:	4603      	mov	r3, r0
 8001612:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <BMP180_GetPress+0x314>)
 8001614:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <BMP180_GetPress+0x2b4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <BMP180_GetPress+0x2f8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	fa41 f202 	asr.w	r2, r1, r2
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <BMP180_GetPress+0x318>)
 8001632:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <BMP180_GetPress+0x318>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db41      	blt.n	80016c0 <BMP180_GetPress+0x320>
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <BMP180_GetPress+0x318>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	005a      	lsls	r2, r3, #1
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <BMP180_GetPress+0x314>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	461a      	mov	r2, r3
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <BMP180_GetPress+0x31c>)
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e040      	b.n	80016d4 <BMP180_GetPress+0x334>
 8001652:	bf00      	nop
 8001654:	20000310 	.word	0x20000310
 8001658:	2000030c 	.word	0x2000030c
 800165c:	200002fe 	.word	0x200002fe
 8001660:	200002fc 	.word	0x200002fc
 8001664:	40e00000 	.word	0x40e00000
 8001668:	20000314 	.word	0x20000314
 800166c:	20000306 	.word	0x20000306
 8001670:	40a00000 	.word	0x40a00000
 8001674:	20000308 	.word	0x20000308
 8001678:	20000318 	.word	0x20000318
 800167c:	20000324 	.word	0x20000324
 8001680:	2000032c 	.word	0x2000032c
 8001684:	20000302 	.word	0x20000302
 8001688:	40b00000 	.word	0x40b00000
 800168c:	200002f6 	.word	0x200002f6
 8001690:	2000031c 	.word	0x2000031c
 8001694:	200002f4 	.word	0x200002f4
 8001698:	20000320 	.word	0x20000320
 800169c:	200002f8 	.word	0x200002f8
 80016a0:	40c00000 	.word	0x40c00000
 80016a4:	20000300 	.word	0x20000300
 80016a8:	40f00000 	.word	0x40f00000
 80016ac:	40100000 	.word	0x40100000
 80016b0:	200002fa 	.word	0x200002fa
 80016b4:	20000328 	.word	0x20000328
 80016b8:	20000330 	.word	0x20000330
 80016bc:	20000334 	.word	0x20000334
	else Press = (B7/B4)*2;
 80016c0:	4b46      	ldr	r3, [pc, #280]	; (80017dc <BMP180_GetPress+0x43c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <BMP180_GetPress+0x440>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <BMP180_GetPress+0x444>)
 80016d2:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <BMP180_GetPress+0x444>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <BMP180_GetPress+0x448>)
 80016e4:	f7ff f8b2 	bl	800084c <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	461d      	mov	r5, r3
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <BMP180_GetPress+0x444>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff15 	bl	8000524 <__aeabi_i2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <BMP180_GetPress+0x448>)
 8001700:	f7ff f8a4 	bl	800084c <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff74 	bl	80005f8 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa1e 	bl	8000b58 <__aeabi_d2iz>
 800171c:	4603      	mov	r3, r0
 800171e:	4a33      	ldr	r2, [pc, #204]	; (80017ec <BMP180_GetPress+0x44c>)
 8001720:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <BMP180_GetPress+0x44c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f640 32de 	movw	r2, #3038	; 0xbde
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fef8 	bl	8000524 <__aeabi_i2d>
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <BMP180_GetPress+0x450>)
 800173a:	f7ff f887 	bl	800084c <__aeabi_ddiv>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff fa07 	bl	8000b58 <__aeabi_d2iz>
 800174a:	4603      	mov	r3, r0
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <BMP180_GetPress+0x44c>)
 800174e:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <BMP180_GetPress+0x444>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <BMP180_GetPress+0x454>)
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fee2 	bl	8000524 <__aeabi_i2d>
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <BMP180_GetPress+0x450>)
 8001766:	f7ff f871 	bl	800084c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f9f1 	bl	8000b58 <__aeabi_d2iz>
 8001776:	4603      	mov	r3, r0
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <BMP180_GetPress+0x458>)
 800177a:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <BMP180_GetPress+0x444>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fecf 	bl	8000524 <__aeabi_i2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <BMP180_GetPress+0x44c>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <BMP180_GetPress+0x458>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fec3 	bl	8000524 <__aeabi_i2d>
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <BMP180_GetPress+0x45c>)
 80017a4:	f7ff f852 	bl	800084c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fd6c 	bl	800028c <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f9cc 	bl	8000b58 <__aeabi_d2iz>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <BMP180_GetPress+0x444>)
 80017c4:	6013      	str	r3, [r2, #0]

	return Press;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <BMP180_GetPress+0x444>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bdb0      	pop	{r4, r5, r7, pc}
 80017dc:	20000330 	.word	0x20000330
 80017e0:	20000328 	.word	0x20000328
 80017e4:	20000334 	.word	0x20000334
 80017e8:	40700000 	.word	0x40700000
 80017ec:	20000314 	.word	0x20000314
 80017f0:	40f00000 	.word	0x40f00000
 80017f4:	ffffe343 	.word	0xffffe343
 80017f8:	20000318 	.word	0x20000318
 80017fc:	40300000 	.word	0x40300000

08001800 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fdc9 	bl	80013a0 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <BMP180_GetAlt+0x88>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800188c <BMP180_GetAlt+0x8c>
 800181e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001822:	ee16 0a90 	vmov	r0, s13
 8001826:	f7fe fe8f 	bl	8000548 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001878 <BMP180_GetAlt+0x78>
 8001832:	ec43 2b10 	vmov	d0, r2, r3
 8001836:	f00a fd0b 	bl	800c250 <pow>
 800183a:	ec53 2b10 	vmov	r2, r3, d0
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	4913      	ldr	r1, [pc, #76]	; (8001890 <BMP180_GetAlt+0x90>)
 8001844:	f7fe fd20 	bl	8000288 <__aeabi_dsub>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	a30b      	add	r3, pc, #44	; (adr r3, 8001880 <BMP180_GetAlt+0x80>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fecf 	bl	80005f8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f9c1 	bl	8000be8 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	ee07 3a90 	vmov	s15, r3
}
 800186c:	eeb0 0a67 	vmov.f32	s0, s15
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	ccd745e4 	.word	0xccd745e4
 800187c:	3fc85b95 	.word	0x3fc85b95
 8001880:	00000000 	.word	0x00000000
 8001884:	40e5a540 	.word	0x40e5a540
 8001888:	20000334 	.word	0x20000334
 800188c:	47c5e680 	.word	0x47c5e680
 8001890:	3ff00000 	.word	0x3ff00000

08001894 <BMP180_Start>:

void BMP180_Start (void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001898:	f7ff fb74 	bl	8000f84 <read_calliberation_data>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a6:	f000 faeb 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018aa:	f000 f845 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ae:	f000 f8db 	bl	8001a68 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018b2:	f000 f8ab 	bl	8001a0c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80018b6:	f007 f917 	bl	8008ae8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Start();
 80018ba:	f7ff ffeb 	bl	8001894 <BMP180_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  temp = BMP180_GetTemp();
 80018be:	f7ff fc7f 	bl	80011c0 <BMP180_GetTemp>
 80018c2:	eef0 7a40 	vmov.f32	s15, s0
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <main+0x88>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
	  mesafe = BMP180_GetAlt (0);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff ff97 	bl	8001800 <BMP180_GetAlt>
 80018d2:	eef0 7a40 	vmov.f32	s15, s0
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <main+0x8c>)
 80018d8:	edc3 7a00 	vstr	s15, [r3]
	  sniprintf(veri,sizeof(veri),"Sicaklik: %.2f C ve Yukseklik: %.2f metredir.\n",temp,mesafe);
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <main+0x88>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe31 	bl	8000548 <__aeabi_f2d>
 80018e6:	4604      	mov	r4, r0
 80018e8:	460d      	mov	r5, r1
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <main+0x8c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe2a 	bl	8000548 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018fc:	e9cd 4500 	strd	r4, r5, [sp]
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <main+0x90>)
 8001902:	2164      	movs	r1, #100	; 0x64
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <main+0x94>)
 8001906:	f008 fb31 	bl	8009f6c <sniprintf>
	  CDC_Transmit_FS(veri, strlen(veri));
 800190a:	480a      	ldr	r0, [pc, #40]	; (8001934 <main+0x94>)
 800190c:	f7fe fcb0 	bl	8000270 <strlen>
 8001910:	4603      	mov	r3, r0
 8001912:	b29b      	uxth	r3, r3
 8001914:	4619      	mov	r1, r3
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <main+0x94>)
 8001918:	f007 f9a4 	bl	8008c64 <CDC_Transmit_FS>
	  HAL_Delay(2000);
 800191c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001920:	f000 fb20 	bl	8001f64 <HAL_Delay>
	  temp = BMP180_GetTemp();
 8001924:	e7cb      	b.n	80018be <main+0x1e>
 8001926:	bf00      	nop
 8001928:	20000394 	.word	0x20000394
 800192c:	20000390 	.word	0x20000390
 8001930:	0800d0dc 	.word	0x0800d0dc
 8001934:	20000398 	.word	0x20000398

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	; 0x50
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	2230      	movs	r2, #48	; 0x30
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f008 fb87 	bl	800a05a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <SystemClock_Config+0xcc>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a27      	ldr	r2, [pc, #156]	; (8001a04 <SystemClock_Config+0xcc>)
 8001966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <SystemClock_Config+0xcc>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001978:	2300      	movs	r3, #0
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <SystemClock_Config+0xd0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <SystemClock_Config+0xd0>)
 8001982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <SystemClock_Config+0xd0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001994:	2301      	movs	r3, #1
 8001996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199e:	2302      	movs	r3, #2
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019a8:	2308      	movs	r3, #8
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019b6:	2307      	movs	r3, #7
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 fff8 	bl	80049b4 <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019ca:	f000 f8ad 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	230f      	movs	r3, #15
 80019d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d2:	2302      	movs	r3, #2
 80019d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2105      	movs	r1, #5
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fa59 	bl	8004ea4 <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019f8:	f000 f896 	bl	8001b28 <Error_Handler>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3750      	adds	r7, #80	; 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000

08001a0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <MX_I2C1_Init+0x54>)
 8001a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <MX_I2C1_Init+0x58>)
 8001a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a48:	4804      	ldr	r0, [pc, #16]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a4a:	f000 fd77 	bl	800253c <HAL_I2C_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a54:	f000 f868 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000033c 	.word	0x2000033c
 8001a60:	40005400 	.word	0x40005400
 8001a64:	00061a80 	.word	0x00061a80

08001a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_GPIO_Init+0xb8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af4:	480b      	ldr	r0, [pc, #44]	; (8001b24 <MX_GPIO_Init+0xbc>)
 8001af6:	f000 fd07 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_GPIO_Init+0xbc>)
 8001b14:	f000 fb5c 	bl	80021d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020c00 	.word	0x40020c00

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <Error_Handler+0x8>
	...

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_MspInit+0x4c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b72:	2007      	movs	r0, #7
 8001b74:	f000 faea 	bl	800214c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_I2C_MspInit+0x84>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12b      	bne.n	8001bfe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc2:	23c0      	movs	r3, #192	; 0xc0
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc6:	2312      	movs	r3, #18
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <HAL_I2C_MspInit+0x8c>)
 8001bde:	f000 faf7 	bl	80021d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_I2C_MspInit+0x88>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020400 	.word	0x40020400

08001c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <NMI_Handler+0x4>

08001c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <HardFault_Handler+0x4>

08001c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <MemManage_Handler+0x4>

08001c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c60:	f000 f960 	bl	8001f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <OTG_FS_IRQHandler+0x10>)
 8001c6e:	f001 fd74 	bl	800375a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200018e4 	.word	0x200018e4

08001c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_kill>:

int _kill(int pid, int sig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c96:	f008 fa33 	bl	800a100 <__errno>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2216      	movs	r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_exit>:

void _exit (int status)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ffe7 	bl	8001c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cbe:	e7fe      	b.n	8001cbe <_exit+0x12>

08001cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e00a      	b.n	8001ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cd2:	f3af 8000 	nop.w
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	b2ca      	uxtb	r2, r1
 8001ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf0      	blt.n	8001cd2 <_read+0x12>
  }

  return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e009      	b.n	8001d20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60ba      	str	r2, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf1      	blt.n	8001d0c <_write+0x12>
  }
  return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_close>:

int _close(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_isatty>:

int _isatty(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dcc:	f008 f998 	bl	800a100 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20020000 	.word	0x20020000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	200003fc 	.word	0x200003fc
 8001e04:	20002160 	.word	0x20002160

08001e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <SystemInit+0x20>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <SystemInit+0x20>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e32:	490e      	ldr	r1, [pc, #56]	; (8001e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e34:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e48:	4c0b      	ldr	r4, [pc, #44]	; (8001e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e56:	f7ff ffd7 	bl	8001e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f008 f957 	bl	800a10c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5e:	f7ff fd1f 	bl	80018a0 <main>
  bx  lr    
 8001e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001e70:	0800d520 	.word	0x0800d520
  ldr r2, =_sbss
 8001e74:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001e78:	2000215c 	.word	0x2000215c

08001e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC_IRQHandler>
	...

08001e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <HAL_Init+0x40>)
 8001e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <HAL_Init+0x40>)
 8001e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_Init+0x40>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f000 f94f 	bl	800214c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f000 f808 	bl	8001ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb4:	f7ff fe3e 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_InitTick+0x54>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_InitTick+0x58>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f967 	bl	80021b6 <HAL_SYSTICK_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00e      	b.n	8001f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b0f      	cmp	r3, #15
 8001ef6:	d80a      	bhi.n	8001f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f000 f92f 	bl	8002162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <HAL_InitTick+0x5c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e000      	b.n	8001f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_IncTick+0x20>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_IncTick+0x24>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <HAL_IncTick+0x24>)
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000400 	.word	0x20000400

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_GetTick+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000400 	.word	0x20000400

08001f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f6c:	f7ff ffee 	bl	8001f4c <HAL_GetTick>
 8001f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d005      	beq.n	8001f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_Delay+0x44>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8a:	bf00      	nop
 8001f8c:	f7ff ffde 	bl	8001f4c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d8f7      	bhi.n	8001f8c <HAL_Delay+0x28>
  {
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000008 	.word	0x20000008

08001fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fde:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60d3      	str	r3, [r2, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <__NVIC_GetPriorityGrouping+0x18>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0307 	and.w	r3, r3, #7
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db0b      	blt.n	800203a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	4907      	ldr	r1, [pc, #28]	; (8002048 <__NVIC_EnableIRQ+0x38>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2001      	movs	r0, #1
 8002032:	fa00 f202 	lsl.w	r2, r0, r2
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000e100 	.word	0xe000e100

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002118:	d301      	bcc.n	800211e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211a:	2301      	movs	r3, #1
 800211c:	e00f      	b.n	800213e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <SysTick_Config+0x40>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002126:	210f      	movs	r1, #15
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f7ff ff8e 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SysTick_Config+0x40>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Config+0x40>)
 8002138:	2207      	movs	r2, #7
 800213a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff29 	bl	8001fac <__NVIC_SetPriorityGrouping>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002174:	f7ff ff3e 	bl	8001ff4 <__NVIC_GetPriorityGrouping>
 8002178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7ff ff8e 	bl	80020a0 <NVIC_EncodePriority>
 8002184:	4602      	mov	r2, r0
 8002186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff5d 	bl	800204c <__NVIC_SetPriority>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff31 	bl	8002010 <__NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ffa2 	bl	8002108 <SysTick_Config>
 80021c4:	4603      	mov	r3, r0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e16b      	b.n	80024c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 815a 	bne.w	80024be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d005      	beq.n	8002222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	2b02      	cmp	r3, #2
 8002220:	d130      	bne.n	8002284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b03      	cmp	r3, #3
 800228e:	d017      	beq.n	80022c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80b4 	beq.w	80024be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b60      	ldr	r3, [pc, #384]	; (80024dc <HAL_GPIO_Init+0x30c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a5f      	ldr	r2, [pc, #380]	; (80024dc <HAL_GPIO_Init+0x30c>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_GPIO_Init+0x30c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <HAL_GPIO_Init+0x310>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <HAL_GPIO_Init+0x314>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02b      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a51      	ldr	r2, [pc, #324]	; (80024e8 <HAL_GPIO_Init+0x318>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d025      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a50      	ldr	r2, [pc, #320]	; (80024ec <HAL_GPIO_Init+0x31c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	; (80024f0 <HAL_GPIO_Init+0x320>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x21a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <HAL_GPIO_Init+0x324>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x216>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4d      	ldr	r2, [pc, #308]	; (80024f8 <HAL_GPIO_Init+0x328>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x212>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	; (80024fc <HAL_GPIO_Init+0x32c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x20e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_GPIO_Init+0x330>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x20a>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00e      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023da:	2308      	movs	r3, #8
 80023dc:	e00c      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00a      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023e2:	2305      	movs	r3, #5
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	; (80024e0 <HAL_GPIO_Init+0x310>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a32      	ldr	r2, [pc, #200]	; (8002504 <HAL_GPIO_Init+0x334>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_GPIO_Init+0x334>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248e:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_GPIO_Init+0x334>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f ae90 	bls.w	80021ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800
 8002500:	40021c00 	.word	0x40021c00
 8002504:	40013c00 	.word	0x40013c00

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002524:	e003      	b.n	800252e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e12b      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fb0e 	bl	8001b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a0:	f002 fe78 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <HAL_I2C_Init+0x274>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d807      	bhi.n	80025c0 <HAL_I2C_Init+0x84>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_I2C_Init+0x278>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e006      	b.n	80025ce <HAL_I2C_Init+0x92>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a7d      	ldr	r2, [pc, #500]	; (80027b8 <HAL_I2C_Init+0x27c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e7      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_I2C_Init+0x280>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9b      	lsrs	r3, r3, #18
 80025e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d802      	bhi.n	8002610 <HAL_I2C_Init+0xd4>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	e009      	b.n	8002624 <HAL_I2C_Init+0xe8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4a69      	ldr	r2, [pc, #420]	; (80027c0 <HAL_I2C_Init+0x284>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	495c      	ldr	r1, [pc, #368]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002640:	428b      	cmp	r3, r1
 8002642:	d819      	bhi.n	8002678 <HAL_I2C_Init+0x13c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e59      	subs	r1, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002658:	400b      	ands	r3, r1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_I2C_Init+0x138>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e59      	subs	r1, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fbb1 f3f3 	udiv	r3, r1, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	e051      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002674:	2304      	movs	r3, #4
 8002676:	e04f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_I2C_Init+0x168>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e012      	b.n	80026ca <HAL_I2C_Init+0x18e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Init+0x196>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10e      	bne.n	80026f8 <HAL_I2C_Init+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e58      	subs	r0, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	440b      	add	r3, r1
 80026e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6911      	ldr	r1, [r2, #16]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	000186a0 	.word	0x000186a0
 80027b4:	001e847f 	.word	0x001e847f
 80027b8:	003d08ff 	.word	0x003d08ff
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	10624dd3 	.word	0x10624dd3

080027c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027de:	f7ff fbb5 	bl	8001f4c <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 80d9 	bne.w	80029a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	496d      	ldr	r1, [pc, #436]	; (80029b0 <HAL_I2C_Mem_Write+0x1ec>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fc7f 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e0cc      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Write+0x56>
 8002816:	2302      	movs	r3, #2
 8002818:	e0c5      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2221      	movs	r2, #33	; 0x21
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_I2C_Mem_Write+0x1f0>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002882:	88f8      	ldrh	r0, [r7, #6]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4603      	mov	r3, r0
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fab6 	bl	8002e04 <I2C_RequestMemoryWrite>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d052      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e081      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fd00 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d107      	bne.n	80028ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06b      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d11b      	bne.n	8002944 <HAL_I2C_Mem_Write+0x180>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d017      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1aa      	bne.n	80028a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fcec 	bl	800332e <I2C_WaitOnBTFFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b04      	cmp	r3, #4
 8002962:	d107      	bne.n	8002974 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e016      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000

080029b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	817b      	strh	r3, [r7, #10]
 80029ca:	460b      	mov	r3, r1
 80029cc:	813b      	strh	r3, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029d2:	f7ff fabb 	bl	8001f4c <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	f040 8208 	bne.w	8002df6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2319      	movs	r3, #25
 80029ec:	2201      	movs	r2, #1
 80029ee:	497b      	ldr	r1, [pc, #492]	; (8002bdc <HAL_I2C_Mem_Read+0x224>)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fb85 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
 80029fe:	e1fb      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_I2C_Mem_Read+0x56>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e1f4      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d007      	beq.n	8002a34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2222      	movs	r2, #34	; 0x22
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <HAL_I2C_Mem_Read+0x228>)
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a76:	88f8      	ldrh	r0, [r7, #6]
 8002a78:	893a      	ldrh	r2, [r7, #8]
 8002a7a:	8979      	ldrh	r1, [r7, #10]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4603      	mov	r3, r0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa52 	bl	8002f30 <I2C_RequestMemoryRead>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e1b0      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d113      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e184      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d11b      	bne.n	8002b06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e164      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d11b      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	e144      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b5c:	e138      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	f200 80f1 	bhi.w	8002d4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d123      	bne.n	8002bb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fc1b 	bl	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e139      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bb6:	e10b      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d14e      	bne.n	8002c5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4906      	ldr	r1, [pc, #24]	; (8002be4 <HAL_I2C_Mem_Read+0x22c>)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fa98 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e10e      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
 8002bda:	bf00      	nop
 8002bdc:	00100002 	.word	0x00100002
 8002be0:	ffff0000 	.word	0xffff0000
 8002be4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c5c:	e0b8      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2200      	movs	r2, #0
 8002c66:	4966      	ldr	r1, [pc, #408]	; (8002e00 <HAL_I2C_Mem_Read+0x448>)
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fa49 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0bf      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	494f      	ldr	r1, [pc, #316]	; (8002e00 <HAL_I2C_Mem_Read+0x448>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fa1b 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e091      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d48:	e042      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fb2e 	bl	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e04c      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d118      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f aec2 	bne.w	8002b5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010004 	.word	0x00010004

08002e04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	460b      	mov	r3, r1
 8002e18:	813b      	strh	r3, [r7, #8]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f960 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d103      	bne.n	8002e5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e05f      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	492d      	ldr	r1, [pc, #180]	; (8002f2c <I2C_RequestMemoryWrite+0x128>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f998 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e04c      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa02 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d107      	bne.n	8002ec6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e02b      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed0:	893b      	ldrh	r3, [r7, #8]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	e021      	b.n	8002f20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9dc 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e005      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	00010002 	.word	0x00010002

08002f30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	817b      	strh	r3, [r7, #10]
 8002f42:	460b      	mov	r3, r1
 8002f44:	813b      	strh	r3, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8c2 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f90:	d103      	bne.n	8002f9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0aa      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	4952      	ldr	r1, [pc, #328]	; (80030fc <I2C_RequestMemoryRead+0x1cc>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8fa 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e097      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f964 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d107      	bne.n	8003002 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e076      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e021      	b.n	800305c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	b29b      	uxth	r3, r3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f93e 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b04      	cmp	r3, #4
 800303c:	d107      	bne.n	800304e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e050      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003052:	893b      	ldrh	r3, [r7, #8]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f923 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e035      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2200      	movs	r2, #0
 80030a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f82b 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030be:	d103      	bne.n	80030c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e013      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	6a3a      	ldr	r2, [r7, #32]
 80030e0:	4906      	ldr	r1, [pc, #24]	; (80030fc <I2C_RequestMemoryRead+0x1cc>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f863 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	00010002 	.word	0x00010002

08003100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003110:	e025      	b.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d021      	beq.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe ff17 	bl	8001f4c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e023      	b.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d10d      	bne.n	8003184 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	e00c      	b.n	800319e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d0b6      	beq.n	8003112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031bc:	e051      	b.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d123      	bne.n	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e046      	b.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d021      	beq.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7fe fe95 	bl	8001f4c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d116      	bne.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e020      	b.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10c      	bne.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e00b      	b.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	43da      	mvns	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d18d      	bne.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b8:	e02d      	b.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8ce 	bl	800345c <I2C_IsAcknowledgeFailed>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e02d      	b.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d021      	beq.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fe fe3b 	bl	8001f4c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d116      	bne.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e007      	b.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	2b80      	cmp	r3, #128	; 0x80
 8003322:	d1ca      	bne.n	80032ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800333a:	e02d      	b.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f88d 	bl	800345c <I2C_IsAcknowledgeFailed>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e02d      	b.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d021      	beq.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fe fdfa 	bl	8001f4c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d1ca      	bne.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033bc:	e042      	b.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d119      	bne.n	8003400 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0210 	mvn.w	r2, #16
 80033d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e029      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003400:	f7fe fda4 	bl	8001f4c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d116      	bne.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d1b5      	bne.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d11b      	bne.n	80034ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800347c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034bc:	b08f      	sub	sp, #60	; 0x3c
 80034be:	af0a      	add	r7, sp, #40	; 0x28
 80034c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e10f      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f005 fd04 	bl	8008ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2203      	movs	r2, #3
 80034f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f001 ffeb 	bl	80054e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	687e      	ldr	r6, [r7, #4]
 8003518:	466d      	mov	r5, sp
 800351a:	f106 0410 	add.w	r4, r6, #16
 800351e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800352a:	e885 0003 	stmia.w	r5, {r0, r1}
 800352e:	1d33      	adds	r3, r6, #4
 8003530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f001 fec2 	bl	80052bc <USB_CoreInit>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0d0      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f001 ffd9 	bl	8005508 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e04a      	b.n	80035f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	333d      	adds	r3, #61	; 0x3d
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	333c      	adds	r3, #60	; 0x3c
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	b298      	uxth	r0, r3
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3344      	adds	r3, #68	; 0x44
 8003598:	4602      	mov	r2, r0
 800359a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3340      	adds	r3, #64	; 0x40
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3348      	adds	r3, #72	; 0x48
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334c      	adds	r3, #76	; 0x4c
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3354      	adds	r3, #84	; 0x54
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	3301      	adds	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3af      	bcc.n	800355c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e044      	b.n	800368c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3301      	adds	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d3b5      	bcc.n	8003602 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	687e      	ldr	r6, [r7, #4]
 800369e:	466d      	mov	r5, sp
 80036a0:	f106 0410 	add.w	r4, r6, #16
 80036a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036b4:	1d33      	adds	r3, r6, #4
 80036b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	f001 ff71 	bl	80055a0 <USB_DevInit>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e00d      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 f8c0 	bl	800686a <USB_DevDisconnect>

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_PCD_Start+0x1c>
 800370c:	2302      	movs	r3, #2
 800370e:	e020      	b.n	8003752 <HAL_PCD_Start+0x5e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b01      	cmp	r3, #1
 800371e:	d109      	bne.n	8003734 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003724:	2b01      	cmp	r3, #1
 8003726:	d005      	beq.n	8003734 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fec3 	bl	80054c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f003 f870 	bl	8006828 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800375a:	b590      	push	{r4, r7, lr}
 800375c:	b08d      	sub	sp, #52	; 0x34
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f003 f92e 	bl	80069d2 <USB_GetMode>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 848a 	bne.w	8004092 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f003 f892 	bl	80068ac <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8480 	beq.w	8004090 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 f87f 	bl	80068ac <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d107      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f002 0202 	and.w	r2, r2, #2
 80037c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 f86d 	bl	80068ac <USB_ReadInterrupts>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d161      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0210 	bic.w	r2, r2, #16
 80037ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	0c5b      	lsrs	r3, r3, #17
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	2b02      	cmp	r3, #2
 8003816:	d124      	bne.n	8003862 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d035      	beq.n	8003890 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800382e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	6a38      	ldr	r0, [r7, #32]
 8003838:	f002 fea4 	bl	8006584 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003848:	441a      	add	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800385a:	441a      	add	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	621a      	str	r2, [r3, #32]
 8003860:	e016      	b.n	8003890 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	0c5b      	lsrs	r3, r3, #17
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	2b06      	cmp	r3, #6
 800386c:	d110      	bne.n	8003890 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003874:	2208      	movs	r2, #8
 8003876:	4619      	mov	r1, r3
 8003878:	6a38      	ldr	r0, [r7, #32]
 800387a:	f002 fe83 	bl	8006584 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388a:	441a      	add	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0210 	orr.w	r2, r2, #16
 800389e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f003 f801 	bl	80068ac <USB_ReadInterrupts>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038b4:	f040 80a7 	bne.w	8003a06 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 f806 	bl	80068d2 <USB_ReadDevAllOutEpInterrupt>
 80038c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038c8:	e099      	b.n	80039fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 808e 	beq.w	80039f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 f82a 	bl	800693a <USB_ReadDevOutEPInterrupt>
 80038e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	2301      	movs	r3, #1
 8003902:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fec2 	bl	8004690 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	461a      	mov	r2, r3
 8003924:	2308      	movs	r3, #8
 8003926:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ff98 	bl	8004860 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	2310      	movs	r3, #16
 800394a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d030      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d109      	bne.n	8003976 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003974:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	3304      	adds	r3, #4
 800398a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	78db      	ldrb	r3, [r3, #3]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d108      	bne.n	80039a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2200      	movs	r2, #0
 8003998:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f005 fbad 	bl	8009100 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b2:	461a      	mov	r2, r3
 80039b4:	2302      	movs	r3, #2
 80039b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	2320      	movs	r3, #32
 80039d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ea:	461a      	mov	r2, r3
 80039ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	3301      	adds	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f af62 	bne.w	80038ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f002 ff4e 	bl	80068ac <USB_ReadInterrupts>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1a:	f040 80db 	bne.w	8003bd4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f002 ff6f 	bl	8006906 <USB_ReadDevAllInEpInterrupt>
 8003a28:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a2e:	e0cd      	b.n	8003bcc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80c2 	beq.w	8003bc0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 ff95 	bl	8006976 <USB_ReadDevInEPInterrupt>
 8003a4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d057      	beq.n	8003b08 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	2201      	movs	r2, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69f9      	ldr	r1, [r7, #28]
 8003a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a78:	4013      	ands	r3, r2
 8003a7a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d132      	bne.n	8003afc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	334c      	adds	r3, #76	; 0x4c
 8003aa6:	6819      	ldr	r1, [r3, #0]
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4403      	add	r3, r0
 8003ab6:	3348      	adds	r3, #72	; 0x48
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4419      	add	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4403      	add	r3, r0
 8003aca:	334c      	adds	r3, #76	; 0x4c
 8003acc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d113      	bne.n	8003afc <HAL_PCD_IRQHandler+0x3a2>
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3354      	adds	r3, #84	; 0x54
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003af4:	461a      	mov	r2, r3
 8003af6:	2101      	movs	r1, #1
 8003af8:	f002 ff9c 	bl	8006a34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f005 fa77 	bl	8008ff6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2308      	movs	r3, #8
 8003b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	461a      	mov	r2, r3
 8003b58:	2340      	movs	r3, #64	; 0x40
 8003b5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d023      	beq.n	8003bae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b68:	6a38      	ldr	r0, [r7, #32]
 8003b6a:	f001 fe7d 	bl	8005868 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	3338      	adds	r3, #56	; 0x38
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3304      	adds	r3, #4
 8003b80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	78db      	ldrb	r3, [r3, #3]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d108      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f005 fac4 	bl	8009124 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2302      	movs	r3, #2
 8003bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fcdb 	bl	8004576 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f47f af2e 	bne.w	8003a30 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f002 fe67 	bl	80068ac <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be8:	d122      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d108      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c10:	2100      	movs	r1, #0
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fec2 	bl	800499c <HAL_PCDEx_LPM_Callback>
 8003c18:	e002      	b.n	8003c20 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f005 fa62 	bl	80090e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f002 fe39 	bl	80068ac <USB_ReadInterrupts>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c44:	d112      	bne.n	8003c6c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f005 fa1e 	bl	8009098 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c6a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f002 fe1b 	bl	80068ac <USB_ReadInterrupts>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	f040 80b7 	bne.w	8003df2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2110      	movs	r1, #16
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 fde2 	bl	8005868 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca8:	e046      	b.n	8003d38 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cbc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cce:	0151      	lsls	r1, r2, #5
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	440a      	add	r2, r1
 8003cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	461a      	mov	r2, r3
 8003cec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cf0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d02:	0151      	lsls	r1, r2, #5
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	440a      	add	r2, r1
 8003d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d22:	0151      	lsls	r1, r2, #5
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	440a      	add	r2, r1
 8003d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	3301      	adds	r3, #1
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d3b3      	bcc.n	8003caa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d6e:	f043 030b 	orr.w	r3, r3, #11
 8003d72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d84:	f043 030b 	orr.w	r3, r3, #11
 8003d88:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8a:	e015      	b.n	8003db8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d9e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003da2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db2:	f043 030b 	orr.w	r3, r3, #11
 8003db6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f002 fe29 	bl	8006a34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f002 fd58 	bl	80068ac <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e06:	d124      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f002 fdee 	bl	80069ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 fda3 	bl	8005962 <USB_GetDevSpeed>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681c      	ldr	r4, [r3, #0]
 8003e28:	f001 fa28 	bl	800527c <HAL_RCC_GetHCLKFreq>
 8003e2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	4620      	mov	r0, r4
 8003e38:	f001 faa2 	bl	8005380 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f005 f902 	bl	8009046 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f002 fd28 	bl	80068ac <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d10a      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f005 f8df 	bl	800902a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f002 0208 	and.w	r2, r2, #8
 8003e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 fd13 	bl	80068ac <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b80      	cmp	r3, #128	; 0x80
 8003e8e:	d122      	bne.n	8003ed6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea0:	e014      	b.n	8003ecc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fb27 	bl	8004514 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	3301      	adds	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d3e5      	bcc.n	8003ea2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f002 fce6 	bl	80068ac <USB_ReadInterrupts>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eea:	d13b      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eec:	2301      	movs	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	e02b      	b.n	8003f4a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	3340      	adds	r3, #64	; 0x40
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d115      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da12      	bge.n	8003f44 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	333f      	adds	r3, #63	; 0x3f
 8003f2e:	2201      	movs	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fae8 	bl	8004514 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	3301      	adds	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d3ce      	bcc.n	8003ef2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f002 fc9f 	bl	80068ac <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f78:	d155      	bne.n	8004026 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e045      	b.n	800400c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d12e      	bne.n	8004006 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fa8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da2b      	bge.n	8004006 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003fba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d121      	bne.n	8004006 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004002:	6053      	str	r3, [r2, #4]
            break;
 8004004:	e007      	b.n	8004016 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	3301      	adds	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004012:	429a      	cmp	r2, r3
 8004014:	d3b4      	bcc.n	8003f80 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f002 fc3e 	bl	80068ac <USB_ReadInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d10a      	bne.n	8004052 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f005 f883 	bl	8009148 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f002 fc28 	bl	80068ac <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d115      	bne.n	8004092 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f005 f873 	bl	8009164 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	e000      	b.n	8004092 <HAL_PCD_IRQHandler+0x938>
      return;
 8004090:	bf00      	nop
    }
  }
}
 8004092:	3734      	adds	r7, #52	; 0x34
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}

08004098 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_PCD_SetAddress+0x1a>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e013      	b.n	80040da <HAL_PCD_SetAddress+0x42>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f002 fb86 	bl	80067dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	4608      	mov	r0, r1
 80040ec:	4611      	mov	r1, r2
 80040ee:	461a      	mov	r2, r3
 80040f0:	4603      	mov	r3, r0
 80040f2:	70fb      	strb	r3, [r7, #3]
 80040f4:	460b      	mov	r3, r1
 80040f6:	803b      	strh	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	da0f      	bge.n	8004128 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 020f 	and.w	r2, r3, #15
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	3338      	adds	r3, #56	; 0x38
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	705a      	strb	r2, [r3, #1]
 8004126:	e00f      	b.n	8004148 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004154:	883a      	ldrh	r2, [r7, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	78ba      	ldrb	r2, [r7, #2]
 800415e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004172:	78bb      	ldrb	r3, [r7, #2]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d102      	bne.n	800417e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_PCD_EP_Open+0xaa>
 8004188:	2302      	movs	r3, #2
 800418a:	e00e      	b.n	80041aa <HAL_PCD_EP_Open+0xc8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68f9      	ldr	r1, [r7, #12]
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fc06 	bl	80059ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80041a8:	7afb      	ldrb	r3, [r7, #11]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da0f      	bge.n	80041e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 020f 	and.w	r2, r3, #15
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	3338      	adds	r3, #56	; 0x38
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	705a      	strb	r2, [r3, #1]
 80041e4:	e00f      	b.n	8004206 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_PCD_EP_Close+0x6e>
 800421c:	2302      	movs	r3, #2
 800421e:	e00e      	b.n	800423e <HAL_PCD_EP_Close+0x8c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	4618      	mov	r0, r3
 8004230:	f001 fc44 	bl	8005abc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	460b      	mov	r3, r1
 8004254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	f003 020f 	and.w	r2, r3, #15
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	3304      	adds	r3, #4
 800426e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2200      	movs	r2, #0
 8004280:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2200      	movs	r2, #0
 8004286:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004288:	7afb      	ldrb	r3, [r7, #11]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	b2da      	uxtb	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d102      	bne.n	80042a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042a2:	7afb      	ldrb	r3, [r7, #11]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	6979      	ldr	r1, [r7, #20]
 80042ba:	f001 ff23 	bl	8006104 <USB_EP0StartXfer>
 80042be:	e008      	b.n	80042d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	6979      	ldr	r1, [r7, #20]
 80042ce:	f001 fcd1 	bl	8005c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	460b      	mov	r3, r1
 800431a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	3338      	adds	r3, #56	; 0x38
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2201      	movs	r2, #1
 800434a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800434c:	7afb      	ldrb	r3, [r7, #11]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	b2da      	uxtb	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d102      	bne.n	8004366 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004366:	7afb      	ldrb	r3, [r7, #11]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	6979      	ldr	r1, [r7, #20]
 800437e:	f001 fec1 	bl	8006104 <USB_EP0StartXfer>
 8004382:	e008      	b.n	8004396 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	f001 fc6f 	bl	8005c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	f003 020f 	and.w	r2, r3, #15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d901      	bls.n	80043be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e050      	b.n	8004460 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da0f      	bge.n	80043e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	3338      	adds	r3, #56	; 0x38
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	705a      	strb	r2, [r3, #1]
 80043e4:	e00d      	b.n	8004402 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	4613      	mov	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	3304      	adds	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_PCD_EP_SetStall+0x82>
 800441e:	2302      	movs	r3, #2
 8004420:	e01e      	b.n	8004460 <HAL_PCD_EP_SetStall+0xc0>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	4618      	mov	r0, r3
 8004432:	f002 f8ff 	bl	8006634 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	b2d9      	uxtb	r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004450:	461a      	mov	r2, r3
 8004452:	f002 faef 	bl	8006a34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d901      	bls.n	8004486 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e042      	b.n	800450c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	da0f      	bge.n	80044ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	3338      	adds	r3, #56	; 0x38
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	3304      	adds	r3, #4
 80044a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	705a      	strb	r2, [r3, #1]
 80044ac:	e00f      	b.n	80044ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_PCD_EP_ClrStall+0x86>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e00e      	b.n	800450c <HAL_PCD_EP_ClrStall+0xa4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f002 f907 	bl	8006710 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004524:	2b00      	cmp	r3, #0
 8004526:	da0c      	bge.n	8004542 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	3338      	adds	r3, #56	; 0x38
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	3304      	adds	r3, #4
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e00c      	b.n	800455c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	4413      	add	r3, r2
 8004558:	3304      	adds	r3, #4
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	4618      	mov	r0, r3
 8004564:	f001 ff26 	bl	80063b4 <USB_EPStopXfer>
 8004568:	4603      	mov	r3, r0
 800456a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800456c:	7afb      	ldrb	r3, [r7, #11]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08a      	sub	sp, #40	; 0x28
 800457a:	af02      	add	r7, sp, #8
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	3338      	adds	r3, #56	; 0x38
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	3304      	adds	r3, #4
 800459c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1a      	ldr	r2, [r3, #32]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d901      	bls.n	80045ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06c      	b.n	8004688 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d902      	bls.n	80045ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3303      	adds	r3, #3
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045d2:	e02b      	b.n	800462c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d902      	bls.n	80045f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	3303      	adds	r3, #3
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6919      	ldr	r1, [r3, #16]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004608:	b2db      	uxtb	r3, r3
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4603      	mov	r3, r0
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	f001 ff7a 	bl	8006508 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	441a      	add	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	429a      	cmp	r2, r3
 8004640:	d809      	bhi.n	8004656 <PCD_WriteEmptyTxFifo+0xe0>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1a      	ldr	r2, [r3, #32]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800464a:	429a      	cmp	r2, r3
 800464c:	d203      	bcs.n	8004656 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1be      	bne.n	80045d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	429a      	cmp	r2, r3
 8004660:	d811      	bhi.n	8004686 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	2201      	movs	r2, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	43db      	mvns	r3, r3
 800467c:	6939      	ldr	r1, [r7, #16]
 800467e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004682:	4013      	ands	r3, r2
 8004684:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	333c      	adds	r3, #60	; 0x3c
 80046a8:	3304      	adds	r3, #4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d17b      	bne.n	80047be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d015      	beq.n	80046fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4a61      	ldr	r2, [pc, #388]	; (8004858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	f240 80b9 	bls.w	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80b3 	beq.w	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f8:	6093      	str	r3, [r2, #8]
 80046fa:	e0a7      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	2320      	movs	r3, #32
 8004716:	6093      	str	r3, [r2, #8]
 8004718:	e098      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 8093 	bne.w	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4a4b      	ldr	r2, [pc, #300]	; (8004858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d90f      	bls.n	800474e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004744:	461a      	mov	r2, r3
 8004746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474a:	6093      	str	r3, [r2, #8]
 800474c:	e07e      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	3304      	adds	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	0159      	lsls	r1, r3, #5
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	440b      	add	r3, r1
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d114      	bne.n	80047b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004798:	461a      	mov	r2, r3
 800479a:	2101      	movs	r1, #1
 800479c:	f002 f94a 	bl	8006a34 <USB_EP0_OutStart>
 80047a0:	e006      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f004 fc02 	bl	8008fc0 <HAL_PCD_DataOutStageCallback>
 80047bc:	e046      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4a26      	ldr	r2, [pc, #152]	; (800485c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d124      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	461a      	mov	r2, r3
 80047de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e2:	6093      	str	r3, [r2, #8]
 80047e4:	e032      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fc:	461a      	mov	r2, r3
 80047fe:	2320      	movs	r3, #32
 8004800:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f004 fbd9 	bl	8008fc0 <HAL_PCD_DataOutStageCallback>
 800480e:	e01d      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d114      	bne.n	8004840 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d108      	bne.n	8004840 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004838:	461a      	mov	r2, r3
 800483a:	2100      	movs	r1, #0
 800483c:	f002 f8fa 	bl	8006a34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f004 fbba 	bl	8008fc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	4f54300a 	.word	0x4f54300a
 800485c:	4f54310a 	.word	0x4f54310a

08004860 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	333c      	adds	r3, #60	; 0x3c
 8004878:	3304      	adds	r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d90e      	bls.n	80048b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ac:	461a      	mov	r2, r3
 80048ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f004 fb71 	bl	8008f9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d90c      	bls.n	80048dc <PCD_EP_OutSetupPacket_int+0x7c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d108      	bne.n	80048dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048d4:	461a      	mov	r2, r3
 80048d6:	2101      	movs	r1, #1
 80048d8:	f002 f8ac 	bl	8006a34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	4f54300a 	.word	0x4f54300a

080048ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
 80048f8:	4613      	mov	r3, r2
 80048fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800490a:	883b      	ldrh	r3, [r7, #0]
 800490c:	0419      	lsls	r1, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	430a      	orrs	r2, r1
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
 8004918:	e028      	b.n	800496c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4413      	add	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e00d      	b.n	800494a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	3340      	adds	r3, #64	; 0x40
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4413      	add	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	3301      	adds	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	7bfa      	ldrb	r2, [r7, #15]
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	3b01      	subs	r3, #1
 8004950:	429a      	cmp	r2, r3
 8004952:	d3ec      	bcc.n	800492e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004954:	883b      	ldrh	r3, [r7, #0]
 8004956:	0418      	lsls	r0, r3, #16
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	3b01      	subs	r3, #1
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	4302      	orrs	r2, r0
 8004964:	3340      	adds	r3, #64	; 0x40
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e267      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d075      	beq.n	8004abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049d2:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d00c      	beq.n	80049f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049de:	4b85      	ldr	r3, [pc, #532]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d112      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ea:	4b82      	ldr	r3, [pc, #520]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f6:	d10b      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f8:	4b7e      	ldr	r3, [pc, #504]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d05b      	beq.n	8004abc <HAL_RCC_OscConfig+0x108>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d157      	bne.n	8004abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e242      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_OscConfig+0x74>
 8004a1a:	4b76      	ldr	r3, [pc, #472]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a75      	ldr	r2, [pc, #468]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e01d      	b.n	8004a64 <HAL_RCC_OscConfig+0xb0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x98>
 8004a32:	4b70      	ldr	r3, [pc, #448]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a6f      	ldr	r2, [pc, #444]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b6d      	ldr	r3, [pc, #436]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6c      	ldr	r2, [pc, #432]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0xb0>
 8004a4c:	4b69      	ldr	r3, [pc, #420]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a68      	ldr	r2, [pc, #416]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b66      	ldr	r3, [pc, #408]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a65      	ldr	r2, [pc, #404]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fa6e 	bl	8001f4c <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fd fa6a 	bl	8001f4c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e207      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b5b      	ldr	r3, [pc, #364]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0xc0>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fd fa5a 	bl	8001f4c <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fd fa56 	bl	8001f4c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e1f3      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	4b51      	ldr	r3, [pc, #324]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0xe8>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d063      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d11c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae2:	4b44      	ldr	r3, [pc, #272]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d116      	bne.n	8004b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_RCC_OscConfig+0x152>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e1c7      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b06:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4937      	ldr	r1, [pc, #220]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	e03a      	b.n	8004b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b24:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <HAL_RCC_OscConfig+0x244>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fd fa0f 	bl	8001f4c <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b32:	f7fd fa0b 	bl	8001f4c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e1a8      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4925      	ldr	r1, [pc, #148]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
 8004b64:	e015      	b.n	8004b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RCC_OscConfig+0x244>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fd f9ee 	bl	8001f4c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b74:	f7fd f9ea 	bl	8001f4c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e187      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d036      	beq.n	8004c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCC_OscConfig+0x248>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd f9ce 	bl	8001f4c <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fd f9ca 	bl	8001f4c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e167      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x200>
 8004bd2:	e01b      	b.n	8004c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_OscConfig+0x248>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bda:	f7fd f9b7 	bl	8001f4c <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be0:	e00e      	b.n	8004c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be2:	f7fd f9b3 	bl	8001f4c <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d907      	bls.n	8004c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e150      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	42470000 	.word	0x42470000
 8004bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c00:	4b88      	ldr	r3, [pc, #544]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ea      	bne.n	8004be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8097 	beq.w	8004d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1e:	4b81      	ldr	r3, [pc, #516]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10f      	bne.n	8004c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	4b7d      	ldr	r3, [pc, #500]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	4a7c      	ldr	r2, [pc, #496]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4a:	4b77      	ldr	r3, [pc, #476]	; (8004e28 <HAL_RCC_OscConfig+0x474>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d118      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c56:	4b74      	ldr	r3, [pc, #464]	; (8004e28 <HAL_RCC_OscConfig+0x474>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a73      	ldr	r2, [pc, #460]	; (8004e28 <HAL_RCC_OscConfig+0x474>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c62:	f7fd f973 	bl	8001f4c <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fd f96f 	bl	8001f4c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e10c      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	4b6a      	ldr	r3, [pc, #424]	; (8004e28 <HAL_RCC_OscConfig+0x474>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d106      	bne.n	8004c9e <HAL_RCC_OscConfig+0x2ea>
 8004c90:	4b64      	ldr	r3, [pc, #400]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	4a63      	ldr	r2, [pc, #396]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9c:	e01c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x324>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x30c>
 8004ca6:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a5e      	ldr	r2, [pc, #376]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb2:	4b5c      	ldr	r3, [pc, #368]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	4a5b      	ldr	r2, [pc, #364]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbe:	e00b      	b.n	8004cd8 <HAL_RCC_OscConfig+0x324>
 8004cc0:	4b58      	ldr	r3, [pc, #352]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	4a57      	ldr	r2, [pc, #348]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	6713      	str	r3, [r2, #112]	; 0x70
 8004ccc:	4b55      	ldr	r3, [pc, #340]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	4a54      	ldr	r2, [pc, #336]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	f023 0304 	bic.w	r3, r3, #4
 8004cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d015      	beq.n	8004d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fd f934 	bl	8001f4c <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f7fd f930 	bl	8001f4c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e0cb      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfe:	4b49      	ldr	r3, [pc, #292]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0ee      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x334>
 8004d0a:	e014      	b.n	8004d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0c:	f7fd f91e 	bl	8001f4c <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d14:	f7fd f91a 	bl	8001f4c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0b5      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1ee      	bne.n	8004d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3c:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	4a38      	ldr	r2, [pc, #224]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80a1 	beq.w	8004e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d52:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d05c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d141      	bne.n	8004dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <HAL_RCC_OscConfig+0x478>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fd f8ee 	bl	8001f4c <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fd f8ea 	bl	8001f4c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e087      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	491b      	ldr	r1, [pc, #108]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x478>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fd f8c3 	bl	8001f4c <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fd f8bf 	bl	8001f4c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e05c      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x416>
 8004de8:	e054      	b.n	8004e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <HAL_RCC_OscConfig+0x478>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fd f8ac 	bl	8001f4c <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fd f8a8 	bl	8001f4c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e045      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x444>
 8004e16:	e03d      	b.n	8004e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e038      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40007000 	.word	0x40007000
 8004e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e30:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <HAL_RCC_OscConfig+0x4ec>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d028      	beq.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d121      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d11a      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d111      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0cc      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b68      	ldr	r3, [pc, #416]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d90c      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b8      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d020      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef8:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a52      	ldr	r2, [pc, #328]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f1c:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	494d      	ldr	r1, [pc, #308]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d044      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d119      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f62:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e06f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e067      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b37      	ldr	r3, [pc, #220]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4934      	ldr	r1, [pc, #208]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f94:	f7fc ffda 	bl	8001f4c <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fc ffd6 	bl	8001f4c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e04f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d20c      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e032      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4916      	ldr	r1, [pc, #88]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502a:	f000 f821 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fc ff3a 	bl	8001ec4 <HAL_InitTick>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023c00 	.word	0x40023c00
 8005060:	40023800 	.word	0x40023800
 8005064:	0800d154 	.word	0x0800d154
 8005068:	20000000 	.word	0x20000000
 800506c:	20000004 	.word	0x20000004

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005074:	b094      	sub	sp, #80	; 0x50
 8005076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	647b      	str	r3, [r7, #68]	; 0x44
 800507c:	2300      	movs	r3, #0
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	2300      	movs	r3, #0
 8005082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005088:	4b79      	ldr	r3, [pc, #484]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b08      	cmp	r3, #8
 8005092:	d00d      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005094:	2b08      	cmp	r3, #8
 8005096:	f200 80e1 	bhi.w	800525c <HAL_RCC_GetSysClockFreq+0x1ec>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x34>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0x3a>
 80050a2:	e0db      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b73      	ldr	r3, [pc, #460]	; (8005274 <HAL_RCC_GetSysClockFreq+0x204>)
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050a8:	e0db      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050aa:	4b73      	ldr	r3, [pc, #460]	; (8005278 <HAL_RCC_GetSysClockFreq+0x208>)
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ae:	e0d8      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b0:	4b6f      	ldr	r3, [pc, #444]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ba:	4b6d      	ldr	r3, [pc, #436]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d063      	beq.n	800518e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	2200      	movs	r2, #0
 80050ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050e2:	4622      	mov	r2, r4
 80050e4:	462b      	mov	r3, r5
 80050e6:	f04f 0000 	mov.w	r0, #0
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	0159      	lsls	r1, r3, #5
 80050f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f4:	0150      	lsls	r0, r2, #5
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4621      	mov	r1, r4
 80050fc:	1a51      	subs	r1, r2, r1
 80050fe:	6139      	str	r1, [r7, #16]
 8005100:	4629      	mov	r1, r5
 8005102:	eb63 0301 	sbc.w	r3, r3, r1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005114:	4659      	mov	r1, fp
 8005116:	018b      	lsls	r3, r1, #6
 8005118:	4651      	mov	r1, sl
 800511a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800511e:	4651      	mov	r1, sl
 8005120:	018a      	lsls	r2, r1, #6
 8005122:	4651      	mov	r1, sl
 8005124:	ebb2 0801 	subs.w	r8, r2, r1
 8005128:	4659      	mov	r1, fp
 800512a:	eb63 0901 	sbc.w	r9, r3, r1
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800513a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005142:	4690      	mov	r8, r2
 8005144:	4699      	mov	r9, r3
 8005146:	4623      	mov	r3, r4
 8005148:	eb18 0303 	adds.w	r3, r8, r3
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	462b      	mov	r3, r5
 8005150:	eb49 0303 	adc.w	r3, r9, r3
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005162:	4629      	mov	r1, r5
 8005164:	024b      	lsls	r3, r1, #9
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800516c:	4621      	mov	r1, r4
 800516e:	024a      	lsls	r2, r1, #9
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005176:	2200      	movs	r2, #0
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
 800517a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005180:	f7fb fd82 	bl	8000c88 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4613      	mov	r3, r2
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	e058      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800518e:	4b38      	ldr	r3, [pc, #224]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	099b      	lsrs	r3, r3, #6
 8005194:	2200      	movs	r2, #0
 8005196:	4618      	mov	r0, r3
 8005198:	4611      	mov	r1, r2
 800519a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	2300      	movs	r3, #0
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	f04f 0000 	mov.w	r0, #0
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	0159      	lsls	r1, r3, #5
 80051b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ba:	0150      	lsls	r0, r2, #5
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4641      	mov	r1, r8
 80051c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051e0:	ebb2 040a 	subs.w	r4, r2, sl
 80051e4:	eb63 050b 	sbc.w	r5, r3, fp
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	00eb      	lsls	r3, r5, #3
 80051f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f6:	00e2      	lsls	r2, r4, #3
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	4643      	mov	r3, r8
 80051fe:	18e3      	adds	r3, r4, r3
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	464b      	mov	r3, r9
 8005204:	eb45 0303 	adc.w	r3, r5, r3
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005216:	4629      	mov	r1, r5
 8005218:	028b      	lsls	r3, r1, #10
 800521a:	4621      	mov	r1, r4
 800521c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005220:	4621      	mov	r1, r4
 8005222:	028a      	lsls	r2, r1, #10
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522a:	2200      	movs	r2, #0
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	61fa      	str	r2, [r7, #28]
 8005230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005234:	f7fb fd28 	bl	8000c88 <__aeabi_uldivmod>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4613      	mov	r3, r2
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetSysClockFreq+0x204>)
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005264:	4618      	mov	r0, r3
 8005266:	3750      	adds	r7, #80	; 0x50
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
 8005274:	00f42400 	.word	0x00f42400
 8005278:	007a1200 	.word	0x007a1200

0800527c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <HAL_RCC_GetHCLKFreq+0x14>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000000 	.word	0x20000000

08005294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005298:	f7ff fff0 	bl	800527c <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0a9b      	lsrs	r3, r3, #10
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	0800d164 	.word	0x0800d164

080052bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052bc:	b084      	sub	sp, #16
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	f107 001c 	add.w	r0, r7, #28
 80052ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d122      	bne.n	800531a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d105      	bne.n	800530e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 fbee 	bl	8006af0 <USB_CoreReset>
 8005314:	4603      	mov	r3, r0
 8005316:	73fb      	strb	r3, [r7, #15]
 8005318:	e01a      	b.n	8005350 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f001 fbe2 	bl	8006af0 <USB_CoreReset>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
 8005342:	e005      	b.n	8005350 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	2b01      	cmp	r3, #1
 8005354:	d10b      	bne.n	800536e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f043 0206 	orr.w	r2, r3, #6
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800537a:	b004      	add	sp, #16
 800537c:	4770      	bx	lr
	...

08005380 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d165      	bne.n	8005460 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a41      	ldr	r2, [pc, #260]	; (800549c <USB_SetTurnaroundTime+0x11c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d906      	bls.n	80053aa <USB_SetTurnaroundTime+0x2a>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a40      	ldr	r2, [pc, #256]	; (80054a0 <USB_SetTurnaroundTime+0x120>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d202      	bcs.n	80053aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053a4:	230f      	movs	r3, #15
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e062      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4a3c      	ldr	r2, [pc, #240]	; (80054a0 <USB_SetTurnaroundTime+0x120>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d306      	bcc.n	80053c0 <USB_SetTurnaroundTime+0x40>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4a3b      	ldr	r2, [pc, #236]	; (80054a4 <USB_SetTurnaroundTime+0x124>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d202      	bcs.n	80053c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053ba:	230e      	movs	r3, #14
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e057      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4a38      	ldr	r2, [pc, #224]	; (80054a4 <USB_SetTurnaroundTime+0x124>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d306      	bcc.n	80053d6 <USB_SetTurnaroundTime+0x56>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4a37      	ldr	r2, [pc, #220]	; (80054a8 <USB_SetTurnaroundTime+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d202      	bcs.n	80053d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053d0:	230d      	movs	r3, #13
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e04c      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a33      	ldr	r2, [pc, #204]	; (80054a8 <USB_SetTurnaroundTime+0x128>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d306      	bcc.n	80053ec <USB_SetTurnaroundTime+0x6c>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4a32      	ldr	r2, [pc, #200]	; (80054ac <USB_SetTurnaroundTime+0x12c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d802      	bhi.n	80053ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053e6:	230c      	movs	r3, #12
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e041      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4a2f      	ldr	r2, [pc, #188]	; (80054ac <USB_SetTurnaroundTime+0x12c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d906      	bls.n	8005402 <USB_SetTurnaroundTime+0x82>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <USB_SetTurnaroundTime+0x130>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d802      	bhi.n	8005402 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053fc:	230b      	movs	r3, #11
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e036      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4a2a      	ldr	r2, [pc, #168]	; (80054b0 <USB_SetTurnaroundTime+0x130>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d906      	bls.n	8005418 <USB_SetTurnaroundTime+0x98>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4a29      	ldr	r2, [pc, #164]	; (80054b4 <USB_SetTurnaroundTime+0x134>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d802      	bhi.n	8005418 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005412:	230a      	movs	r3, #10
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e02b      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4a26      	ldr	r2, [pc, #152]	; (80054b4 <USB_SetTurnaroundTime+0x134>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d906      	bls.n	800542e <USB_SetTurnaroundTime+0xae>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4a25      	ldr	r2, [pc, #148]	; (80054b8 <USB_SetTurnaroundTime+0x138>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d202      	bcs.n	800542e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005428:	2309      	movs	r3, #9
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e020      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <USB_SetTurnaroundTime+0x138>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d306      	bcc.n	8005444 <USB_SetTurnaroundTime+0xc4>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4a20      	ldr	r2, [pc, #128]	; (80054bc <USB_SetTurnaroundTime+0x13c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d802      	bhi.n	8005444 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800543e:	2308      	movs	r3, #8
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e015      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <USB_SetTurnaroundTime+0x13c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d906      	bls.n	800545a <USB_SetTurnaroundTime+0xda>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <USB_SetTurnaroundTime+0x140>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d202      	bcs.n	800545a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005454:	2307      	movs	r3, #7
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e00a      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800545a:	2306      	movs	r3, #6
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e007      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005466:	2309      	movs	r3, #9
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e001      	b.n	8005470 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800546c:	2309      	movs	r3, #9
 800546e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005488:	431a      	orrs	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	00d8acbf 	.word	0x00d8acbf
 80054a0:	00e4e1c0 	.word	0x00e4e1c0
 80054a4:	00f42400 	.word	0x00f42400
 80054a8:	01067380 	.word	0x01067380
 80054ac:	011a499f 	.word	0x011a499f
 80054b0:	01312cff 	.word	0x01312cff
 80054b4:	014ca43f 	.word	0x014ca43f
 80054b8:	016e3600 	.word	0x016e3600
 80054bc:	01a6ab1f 	.word	0x01a6ab1f
 80054c0:	01e84800 	.word	0x01e84800

080054c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d115      	bne.n	8005556 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005536:	2001      	movs	r0, #1
 8005538:	f7fc fd14 	bl	8001f64 <HAL_Delay>
      ms++;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 fa45 	bl	80069d2 <USB_GetMode>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d01e      	beq.n	800558c <USB_SetCurrentMode+0x84>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b31      	cmp	r3, #49	; 0x31
 8005552:	d9f0      	bls.n	8005536 <USB_SetCurrentMode+0x2e>
 8005554:	e01a      	b.n	800558c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d115      	bne.n	8005588 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005568:	2001      	movs	r0, #1
 800556a:	f7fc fcfb 	bl	8001f64 <HAL_Delay>
      ms++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 fa2c 	bl	80069d2 <USB_GetMode>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <USB_SetCurrentMode+0x84>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b31      	cmp	r3, #49	; 0x31
 8005584:	d9f0      	bls.n	8005568 <USB_SetCurrentMode+0x60>
 8005586:	e001      	b.n	800558c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e005      	b.n	8005598 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b32      	cmp	r3, #50	; 0x32
 8005590:	d101      	bne.n	8005596 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055a0:	b084      	sub	sp, #16
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	e009      	b.n	80055d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	3340      	adds	r3, #64	; 0x40
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	3301      	adds	r3, #1
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b0e      	cmp	r3, #14
 80055d8:	d9f2      	bls.n	80055c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d11c      	bne.n	800561a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
 8005618:	e00b      	b.n	8005632 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005638:	461a      	mov	r2, r3
 800563a:	2300      	movs	r3, #0
 800563c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005644:	4619      	mov	r1, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	461a      	mov	r2, r3
 800564e:	680b      	ldr	r3, [r1, #0]
 8005650:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10c      	bne.n	8005672 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800565e:	2100      	movs	r1, #0
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f965 	bl	8005930 <USB_SetDevSpeed>
 8005666:	e008      	b.n	800567a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005668:	2101      	movs	r1, #1
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f960 	bl	8005930 <USB_SetDevSpeed>
 8005670:	e003      	b.n	800567a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005672:	2103      	movs	r1, #3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f95b 	bl	8005930 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800567a:	2110      	movs	r1, #16
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8f3 	bl	8005868 <USB_FlushTxFifo>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f91f 	bl	80058d0 <USB_FlushRxFifo>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a2:	461a      	mov	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ae:	461a      	mov	r2, r3
 80056b0:	2300      	movs	r3, #0
 80056b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	461a      	mov	r2, r3
 80056bc:	2300      	movs	r3, #0
 80056be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	e043      	b.n	800574e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056dc:	d118      	bne.n	8005710 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	461a      	mov	r2, r3
 80056f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	e013      	b.n	8005722 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	461a      	mov	r2, r3
 8005708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e008      	b.n	8005722 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	2300      	movs	r3, #0
 8005720:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	461a      	mov	r2, r3
 8005730:	2300      	movs	r3, #0
 8005732:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	461a      	mov	r2, r3
 8005742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005746:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	3301      	adds	r3, #1
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	d3b7      	bcc.n	80056c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	e043      	b.n	80057e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800576e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005772:	d118      	bne.n	80057a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e013      	b.n	80057b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	461a      	mov	r2, r3
 800579e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	e008      	b.n	80057b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	461a      	mov	r2, r3
 80057b4:	2300      	movs	r3, #0
 80057b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	461a      	mov	r2, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	461a      	mov	r2, r3
 80057d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	3301      	adds	r3, #1
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d3b7      	bcc.n	800575c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800580c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f043 0210 	orr.w	r2, r3, #16
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <USB_DevInit+0x2c4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800582c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	f043 0208 	orr.w	r2, r3, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800583e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d107      	bne.n	8005854 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800584c:	f043 0304 	orr.w	r3, r3, #4
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005854:	7dfb      	ldrb	r3, [r7, #23]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005860:	b004      	add	sp, #16
 8005862:	4770      	bx	lr
 8005864:	803c3800 	.word	0x803c3800

08005868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3301      	adds	r3, #1
 800587a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4a13      	ldr	r2, [pc, #76]	; (80058cc <USB_FlushTxFifo+0x64>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e01b      	b.n	80058c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	daf2      	bge.n	8005876 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	019b      	lsls	r3, r3, #6
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3301      	adds	r3, #1
 80058a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a08      	ldr	r2, [pc, #32]	; (80058cc <USB_FlushTxFifo+0x64>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e006      	b.n	80058c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d0f0      	beq.n	80058a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	00030d40 	.word	0x00030d40

080058d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4a11      	ldr	r2, [pc, #68]	; (800592c <USB_FlushRxFifo+0x5c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d901      	bls.n	80058ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e018      	b.n	8005920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	daf2      	bge.n	80058dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2210      	movs	r2, #16
 80058fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a08      	ldr	r2, [pc, #32]	; (800592c <USB_FlushRxFifo+0x5c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e006      	b.n	8005920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b10      	cmp	r3, #16
 800591c:	d0f0      	beq.n	8005900 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	00030d40 	.word	0x00030d40

08005930 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005962:	b480      	push	{r7}
 8005964:	b087      	sub	sp, #28
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0306 	and.w	r3, r3, #6
 800597a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]
 8005986:	e00a      	b.n	800599e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d002      	beq.n	8005994 <USB_GetDevSpeed+0x32>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b06      	cmp	r3, #6
 8005992:	d102      	bne.n	800599a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005994:	2302      	movs	r3, #2
 8005996:	75fb      	strb	r3, [r7, #23]
 8005998:	e001      	b.n	800599e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800599a:	230f      	movs	r3, #15
 800599c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d13a      	bne.n	8005a3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	2101      	movs	r1, #1
 80059da:	fa01 f303 	lsl.w	r3, r1, r3
 80059de:	b29b      	uxth	r3, r3
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d155      	bne.n	8005aac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	059b      	lsls	r3, r3, #22
 8005a22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a24:	4313      	orrs	r3, r2
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e036      	b.n	8005aac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a44:	69da      	ldr	r2, [r3, #28]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	2101      	movs	r1, #1
 8005a50:	fa01 f303 	lsl.w	r3, r1, r3
 8005a54:	041b      	lsls	r3, r3, #16
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d11a      	bne.n	8005aac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	791b      	ldrb	r3, [r3, #4]
 8005a90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a92:	430b      	orrs	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d161      	bne.n	8005b9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aee:	d11f      	bne.n	8005b30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b50:	4013      	ands	r3, r2
 8005b52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	2101      	movs	r1, #1
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b74:	4013      	ands	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	0159      	lsls	r1, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	440b      	add	r3, r1
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	4619      	mov	r1, r3
 8005b94:	4b35      	ldr	r3, [pc, #212]	; (8005c6c <USB_DeactivateEndpoint+0x1b0>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]
 8005b9a:	e060      	b.n	8005c5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb2:	d11f      	bne.n	8005bf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	2101      	movs	r1, #1
 8005c06:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c14:	4013      	ands	r3, r2
 8005c16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	2101      	movs	r1, #1
 8005c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2e:	041b      	lsls	r3, r3, #16
 8005c30:	43db      	mvns	r3, r3
 8005c32:	68f9      	ldr	r1, [r7, #12]
 8005c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c38:	4013      	ands	r3, r2
 8005c3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	0159      	lsls	r1, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	440b      	add	r3, r1
 8005c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c56:	4619      	mov	r1, r3
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <USB_DeactivateEndpoint+0x1b4>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	ec337800 	.word	0xec337800
 8005c70:	eff37800 	.word	0xeff37800

08005c74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	; 0x28
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	f040 815c 	bne.w	8005f4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d132      	bne.n	8005d04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfc:	0cdb      	lsrs	r3, r3, #19
 8005cfe:	04db      	lsls	r3, r3, #19
 8005d00:	6113      	str	r3, [r2, #16]
 8005d02:	e074      	b.n	8005dee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1e:	0cdb      	lsrs	r3, r3, #19
 8005d20:	04db      	lsls	r3, r3, #19
 8005d22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6999      	ldr	r1, [r3, #24]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	440b      	add	r3, r1
 8005d60:	1e59      	subs	r1, r3, #1
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d6c:	4b9d      	ldr	r3, [pc, #628]	; (8005fe4 <USB_EPStartXfer+0x370>)
 8005d6e:	400b      	ands	r3, r1
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	0148      	lsls	r0, r1, #5
 8005d74:	69f9      	ldr	r1, [r7, #28]
 8005d76:	4401      	add	r1, r0
 8005d78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d96:	69b9      	ldr	r1, [r7, #24]
 8005d98:	0148      	lsls	r0, r1, #5
 8005d9a:	69f9      	ldr	r1, [r7, #28]
 8005d9c:	4401      	add	r1, r0
 8005d9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005da2:	4313      	orrs	r3, r2
 8005da4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	791b      	ldrb	r3, [r3, #4]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d11f      	bne.n	8005dee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005dcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d14b      	bne.n	8005e8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	791b      	ldrb	r3, [r3, #4]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d128      	bne.n	8005e6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d110      	bne.n	8005e4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	e00f      	b.n	8005e6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e133      	b.n	80060f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eaa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	791b      	ldrb	r3, [r3, #4]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d015      	beq.n	8005ee0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 811b 	beq.w	80060f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	2101      	movs	r1, #1
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	69f9      	ldr	r1, [r7, #28]
 8005ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eda:	4313      	orrs	r3, r2
 8005edc:	634b      	str	r3, [r1, #52]	; 0x34
 8005ede:	e109      	b.n	80060f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d110      	bne.n	8005f12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e00f      	b.n	8005f32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6919      	ldr	r1, [r3, #16]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	b298      	uxth	r0, r3
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	4603      	mov	r3, r0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fade 	bl	8006508 <USB_WritePacket>
 8005f4c:	e0d2      	b.n	80060f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f68:	0cdb      	lsrs	r3, r3, #19
 8005f6a:	04db      	lsls	r3, r3, #19
 8005f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d126      	bne.n	8005fe8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb0:	69b9      	ldr	r1, [r7, #24]
 8005fb2:	0148      	lsls	r0, r1, #5
 8005fb4:	69f9      	ldr	r1, [r7, #28]
 8005fb6:	4401      	add	r1, r0
 8005fb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fde:	6113      	str	r3, [r2, #16]
 8005fe0:	e03a      	b.n	8006058 <USB_EPStartXfer+0x3e4>
 8005fe2:	bf00      	nop
 8005fe4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	1e5a      	subs	r2, r3, #1
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	8afa      	ldrh	r2, [r7, #22]
 8006004:	fb03 f202 	mul.w	r2, r3, r2
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	8afb      	ldrh	r3, [r7, #22]
 800601c:	04d9      	lsls	r1, r3, #19
 800601e:	4b38      	ldr	r3, [pc, #224]	; (8006100 <USB_EPStartXfer+0x48c>)
 8006020:	400b      	ands	r3, r1
 8006022:	69b9      	ldr	r1, [r7, #24]
 8006024:	0148      	lsls	r0, r1, #5
 8006026:	69f9      	ldr	r1, [r7, #28]
 8006028:	4401      	add	r1, r0
 800602a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800602e:	4313      	orrs	r3, r2
 8006030:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006048:	69b9      	ldr	r1, [r7, #24]
 800604a:	0148      	lsls	r0, r1, #5
 800604c:	69f9      	ldr	r1, [r7, #28]
 800604e:	4401      	add	r1, r0
 8006050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006054:	4313      	orrs	r3, r2
 8006056:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10d      	bne.n	800607a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6919      	ldr	r1, [r3, #16]
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	460a      	mov	r2, r1
 8006078:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	791b      	ldrb	r3, [r3, #4]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d128      	bne.n	80060d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d110      	bne.n	80060b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e00f      	b.n	80060d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	1ff80000 	.word	0x1ff80000

08006104 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b01      	cmp	r3, #1
 8006122:	f040 80ce 	bne.w	80062c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d132      	bne.n	8006194 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006148:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800614c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618c:	0cdb      	lsrs	r3, r3, #19
 800618e:	04db      	lsls	r3, r3, #19
 8006190:	6113      	str	r3, [r2, #16]
 8006192:	e04e      	b.n	8006232 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ae:	0cdb      	lsrs	r3, r3, #19
 80061b0:	04db      	lsls	r3, r3, #19
 80061b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800620a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006222:	6939      	ldr	r1, [r7, #16]
 8006224:	0148      	lsls	r0, r1, #5
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	4401      	add	r1, r0
 800622a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800622e:	4313      	orrs	r3, r2
 8006230:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d11e      	bne.n	8006276 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	461a      	mov	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	e097      	b.n	80063a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006294:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8083 	beq.w	80063a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	2101      	movs	r1, #1
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	6979      	ldr	r1, [r7, #20]
 80062b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062bc:	4313      	orrs	r3, r2
 80062be:	634b      	str	r3, [r1, #52]	; 0x34
 80062c0:	e071      	b.n	80063a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062dc:	0cdb      	lsrs	r3, r3, #19
 80062de:	04db      	lsls	r3, r3, #19
 80062e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006304:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800633c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006354:	6939      	ldr	r1, [r7, #16]
 8006356:	0148      	lsls	r0, r1, #5
 8006358:	6979      	ldr	r1, [r7, #20]
 800635a:	4401      	add	r1, r0
 800635c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006360:	4313      	orrs	r3, r2
 8006362:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d10d      	bne.n	8006386 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6919      	ldr	r1, [r3, #16]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006382:	460a      	mov	r2, r1
 8006384:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	440a      	add	r2, r1
 800639c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d14a      	bne.n	8006468 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ea:	f040 8086 	bne.w	80064fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	7812      	ldrb	r2, [r2, #0]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006410:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	7812      	ldrb	r2, [r2, #0]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006434:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006442:	4293      	cmp	r3, r2
 8006444:	d902      	bls.n	800644c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
          break;
 800644a:	e056      	b.n	80064fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006464:	d0e7      	beq.n	8006436 <USB_EPStopXfer+0x82>
 8006466:	e048      	b.n	80064fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800647c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006480:	d13b      	bne.n	80064fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d902      	bls.n	80064e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	75fb      	strb	r3, [r7, #23]
          break;
 80064de:	e00c      	b.n	80064fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f8:	d0e7      	beq.n	80064ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4611      	mov	r1, r2
 8006514:	461a      	mov	r2, r3
 8006516:	460b      	mov	r3, r1
 8006518:	71fb      	strb	r3, [r7, #7]
 800651a:	4613      	mov	r3, r2
 800651c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d123      	bne.n	8006576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800652e:	88bb      	ldrh	r3, [r7, #4]
 8006530:	3303      	adds	r3, #3
 8006532:	089b      	lsrs	r3, r3, #2
 8006534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006536:	2300      	movs	r3, #0
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	e018      	b.n	800656e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	031a      	lsls	r2, r3, #12
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	4413      	add	r3, r2
 8006544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006548:	461a      	mov	r2, r3
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	3301      	adds	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3301      	adds	r3, #1
 800655a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	3301      	adds	r3, #1
 8006560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	3301      	adds	r3, #1
 8006566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	3301      	adds	r3, #1
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	d3e2      	bcc.n	800653c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3724      	adds	r7, #36	; 0x24
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006584:	b480      	push	{r7}
 8006586:	b08b      	sub	sp, #44	; 0x2c
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	089b      	lsrs	r3, r3, #2
 800659e:	b29b      	uxth	r3, r3
 80065a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065a2:	88fb      	ldrh	r3, [r7, #6]
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	623b      	str	r3, [r7, #32]
 80065ae:	e014      	b.n	80065da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	3301      	adds	r3, #1
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	3301      	adds	r3, #1
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	3301      	adds	r3, #1
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	3301      	adds	r3, #1
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	3301      	adds	r3, #1
 80065d8:	623b      	str	r3, [r7, #32]
 80065da:	6a3a      	ldr	r2, [r7, #32]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d3e6      	bcc.n	80065b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065e2:	8bfb      	ldrh	r3, [r7, #30]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01e      	beq.n	8006626 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f2:	461a      	mov	r2, r3
 80065f4:	f107 0310 	add.w	r3, r7, #16
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	b2da      	uxtb	r2, r3
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	701a      	strb	r2, [r3, #0]
      i++;
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	3301      	adds	r3, #1
 8006612:	623b      	str	r3, [r7, #32]
      pDest++;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	3301      	adds	r3, #1
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800661a:	8bfb      	ldrh	r3, [r7, #30]
 800661c:	3b01      	subs	r3, #1
 800661e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006620:	8bfb      	ldrh	r3, [r7, #30]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1ea      	bne.n	80065fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006628:	4618      	mov	r0, r3
 800662a:	372c      	adds	r7, #44	; 0x2c
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d12c      	bne.n	80066aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	db12      	blt.n	8006688 <USB_EPSetStall+0x54>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00f      	beq.n	8006688 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006682:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006686:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e02b      	b.n	8006702 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	db12      	blt.n	80066e2 <USB_EPSetStall+0xae>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00f      	beq.n	80066e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	0151      	lsls	r1, r2, #5
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	440a      	add	r2, r1
 80066f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d128      	bne.n	800677e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	440a      	add	r2, r1
 8006742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800674a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	791b      	ldrb	r3, [r3, #4]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d003      	beq.n	800675c <USB_EPClearStall+0x4c>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	791b      	ldrb	r3, [r3, #4]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d138      	bne.n	80067ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	440a      	add	r2, r1
 8006772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	e027      	b.n	80067ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800679c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	791b      	ldrb	r3, [r3, #4]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d003      	beq.n	80067ae <USB_EPClearStall+0x9e>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	791b      	ldrb	r3, [r3, #4]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d10f      	bne.n	80067ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006810:	68f9      	ldr	r1, [r7, #12]
 8006812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006816:	4313      	orrs	r3, r2
 8006818:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006856:	f023 0302 	bic.w	r3, r3, #2
 800685a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006898:	f043 0302 	orr.w	r3, r3, #2
 800689c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4013      	ands	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068c4:	68fb      	ldr	r3, [r7, #12]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b085      	sub	sp, #20
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	0c1b      	lsrs	r3, r3, #16
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	4013      	ands	r3, r2
 8006928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	b29b      	uxth	r3, r3
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	4013      	ands	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006968:	68bb      	ldr	r3, [r7, #8]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006976:	b480      	push	{r7}
 8006978:	b087      	sub	sp, #28
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006998:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	fa22 f303 	lsr.w	r3, r2, r3
 80069a6:	01db      	lsls	r3, r3, #7
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4013      	ands	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069c4:	68bb      	ldr	r3, [r7, #8]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f003 0301 	and.w	r3, r3, #1
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a0c:	f023 0307 	bic.w	r3, r3, #7
 8006a10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	333c      	adds	r3, #60	; 0x3c
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4a26      	ldr	r2, [pc, #152]	; (8006aec <USB_EP0_OutStart+0xb8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d90a      	bls.n	8006a6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a68:	d101      	bne.n	8006a6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e037      	b.n	8006ade <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	461a      	mov	r2, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9c:	f043 0318 	orr.w	r3, r3, #24
 8006aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ab4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d10f      	bne.n	8006adc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	4f54300a 	.word	0x4f54300a

08006af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <USB_CoreReset+0x64>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e01b      	b.n	8006b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	daf2      	bge.n	8006afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f043 0201 	orr.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <USB_CoreReset+0x64>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d901      	bls.n	8006b38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e006      	b.n	8006b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d0f0      	beq.n	8006b26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	00030d40 	.word	0x00030d40

08006b58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b68:	f002 fc94 	bl	8009494 <USBD_static_malloc>
 8006b6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	32b0      	adds	r2, #176	; 0xb0
 8006b7e:	2100      	movs	r1, #0
 8006b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b84:	2302      	movs	r3, #2
 8006b86:	e0d4      	b.n	8006d32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b88:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f003 fa63 	bl	800a05a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	32b0      	adds	r2, #176	; 0xb0
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	32b0      	adds	r2, #176	; 0xb0
 8006bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	7c1b      	ldrb	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d138      	bne.n	8006c32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bc0:	4b5e      	ldr	r3, [pc, #376]	; (8006d3c <USBD_CDC_Init+0x1e4>)
 8006bc2:	7819      	ldrb	r1, [r3, #0]
 8006bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc8:	2202      	movs	r2, #2
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f002 fb3f 	bl	800924e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bd0:	4b5a      	ldr	r3, [pc, #360]	; (8006d3c <USBD_CDC_Init+0x1e4>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f003 020f 	and.w	r2, r3, #15
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	3324      	adds	r3, #36	; 0x24
 8006be6:	2201      	movs	r2, #1
 8006be8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bea:	4b55      	ldr	r3, [pc, #340]	; (8006d40 <USBD_CDC_Init+0x1e8>)
 8006bec:	7819      	ldrb	r1, [r3, #0]
 8006bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f002 fb2a 	bl	800924e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bfa:	4b51      	ldr	r3, [pc, #324]	; (8006d40 <USBD_CDC_Init+0x1e8>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	f003 020f 	and.w	r2, r3, #15
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c12:	2201      	movs	r2, #1
 8006c14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c16:	4b4b      	ldr	r3, [pc, #300]	; (8006d44 <USBD_CDC_Init+0x1ec>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f003 020f 	and.w	r2, r3, #15
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	3326      	adds	r3, #38	; 0x26
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e035      	b.n	8006c9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c32:	4b42      	ldr	r3, [pc, #264]	; (8006d3c <USBD_CDC_Init+0x1e4>)
 8006c34:	7819      	ldrb	r1, [r3, #0]
 8006c36:	2340      	movs	r3, #64	; 0x40
 8006c38:	2202      	movs	r2, #2
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f002 fb07 	bl	800924e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c40:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <USBD_CDC_Init+0x1e4>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	3324      	adds	r3, #36	; 0x24
 8006c56:	2201      	movs	r2, #1
 8006c58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c5a:	4b39      	ldr	r3, [pc, #228]	; (8006d40 <USBD_CDC_Init+0x1e8>)
 8006c5c:	7819      	ldrb	r1, [r3, #0]
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	2202      	movs	r2, #2
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f002 faf3 	bl	800924e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c68:	4b35      	ldr	r3, [pc, #212]	; (8006d40 <USBD_CDC_Init+0x1e8>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	f003 020f 	and.w	r2, r3, #15
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c80:	2201      	movs	r2, #1
 8006c82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c84:	4b2f      	ldr	r3, [pc, #188]	; (8006d44 <USBD_CDC_Init+0x1ec>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 020f 	and.w	r2, r3, #15
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3326      	adds	r3, #38	; 0x26
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c9e:	4b29      	ldr	r3, [pc, #164]	; (8006d44 <USBD_CDC_Init+0x1ec>)
 8006ca0:	7819      	ldrb	r1, [r3, #0]
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f002 fad1 	bl	800924e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006cac:	4b25      	ldr	r3, [pc, #148]	; (8006d44 <USBD_CDC_Init+0x1ec>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f003 020f 	and.w	r2, r3, #15
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	3324      	adds	r3, #36	; 0x24
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	33b0      	adds	r3, #176	; 0xb0
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	e018      	b.n	8006d32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	7c1b      	ldrb	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d08:	4b0d      	ldr	r3, [pc, #52]	; (8006d40 <USBD_CDC_Init+0x1e8>)
 8006d0a:	7819      	ldrb	r1, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f002 fb88 	bl	800942c <USBD_LL_PrepareReceive>
 8006d1c:	e008      	b.n	8006d30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d1e:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <USBD_CDC_Init+0x1e8>)
 8006d20:	7819      	ldrb	r1, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d28:	2340      	movs	r3, #64	; 0x40
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f002 fb7e 	bl	800942c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000093 	.word	0x20000093
 8006d40:	20000094 	.word	0x20000094
 8006d44:	20000095 	.word	0x20000095

08006d48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d54:	4b3a      	ldr	r3, [pc, #232]	; (8006e40 <USBD_CDC_DeInit+0xf8>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f002 fa9d 	bl	800929a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d60:	4b37      	ldr	r3, [pc, #220]	; (8006e40 <USBD_CDC_DeInit+0xf8>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 020f 	and.w	r2, r3, #15
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	3324      	adds	r3, #36	; 0x24
 8006d76:	2200      	movs	r2, #0
 8006d78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d7a:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <USBD_CDC_DeInit+0xfc>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f002 fa8a 	bl	800929a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d86:	4b2f      	ldr	r3, [pc, #188]	; (8006e44 <USBD_CDC_DeInit+0xfc>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d9e:	2200      	movs	r2, #0
 8006da0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006da2:	4b29      	ldr	r3, [pc, #164]	; (8006e48 <USBD_CDC_DeInit+0x100>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f002 fa76 	bl	800929a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006dae:	4b26      	ldr	r3, [pc, #152]	; (8006e48 <USBD_CDC_DeInit+0x100>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	f003 020f 	and.w	r2, r3, #15
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	3324      	adds	r3, #36	; 0x24
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006dc8:	4b1f      	ldr	r3, [pc, #124]	; (8006e48 <USBD_CDC_DeInit+0x100>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	f003 020f 	and.w	r2, r3, #15
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	3326      	adds	r3, #38	; 0x26
 8006dde:	2200      	movs	r2, #0
 8006de0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32b0      	adds	r2, #176	; 0xb0
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d01f      	beq.n	8006e34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	33b0      	adds	r3, #176	; 0xb0
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	32b0      	adds	r2, #176	; 0xb0
 8006e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f002 fb4a 	bl	80094b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32b0      	adds	r2, #176	; 0xb0
 8006e26:	2100      	movs	r1, #0
 8006e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000093 	.word	0x20000093
 8006e44:	20000094 	.word	0x20000094
 8006e48:	20000095 	.word	0x20000095

08006e4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	32b0      	adds	r2, #176	; 0xb0
 8006e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e0bf      	b.n	8006ffc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d050      	beq.n	8006f2a <USBD_CDC_Setup+0xde>
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	f040 80af 	bne.w	8006fec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	88db      	ldrh	r3, [r3, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d03a      	beq.n	8006f0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	b25b      	sxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	da1b      	bge.n	8006ed8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	33b0      	adds	r3, #176	; 0xb0
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006eb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	88d2      	ldrh	r2, [r2, #6]
 8006ebc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	2b07      	cmp	r3, #7
 8006ec4:	bf28      	it	cs
 8006ec6:	2307      	movcs	r3, #7
 8006ec8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	89fa      	ldrh	r2, [r7, #14]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fd89 	bl	80089e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ed6:	e090      	b.n	8006ffa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	785a      	ldrb	r2, [r3, #1]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	88db      	ldrh	r3, [r3, #6]
 8006ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8006ee8:	d803      	bhi.n	8006ef2 <USBD_CDC_Setup+0xa6>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	e000      	b.n	8006ef4 <USBD_CDC_Setup+0xa8>
 8006ef2:	2240      	movs	r2, #64	; 0x40
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006efa:	6939      	ldr	r1, [r7, #16]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f02:	461a      	mov	r2, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 fd9b 	bl	8008a40 <USBD_CtlPrepareRx>
      break;
 8006f0a:	e076      	b.n	8006ffa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	33b0      	adds	r3, #176	; 0xb0
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	7850      	ldrb	r0, [r2, #1]
 8006f22:	2200      	movs	r2, #0
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	4798      	blx	r3
      break;
 8006f28:	e067      	b.n	8006ffa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b0b      	cmp	r3, #11
 8006f30:	d851      	bhi.n	8006fd6 <USBD_CDC_Setup+0x18a>
 8006f32:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <USBD_CDC_Setup+0xec>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f69 	.word	0x08006f69
 8006f3c:	08006fe5 	.word	0x08006fe5
 8006f40:	08006fd7 	.word	0x08006fd7
 8006f44:	08006fd7 	.word	0x08006fd7
 8006f48:	08006fd7 	.word	0x08006fd7
 8006f4c:	08006fd7 	.word	0x08006fd7
 8006f50:	08006fd7 	.word	0x08006fd7
 8006f54:	08006fd7 	.word	0x08006fd7
 8006f58:	08006fd7 	.word	0x08006fd7
 8006f5c:	08006fd7 	.word	0x08006fd7
 8006f60:	08006f93 	.word	0x08006f93
 8006f64:	08006fbd 	.word	0x08006fbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d107      	bne.n	8006f84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f74:	f107 030a 	add.w	r3, r7, #10
 8006f78:	2202      	movs	r2, #2
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fd33 	bl	80089e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f82:	e032      	b.n	8006fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fcbd 	bl	8008906 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8006f90:	e02b      	b.n	8006fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d107      	bne.n	8006fae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f9e:	f107 030d 	add.w	r3, r7, #13
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fd1e 	bl	80089e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fac:	e01d      	b.n	8006fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 fca8 	bl	8008906 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fba:	e016      	b.n	8006fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d00f      	beq.n	8006fe8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 fc9b 	bl	8008906 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fd4:	e008      	b.n	8006fe8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 fc94 	bl	8008906 <USBD_CtlError>
          ret = USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe2:	e002      	b.n	8006fea <USBD_CDC_Setup+0x19e>
          break;
 8006fe4:	bf00      	nop
 8006fe6:	e008      	b.n	8006ffa <USBD_CDC_Setup+0x1ae>
          break;
 8006fe8:	bf00      	nop
      }
      break;
 8006fea:	e006      	b.n	8006ffa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 fc89 	bl	8008906 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	32b0      	adds	r2, #176	; 0xb0
 8007022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800702a:	2303      	movs	r3, #3
 800702c:	e065      	b.n	80070fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	32b0      	adds	r2, #176	; 0xb0
 8007038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	f003 020f 	and.w	r2, r3, #15
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	440b      	add	r3, r1
 8007050:	3318      	adds	r3, #24
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d02f      	beq.n	80070b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	f003 020f 	and.w	r2, r3, #15
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	3318      	adds	r3, #24
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	f003 010f 	and.w	r1, r3, #15
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	460b      	mov	r3, r1
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	440b      	add	r3, r1
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4403      	add	r3, r0
 8007080:	3348      	adds	r3, #72	; 0x48
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	fbb2 f1f3 	udiv	r1, r2, r3
 8007088:	fb01 f303 	mul.w	r3, r1, r3
 800708c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800708e:	2b00      	cmp	r3, #0
 8007090:	d112      	bne.n	80070b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	f003 020f 	and.w	r2, r3, #15
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	3318      	adds	r3, #24
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070aa:	78f9      	ldrb	r1, [r7, #3]
 80070ac:	2300      	movs	r3, #0
 80070ae:	2200      	movs	r2, #0
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f002 f99a 	bl	80093ea <USBD_LL_Transmit>
 80070b6:	e01f      	b.n	80070f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	33b0      	adds	r3, #176	; 0xb0
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d010      	beq.n	80070f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	33b0      	adds	r3, #176	; 0xb0
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070f4:	78fa      	ldrb	r2, [r7, #3]
 80070f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	32b0      	adds	r2, #176	; 0xb0
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	32b0      	adds	r2, #176	; 0xb0
 8007128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	e01a      	b.n	800716a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f002 f998 	bl	800946e <USBD_LL_GetRxDataSize>
 800713e:	4602      	mov	r2, r0
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	33b0      	adds	r3, #176	; 0xb0
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007164:	4611      	mov	r1, r2
 8007166:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	32b0      	adds	r2, #176	; 0xb0
 8007184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007188:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007190:	2303      	movs	r3, #3
 8007192:	e025      	b.n	80071e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	33b0      	adds	r3, #176	; 0xb0
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01a      	beq.n	80071de <USBD_CDC_EP0_RxReady+0x6c>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071ae:	2bff      	cmp	r3, #255	; 0xff
 80071b0:	d015      	beq.n	80071de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	33b0      	adds	r3, #176	; 0xb0
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80071ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071d2:	b292      	uxth	r2, r2
 80071d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	22ff      	movs	r2, #255	; 0xff
 80071da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071f0:	2182      	movs	r1, #130	; 0x82
 80071f2:	4818      	ldr	r0, [pc, #96]	; (8007254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071f4:	f000 fd4f 	bl	8007c96 <USBD_GetEpDesc>
 80071f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071fa:	2101      	movs	r1, #1
 80071fc:	4815      	ldr	r0, [pc, #84]	; (8007254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071fe:	f000 fd4a 	bl	8007c96 <USBD_GetEpDesc>
 8007202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007204:	2181      	movs	r1, #129	; 0x81
 8007206:	4813      	ldr	r0, [pc, #76]	; (8007254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007208:	f000 fd45 	bl	8007c96 <USBD_GetEpDesc>
 800720c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2210      	movs	r2, #16
 8007218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d006      	beq.n	800722e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2200      	movs	r2, #0
 8007224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007228:	711a      	strb	r2, [r3, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d006      	beq.n	8007242 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800723c:	711a      	strb	r2, [r3, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2243      	movs	r2, #67	; 0x43
 8007246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000050 	.word	0x20000050

08007258 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007260:	2182      	movs	r1, #130	; 0x82
 8007262:	4818      	ldr	r0, [pc, #96]	; (80072c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007264:	f000 fd17 	bl	8007c96 <USBD_GetEpDesc>
 8007268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800726a:	2101      	movs	r1, #1
 800726c:	4815      	ldr	r0, [pc, #84]	; (80072c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800726e:	f000 fd12 	bl	8007c96 <USBD_GetEpDesc>
 8007272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007274:	2181      	movs	r1, #129	; 0x81
 8007276:	4813      	ldr	r0, [pc, #76]	; (80072c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007278:	f000 fd0d 	bl	8007c96 <USBD_GetEpDesc>
 800727c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2210      	movs	r2, #16
 8007288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d006      	beq.n	800729e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	2200      	movs	r2, #0
 8007294:	711a      	strb	r2, [r3, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f042 0202 	orr.w	r2, r2, #2
 800729c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d006      	beq.n	80072b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	711a      	strb	r2, [r3, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f042 0202 	orr.w	r2, r2, #2
 80072b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2243      	movs	r2, #67	; 0x43
 80072b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072b8:	4b02      	ldr	r3, [pc, #8]	; (80072c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000050 	.word	0x20000050

080072c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072d0:	2182      	movs	r1, #130	; 0x82
 80072d2:	4818      	ldr	r0, [pc, #96]	; (8007334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072d4:	f000 fcdf 	bl	8007c96 <USBD_GetEpDesc>
 80072d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072da:	2101      	movs	r1, #1
 80072dc:	4815      	ldr	r0, [pc, #84]	; (8007334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072de:	f000 fcda 	bl	8007c96 <USBD_GetEpDesc>
 80072e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072e4:	2181      	movs	r1, #129	; 0x81
 80072e6:	4813      	ldr	r0, [pc, #76]	; (8007334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072e8:	f000 fcd5 	bl	8007c96 <USBD_GetEpDesc>
 80072ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2210      	movs	r2, #16
 80072f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d006      	beq.n	800730e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2200      	movs	r2, #0
 8007304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007308:	711a      	strb	r2, [r3, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d006      	beq.n	8007322 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800731c:	711a      	strb	r2, [r3, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2243      	movs	r2, #67	; 0x43
 8007326:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007328:	4b02      	ldr	r3, [pc, #8]	; (8007334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000050 	.word	0x20000050

08007338 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	220a      	movs	r2, #10
 8007344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007346:	4b03      	ldr	r3, [pc, #12]	; (8007354 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	2000000c 	.word	0x2000000c

08007358 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	e009      	b.n	8007380 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	33b0      	adds	r3, #176	; 0xb0
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	32b0      	adds	r2, #176	; 0xb0
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e008      	b.n	80073c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	32b0      	adds	r2, #176	; 0xb0
 80073e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e004      	b.n	80073fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
	...

0800740c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	32b0      	adds	r2, #176	; 0xb0
 800741e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007422:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007424:	2301      	movs	r3, #1
 8007426:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32b0      	adds	r2, #176	; 0xb0
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800743a:	2303      	movs	r3, #3
 800743c:	e025      	b.n	800748a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007444:	2b00      	cmp	r3, #0
 8007446:	d11f      	bne.n	8007488 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2201      	movs	r2, #1
 800744c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007450:	4b10      	ldr	r3, [pc, #64]	; (8007494 <USBD_CDC_TransmitPacket+0x88>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 020f 	and.w	r2, r3, #15
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4403      	add	r3, r0
 800746a:	3318      	adds	r3, #24
 800746c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800746e:	4b09      	ldr	r3, [pc, #36]	; (8007494 <USBD_CDC_TransmitPacket+0x88>)
 8007470:	7819      	ldrb	r1, [r3, #0]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 ffb3 	bl	80093ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000093 	.word	0x20000093

08007498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32b0      	adds	r2, #176	; 0xb0
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32b0      	adds	r2, #176	; 0xb0
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e018      	b.n	80074f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	7c1b      	ldrb	r3, [r3, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074ce:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <USBD_CDC_ReceivePacket+0x68>)
 80074d0:	7819      	ldrb	r1, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 ffa5 	bl	800942c <USBD_LL_PrepareReceive>
 80074e2:	e008      	b.n	80074f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <USBD_CDC_ReceivePacket+0x68>)
 80074e6:	7819      	ldrb	r1, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074ee:	2340      	movs	r3, #64	; 0x40
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 ff9b 	bl	800942c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000094 	.word	0x20000094

08007504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	e01f      	b.n	800755c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	79fa      	ldrb	r2, [r7, #7]
 800754e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f001 fe15 	bl	8009180 <USBD_LL_Init>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007578:	2303      	movs	r3, #3
 800757a:	e025      	b.n	80075c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	; 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00f      	beq.n	80075b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	; 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	f107 020e 	add.w	r2, r7, #14
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	4602      	mov	r2, r0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 fe1d 	bl	8009218 <USBD_LL_Start>
 80075de:	4603      	mov	r3, r0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	4611      	mov	r1, r2
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	78fa      	ldrb	r2, [r7, #3]
 8007650:	4611      	mov	r1, r2
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f001 f908 	bl	8008892 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d01a      	beq.n	80076dc <USBD_LL_SetupStage+0x72>
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d822      	bhi.n	80076f0 <USBD_LL_SetupStage+0x86>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <USBD_LL_SetupStage+0x4a>
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d00a      	beq.n	80076c8 <USBD_LL_SetupStage+0x5e>
 80076b2:	e01d      	b.n	80076f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fb5f 	bl	8007d80 <USBD_StdDevReq>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]
      break;
 80076c6:	e020      	b.n	800770a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fbc7 	bl	8007e64 <USBD_StdItfReq>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73fb      	strb	r3, [r7, #15]
      break;
 80076da:	e016      	b.n	800770a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fc29 	bl	8007f3c <USBD_StdEPReq>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
      break;
 80076ee:	e00c      	b.n	800770a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 fdea 	bl	80092d8 <USBD_LL_StallEP>
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]
      break;
 8007708:	bf00      	nop
  }

  return ret;
 800770a:	7bfb      	ldrb	r3, [r7, #15]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	460b      	mov	r3, r1
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d16e      	bne.n	800780a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800773a:	2b03      	cmp	r3, #3
 800773c:	f040 8098 	bne.w	8007870 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	429a      	cmp	r2, r3
 800774a:	d913      	bls.n	8007774 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	1ad2      	subs	r2, r2, r3
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	4293      	cmp	r3, r2
 8007764:	bf28      	it	cs
 8007766:	4613      	movcs	r3, r2
 8007768:	461a      	mov	r2, r3
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f001 f984 	bl	8008a7a <USBD_CtlContinueRx>
 8007772:	e07d      	b.n	8007870 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	2b02      	cmp	r3, #2
 8007780:	d014      	beq.n	80077ac <USBD_LL_DataOutStage+0x98>
 8007782:	2b02      	cmp	r3, #2
 8007784:	d81d      	bhi.n	80077c2 <USBD_LL_DataOutStage+0xae>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <USBD_LL_DataOutStage+0x7c>
 800778a:	2b01      	cmp	r3, #1
 800778c:	d003      	beq.n	8007796 <USBD_LL_DataOutStage+0x82>
 800778e:	e018      	b.n	80077c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	75bb      	strb	r3, [r7, #22]
            break;
 8007794:	e018      	b.n	80077c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800779c:	b2db      	uxtb	r3, r3
 800779e:	4619      	mov	r1, r3
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fa5e 	bl	8007c62 <USBD_CoreFindIF>
 80077a6:	4603      	mov	r3, r0
 80077a8:	75bb      	strb	r3, [r7, #22]
            break;
 80077aa:	e00d      	b.n	80077c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	4619      	mov	r1, r3
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fa60 	bl	8007c7c <USBD_CoreFindEP>
 80077bc:	4603      	mov	r3, r0
 80077be:	75bb      	strb	r3, [r7, #22]
            break;
 80077c0:	e002      	b.n	80077c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	75bb      	strb	r3, [r7, #22]
            break;
 80077c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80077c8:	7dbb      	ldrb	r3, [r7, #22]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d119      	bne.n	8007802 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d113      	bne.n	8007802 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80077da:	7dba      	ldrb	r2, [r7, #22]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	32ae      	adds	r2, #174	; 0xae
 80077e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80077ea:	7dba      	ldrb	r2, [r7, #22]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077f2:	7dba      	ldrb	r2, [r7, #22]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	32ae      	adds	r2, #174	; 0xae
 80077f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f001 f94a 	bl	8008a9c <USBD_CtlSendStatus>
 8007808:	e032      	b.n	8007870 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007810:	b2db      	uxtb	r3, r3
 8007812:	4619      	mov	r1, r3
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 fa31 	bl	8007c7c <USBD_CoreFindEP>
 800781a:	4603      	mov	r3, r0
 800781c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800781e:	7dbb      	ldrb	r3, [r7, #22]
 8007820:	2bff      	cmp	r3, #255	; 0xff
 8007822:	d025      	beq.n	8007870 <USBD_LL_DataOutStage+0x15c>
 8007824:	7dbb      	ldrb	r3, [r7, #22]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d122      	bne.n	8007870 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b03      	cmp	r3, #3
 8007834:	d117      	bne.n	8007866 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007836:	7dba      	ldrb	r2, [r7, #22]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	32ae      	adds	r2, #174	; 0xae
 800783c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00f      	beq.n	8007866 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007846:	7dba      	ldrb	r2, [r7, #22]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800784e:	7dba      	ldrb	r2, [r7, #22]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	32ae      	adds	r2, #174	; 0xae
 8007854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	7afa      	ldrb	r2, [r7, #11]
 800785c:	4611      	mov	r1, r2
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	e000      	b.n	8007872 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b086      	sub	sp, #24
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	460b      	mov	r3, r1
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d16f      	bne.n	800796e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3314      	adds	r3, #20
 8007892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800789a:	2b02      	cmp	r3, #2
 800789c:	d15a      	bne.n	8007954 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d914      	bls.n	80078d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	461a      	mov	r2, r3
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f001 f8ac 	bl	8008a1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078c6:	2300      	movs	r3, #0
 80078c8:	2200      	movs	r2, #0
 80078ca:	2100      	movs	r1, #0
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f001 fdad 	bl	800942c <USBD_LL_PrepareReceive>
 80078d2:	e03f      	b.n	8007954 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d11c      	bne.n	800791a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d316      	bcc.n	800791a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d20f      	bcs.n	800791a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f001 f88d 	bl	8008a1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800790c:	2300      	movs	r3, #0
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f001 fd8a 	bl	800942c <USBD_LL_PrepareReceive>
 8007918:	e01c      	b.n	8007954 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d10f      	bne.n	8007946 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007946:	2180      	movs	r1, #128	; 0x80
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f001 fcc5 	bl	80092d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f001 f8b7 	bl	8008ac2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d03a      	beq.n	80079d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff fe42 	bl	80075e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800796c:	e032      	b.n	80079d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007974:	b2db      	uxtb	r3, r3
 8007976:	4619      	mov	r1, r3
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 f97f 	bl	8007c7c <USBD_CoreFindEP>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	2bff      	cmp	r3, #255	; 0xff
 8007986:	d025      	beq.n	80079d4 <USBD_LL_DataInStage+0x15a>
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d122      	bne.n	80079d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b03      	cmp	r3, #3
 8007998:	d11c      	bne.n	80079d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800799a:	7dfa      	ldrb	r2, [r7, #23]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	32ae      	adds	r2, #174	; 0xae
 80079a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d014      	beq.n	80079d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80079aa:	7dfa      	ldrb	r2, [r7, #23]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80079b2:	7dfa      	ldrb	r2, [r7, #23]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	32ae      	adds	r2, #174	; 0xae
 80079b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	7afa      	ldrb	r2, [r7, #11]
 80079c0:	4611      	mov	r1, r2
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	4798      	blx	r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80079ca:	7dbb      	ldrb	r3, [r7, #22]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80079d0:	7dbb      	ldrb	r3, [r7, #22]
 80079d2:	e000      	b.n	80079d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d014      	beq.n	8007a44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00e      	beq.n	8007a44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6852      	ldr	r2, [r2, #4]
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	4611      	mov	r1, r2
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a40:	2303      	movs	r3, #3
 8007a42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a44:	2340      	movs	r3, #64	; 0x40
 8007a46:	2200      	movs	r2, #0
 8007a48:	2100      	movs	r1, #0
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 fbff 	bl	800924e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2240      	movs	r2, #64	; 0x40
 8007a5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	2200      	movs	r2, #0
 8007a64:	2180      	movs	r1, #128	; 0x80
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fbf1 	bl	800924e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2240      	movs	r2, #64	; 0x40
 8007a76:	621a      	str	r2, [r3, #32]

  return ret;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2204      	movs	r2, #4
 8007abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d106      	bne.n	8007af0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d110      	bne.n	8007b34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	32ae      	adds	r2, #174	; 0xae
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e01c      	b.n	8007b9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d115      	bne.n	8007b98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	32ae      	adds	r2, #174	; 0xae
 8007b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	32ae      	adds	r2, #174	; 0xae
 8007b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	4611      	mov	r1, r2
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	32ae      	adds	r2, #174	; 0xae
 8007bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e01c      	b.n	8007bfe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d115      	bne.n	8007bfc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	32ae      	adds	r2, #174	; 0xae
 8007bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	32ae      	adds	r2, #174	; 0xae
 8007bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	78fa      	ldrb	r2, [r7, #3]
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00e      	beq.n	8007c58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6852      	ldr	r2, [r2, #4]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	4611      	mov	r1, r2
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	885b      	ldrh	r3, [r3, #2]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d920      	bls.n	8007d00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007cc6:	e013      	b.n	8007cf0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007cc8:	f107 030a 	add.w	r3, r7, #10
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6978      	ldr	r0, [r7, #20]
 8007cd0:	f000 f81b 	bl	8007d0a <USBD_GetNextDesc>
 8007cd4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	2b05      	cmp	r3, #5
 8007cdc:	d108      	bne.n	8007cf0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	789b      	ldrb	r3, [r3, #2]
 8007ce6:	78fa      	ldrb	r2, [r7, #3]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d008      	beq.n	8007cfe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	885b      	ldrh	r3, [r3, #2]
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	897b      	ldrh	r3, [r7, #10]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d8e5      	bhi.n	8007cc8 <USBD_GetEpDesc+0x32>
 8007cfc:	e000      	b.n	8007d00 <USBD_GetEpDesc+0x6a>
          break;
 8007cfe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d00:	693b      	ldr	r3, [r7, #16]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	881a      	ldrh	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	4413      	add	r3, r2
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d62:	8a3b      	ldrh	r3, [r7, #16]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	b21a      	sxth	r2, r3
 8007d68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	b21b      	sxth	r3, r3
 8007d70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d72:	89fb      	ldrh	r3, [r7, #14]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d96:	2b40      	cmp	r3, #64	; 0x40
 8007d98:	d005      	beq.n	8007da6 <USBD_StdDevReq+0x26>
 8007d9a:	2b40      	cmp	r3, #64	; 0x40
 8007d9c:	d857      	bhi.n	8007e4e <USBD_StdDevReq+0xce>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00f      	beq.n	8007dc2 <USBD_StdDevReq+0x42>
 8007da2:	2b20      	cmp	r3, #32
 8007da4:	d153      	bne.n	8007e4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	32ae      	adds	r2, #174	; 0xae
 8007db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc0:	e04a      	b.n	8007e58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	785b      	ldrb	r3, [r3, #1]
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	d83b      	bhi.n	8007e42 <USBD_StdDevReq+0xc2>
 8007dca:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <USBD_StdDevReq+0x50>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007e25 	.word	0x08007e25
 8007dd4:	08007e39 	.word	0x08007e39
 8007dd8:	08007e43 	.word	0x08007e43
 8007ddc:	08007e2f 	.word	0x08007e2f
 8007de0:	08007e43 	.word	0x08007e43
 8007de4:	08007e03 	.word	0x08007e03
 8007de8:	08007df9 	.word	0x08007df9
 8007dec:	08007e43 	.word	0x08007e43
 8007df0:	08007e1b 	.word	0x08007e1b
 8007df4:	08007e0d 	.word	0x08007e0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa3c 	bl	8008278 <USBD_GetDescriptor>
          break;
 8007e00:	e024      	b.n	8007e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fba1 	bl	800854c <USBD_SetAddress>
          break;
 8007e0a:	e01f      	b.n	8007e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fbe0 	bl	80085d4 <USBD_SetConfig>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
          break;
 8007e18:	e018      	b.n	8007e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fc83 	bl	8008728 <USBD_GetConfig>
          break;
 8007e22:	e013      	b.n	8007e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fcb4 	bl	8008794 <USBD_GetStatus>
          break;
 8007e2c:	e00e      	b.n	8007e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fce3 	bl	80087fc <USBD_SetFeature>
          break;
 8007e36:	e009      	b.n	8007e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fd07 	bl	800884e <USBD_ClrFeature>
          break;
 8007e40:	e004      	b.n	8007e4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fd5e 	bl	8008906 <USBD_CtlError>
          break;
 8007e4a:	bf00      	nop
      }
      break;
 8007e4c:	e004      	b.n	8007e58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fd58 	bl	8008906 <USBD_CtlError>
      break;
 8007e56:	bf00      	nop
  }

  return ret;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop

08007e64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e7a:	2b40      	cmp	r3, #64	; 0x40
 8007e7c:	d005      	beq.n	8007e8a <USBD_StdItfReq+0x26>
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d852      	bhi.n	8007f28 <USBD_StdItfReq+0xc4>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <USBD_StdItfReq+0x26>
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	d14e      	bne.n	8007f28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	3b01      	subs	r3, #1
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d840      	bhi.n	8007f1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	889b      	ldrh	r3, [r3, #4]
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d836      	bhi.n	8007f10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	889b      	ldrh	r3, [r3, #4]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff fed9 	bl	8007c62 <USBD_CoreFindIF>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2bff      	cmp	r3, #255	; 0xff
 8007eb8:	d01d      	beq.n	8007ef6 <USBD_StdItfReq+0x92>
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d11a      	bne.n	8007ef6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007ec0:	7bba      	ldrb	r2, [r7, #14]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	32ae      	adds	r2, #174	; 0xae
 8007ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00f      	beq.n	8007ef0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ed0:	7bba      	ldrb	r2, [r7, #14]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ed8:	7bba      	ldrb	r2, [r7, #14]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	32ae      	adds	r2, #174	; 0xae
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007eee:	e004      	b.n	8007efa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ef4:	e001      	b.n	8007efa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d110      	bne.n	8007f24 <USBD_StdItfReq+0xc0>
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10d      	bne.n	8007f24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fdc7 	bl	8008a9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f0e:	e009      	b.n	8007f24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fcf7 	bl	8008906 <USBD_CtlError>
          break;
 8007f18:	e004      	b.n	8007f24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fcf2 	bl	8008906 <USBD_CtlError>
          break;
 8007f22:	e000      	b.n	8007f26 <USBD_StdItfReq+0xc2>
          break;
 8007f24:	bf00      	nop
      }
      break;
 8007f26:	e004      	b.n	8007f32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fceb 	bl	8008906 <USBD_CtlError>
      break;
 8007f30:	bf00      	nop
  }

  return ret;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	889b      	ldrh	r3, [r3, #4]
 8007f4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f58:	2b40      	cmp	r3, #64	; 0x40
 8007f5a:	d007      	beq.n	8007f6c <USBD_StdEPReq+0x30>
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	f200 817f 	bhi.w	8008260 <USBD_StdEPReq+0x324>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d02a      	beq.n	8007fbc <USBD_StdEPReq+0x80>
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	f040 817a 	bne.w	8008260 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff fe83 	bl	8007c7c <USBD_CoreFindEP>
 8007f76:	4603      	mov	r3, r0
 8007f78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f7a:	7b7b      	ldrb	r3, [r7, #13]
 8007f7c:	2bff      	cmp	r3, #255	; 0xff
 8007f7e:	f000 8174 	beq.w	800826a <USBD_StdEPReq+0x32e>
 8007f82:	7b7b      	ldrb	r3, [r7, #13]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 8170 	bne.w	800826a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f8a:	7b7a      	ldrb	r2, [r7, #13]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f92:	7b7a      	ldrb	r2, [r7, #13]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	32ae      	adds	r2, #174	; 0xae
 8007f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8163 	beq.w	800826a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007fa4:	7b7a      	ldrb	r2, [r7, #13]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32ae      	adds	r2, #174	; 0xae
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fba:	e156      	b.n	800826a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d008      	beq.n	8007fd6 <USBD_StdEPReq+0x9a>
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	f300 8145 	bgt.w	8008254 <USBD_StdEPReq+0x318>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 809b 	beq.w	8008106 <USBD_StdEPReq+0x1ca>
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d03c      	beq.n	800804e <USBD_StdEPReq+0x112>
 8007fd4:	e13e      	b.n	8008254 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d002      	beq.n	8007fe8 <USBD_StdEPReq+0xac>
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d016      	beq.n	8008014 <USBD_StdEPReq+0xd8>
 8007fe6:	e02c      	b.n	8008042 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00d      	beq.n	800800a <USBD_StdEPReq+0xce>
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b80      	cmp	r3, #128	; 0x80
 8007ff2:	d00a      	beq.n	800800a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f96d 	bl	80092d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ffe:	2180      	movs	r1, #128	; 0x80
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 f969 	bl	80092d8 <USBD_LL_StallEP>
 8008006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008008:	e020      	b.n	800804c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fc7a 	bl	8008906 <USBD_CtlError>
              break;
 8008012:	e01b      	b.n	800804c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	885b      	ldrh	r3, [r3, #2]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10e      	bne.n	800803a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <USBD_StdEPReq+0xfe>
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	2b80      	cmp	r3, #128	; 0x80
 8008026:	d008      	beq.n	800803a <USBD_StdEPReq+0xfe>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	88db      	ldrh	r3, [r3, #6]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d104      	bne.n	800803a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f94f 	bl	80092d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fd2e 	bl	8008a9c <USBD_CtlSendStatus>

              break;
 8008040:	e004      	b.n	800804c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fc5e 	bl	8008906 <USBD_CtlError>
              break;
 800804a:	bf00      	nop
          }
          break;
 800804c:	e107      	b.n	800825e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d002      	beq.n	8008060 <USBD_StdEPReq+0x124>
 800805a:	2b03      	cmp	r3, #3
 800805c:	d016      	beq.n	800808c <USBD_StdEPReq+0x150>
 800805e:	e04b      	b.n	80080f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00d      	beq.n	8008082 <USBD_StdEPReq+0x146>
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	2b80      	cmp	r3, #128	; 0x80
 800806a:	d00a      	beq.n	8008082 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f931 	bl	80092d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008076:	2180      	movs	r1, #128	; 0x80
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 f92d 	bl	80092d8 <USBD_LL_StallEP>
 800807e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008080:	e040      	b.n	8008104 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fc3e 	bl	8008906 <USBD_CtlError>
              break;
 800808a:	e03b      	b.n	8008104 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	885b      	ldrh	r3, [r3, #2]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d136      	bne.n	8008102 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 f937 	bl	8009316 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fcf7 	bl	8008a9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff fde2 	bl	8007c7c <USBD_CoreFindEP>
 80080b8:	4603      	mov	r3, r0
 80080ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080bc:	7b7b      	ldrb	r3, [r7, #13]
 80080be:	2bff      	cmp	r3, #255	; 0xff
 80080c0:	d01f      	beq.n	8008102 <USBD_StdEPReq+0x1c6>
 80080c2:	7b7b      	ldrb	r3, [r7, #13]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d11c      	bne.n	8008102 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80080c8:	7b7a      	ldrb	r2, [r7, #13]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80080d0:	7b7a      	ldrb	r2, [r7, #13]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	32ae      	adds	r2, #174	; 0xae
 80080d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d010      	beq.n	8008102 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080e0:	7b7a      	ldrb	r2, [r7, #13]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	32ae      	adds	r2, #174	; 0xae
 80080e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80080f6:	e004      	b.n	8008102 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fc03 	bl	8008906 <USBD_CtlError>
              break;
 8008100:	e000      	b.n	8008104 <USBD_StdEPReq+0x1c8>
              break;
 8008102:	bf00      	nop
          }
          break;
 8008104:	e0ab      	b.n	800825e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d002      	beq.n	8008118 <USBD_StdEPReq+0x1dc>
 8008112:	2b03      	cmp	r3, #3
 8008114:	d032      	beq.n	800817c <USBD_StdEPReq+0x240>
 8008116:	e097      	b.n	8008248 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d007      	beq.n	800812e <USBD_StdEPReq+0x1f2>
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b80      	cmp	r3, #128	; 0x80
 8008122:	d004      	beq.n	800812e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fbed 	bl	8008906 <USBD_CtlError>
                break;
 800812c:	e091      	b.n	8008252 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800812e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008132:	2b00      	cmp	r3, #0
 8008134:	da0b      	bge.n	800814e <USBD_StdEPReq+0x212>
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	3310      	adds	r3, #16
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	4413      	add	r3, r2
 800814a:	3304      	adds	r3, #4
 800814c:	e00b      	b.n	8008166 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4413      	add	r3, r2
 8008164:	3304      	adds	r3, #4
 8008166:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2202      	movs	r2, #2
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fc37 	bl	80089e8 <USBD_CtlSendData>
              break;
 800817a:	e06a      	b.n	8008252 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800817c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	da11      	bge.n	80081a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	f003 020f 	and.w	r2, r3, #15
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	3324      	adds	r3, #36	; 0x24
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d117      	bne.n	80081ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fbb0 	bl	8008906 <USBD_CtlError>
                  break;
 80081a6:	e054      	b.n	8008252 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	f003 020f 	and.w	r2, r3, #15
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fb9d 	bl	8008906 <USBD_CtlError>
                  break;
 80081cc:	e041      	b.n	8008252 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da0b      	bge.n	80081ee <USBD_StdEPReq+0x2b2>
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	3310      	adds	r3, #16
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4413      	add	r3, r2
 80081ea:	3304      	adds	r3, #4
 80081ec:	e00b      	b.n	8008206 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	4413      	add	r3, r2
 8008204:	3304      	adds	r3, #4
 8008206:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <USBD_StdEPReq+0x2d8>
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b80      	cmp	r3, #128	; 0x80
 8008212:	d103      	bne.n	800821c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	e00e      	b.n	800823a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 f897 	bl	8009354 <USBD_LL_IsStallEP>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2201      	movs	r2, #1
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	e002      	b.n	800823a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2202      	movs	r2, #2
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fbd1 	bl	80089e8 <USBD_CtlSendData>
              break;
 8008246:	e004      	b.n	8008252 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fb5b 	bl	8008906 <USBD_CtlError>
              break;
 8008250:	bf00      	nop
          }
          break;
 8008252:	e004      	b.n	800825e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fb55 	bl	8008906 <USBD_CtlError>
          break;
 800825c:	bf00      	nop
      }
      break;
 800825e:	e005      	b.n	800826c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fb4f 	bl	8008906 <USBD_CtlError>
      break;
 8008268:	e000      	b.n	800826c <USBD_StdEPReq+0x330>
      break;
 800826a:	bf00      	nop
  }

  return ret;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	885b      	ldrh	r3, [r3, #2]
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	2b06      	cmp	r3, #6
 800829a:	f200 8128 	bhi.w	80084ee <USBD_GetDescriptor+0x276>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <USBD_GetDescriptor+0x2c>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082c1 	.word	0x080082c1
 80082a8:	080082d9 	.word	0x080082d9
 80082ac:	08008319 	.word	0x08008319
 80082b0:	080084ef 	.word	0x080084ef
 80082b4:	080084ef 	.word	0x080084ef
 80082b8:	0800848f 	.word	0x0800848f
 80082bc:	080084bb 	.word	0x080084bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
      break;
 80082d6:	e112      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7c1b      	ldrb	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10d      	bne.n	80082fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e8:	f107 0208 	add.w	r2, r7, #8
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	2202      	movs	r2, #2
 80082f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082fa:	e100      	b.n	80084fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	f107 0208 	add.w	r2, r7, #8
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
 800830c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	2202      	movs	r2, #2
 8008314:	701a      	strb	r2, [r3, #0]
      break;
 8008316:	e0f2      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b05      	cmp	r3, #5
 8008320:	f200 80ac 	bhi.w	800847c <USBD_GetDescriptor+0x204>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USBD_GetDescriptor+0xb4>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008345 	.word	0x08008345
 8008330:	08008379 	.word	0x08008379
 8008334:	080083ad 	.word	0x080083ad
 8008338:	080083e1 	.word	0x080083e1
 800833c:	08008415 	.word	0x08008415
 8008340:	08008449 	.word	0x08008449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 0108 	add.w	r1, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008366:	e091      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 facb 	bl	8008906 <USBD_CtlError>
            err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
          break;
 8008376:	e089      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7c12      	ldrb	r2, [r2, #16]
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839a:	e077      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fab1 	bl	8008906 <USBD_CtlError>
            err++;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	3301      	adds	r3, #1
 80083a8:	72fb      	strb	r3, [r7, #11]
          break;
 80083aa:	e06f      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	7c12      	ldrb	r2, [r2, #16]
 80083c4:	f107 0108 	add.w	r1, r7, #8
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ce:	e05d      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa97 	bl	8008906 <USBD_CtlError>
            err++;
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	3301      	adds	r3, #1
 80083dc:	72fb      	strb	r3, [r7, #11]
          break;
 80083de:	e055      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7c12      	ldrb	r2, [r2, #16]
 80083f8:	f107 0108 	add.w	r1, r7, #8
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008402:	e043      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa7d 	bl	8008906 <USBD_CtlError>
            err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
          break;
 8008412:	e03b      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	7c12      	ldrb	r2, [r2, #16]
 800842c:	f107 0108 	add.w	r1, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008436:	e029      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa63 	bl	8008906 <USBD_CtlError>
            err++;
 8008440:	7afb      	ldrb	r3, [r7, #11]
 8008442:	3301      	adds	r3, #1
 8008444:	72fb      	strb	r3, [r7, #11]
          break;
 8008446:	e021      	b.n	800848c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	7c12      	ldrb	r2, [r2, #16]
 8008460:	f107 0108 	add.w	r1, r7, #8
 8008464:	4610      	mov	r0, r2
 8008466:	4798      	blx	r3
 8008468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846a:	e00f      	b.n	800848c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fa49 	bl	8008906 <USBD_CtlError>
            err++;
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	3301      	adds	r3, #1
 8008478:	72fb      	strb	r3, [r7, #11]
          break;
 800847a:	e007      	b.n	800848c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa41 	bl	8008906 <USBD_CtlError>
          err++;
 8008484:	7afb      	ldrb	r3, [r7, #11]
 8008486:	3301      	adds	r3, #1
 8008488:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800848a:	bf00      	nop
      }
      break;
 800848c:	e037      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7c1b      	ldrb	r3, [r3, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d109      	bne.n	80084aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	f107 0208 	add.w	r2, r7, #8
 80084a2:	4610      	mov	r0, r2
 80084a4:	4798      	blx	r3
 80084a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a8:	e029      	b.n	80084fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa2a 	bl	8008906 <USBD_CtlError>
        err++;
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	3301      	adds	r3, #1
 80084b6:	72fb      	strb	r3, [r7, #11]
      break;
 80084b8:	e021      	b.n	80084fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7c1b      	ldrb	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10d      	bne.n	80084de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	f107 0208 	add.w	r2, r7, #8
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
 80084d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	2207      	movs	r2, #7
 80084da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084dc:	e00f      	b.n	80084fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fa10 	bl	8008906 <USBD_CtlError>
        err++;
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	3301      	adds	r3, #1
 80084ea:	72fb      	strb	r3, [r7, #11]
      break;
 80084ec:	e007      	b.n	80084fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fa08 	bl	8008906 <USBD_CtlError>
      err++;
 80084f6:	7afb      	ldrb	r3, [r7, #11]
 80084f8:	3301      	adds	r3, #1
 80084fa:	72fb      	strb	r3, [r7, #11]
      break;
 80084fc:	bf00      	nop
  }

  if (err != 0U)
 80084fe:	7afb      	ldrb	r3, [r7, #11]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11e      	bne.n	8008542 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	88db      	ldrh	r3, [r3, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d016      	beq.n	800853a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800850c:	893b      	ldrh	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00e      	beq.n	8008530 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	88da      	ldrh	r2, [r3, #6]
 8008516:	893b      	ldrh	r3, [r7, #8]
 8008518:	4293      	cmp	r3, r2
 800851a:	bf28      	it	cs
 800851c:	4613      	movcs	r3, r2
 800851e:	b29b      	uxth	r3, r3
 8008520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008522:	893b      	ldrh	r3, [r7, #8]
 8008524:	461a      	mov	r2, r3
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fa5d 	bl	80089e8 <USBD_CtlSendData>
 800852e:	e009      	b.n	8008544 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f9e7 	bl	8008906 <USBD_CtlError>
 8008538:	e004      	b.n	8008544 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 faae 	bl	8008a9c <USBD_CtlSendStatus>
 8008540:	e000      	b.n	8008544 <USBD_GetDescriptor+0x2cc>
    return;
 8008542:	bf00      	nop
  }
}
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop

0800854c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d131      	bne.n	80085c2 <USBD_SetAddress+0x76>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	88db      	ldrh	r3, [r3, #6]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d12d      	bne.n	80085c2 <USBD_SetAddress+0x76>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	2b7f      	cmp	r3, #127	; 0x7f
 800856c:	d829      	bhi.n	80085c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b03      	cmp	r3, #3
 8008584:	d104      	bne.n	8008590 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f9bc 	bl	8008906 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858e:	e01d      	b.n	80085cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7bfa      	ldrb	r2, [r7, #15]
 8008594:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 ff05 	bl	80093ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa7a 	bl	8008a9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d004      	beq.n	80085b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	e009      	b.n	80085cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c0:	e004      	b.n	80085cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f99e 	bl	8008906 <USBD_CtlError>
  }
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	885b      	ldrh	r3, [r3, #2]
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	4b4e      	ldr	r3, [pc, #312]	; (8008724 <USBD_SetConfig+0x150>)
 80085ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085ec:	4b4d      	ldr	r3, [pc, #308]	; (8008724 <USBD_SetConfig+0x150>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d905      	bls.n	8008600 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f985 	bl	8008906 <USBD_CtlError>
    return USBD_FAIL;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e08c      	b.n	800871a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d002      	beq.n	8008612 <USBD_SetConfig+0x3e>
 800860c:	2b03      	cmp	r3, #3
 800860e:	d029      	beq.n	8008664 <USBD_SetConfig+0x90>
 8008610:	e075      	b.n	80086fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008612:	4b44      	ldr	r3, [pc, #272]	; (8008724 <USBD_SetConfig+0x150>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d020      	beq.n	800865c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800861a:	4b42      	ldr	r3, [pc, #264]	; (8008724 <USBD_SetConfig+0x150>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008624:	4b3f      	ldr	r3, [pc, #252]	; (8008724 <USBD_SetConfig+0x150>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fe ffe7 	bl	80075fe <USBD_SetClassConfig>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d008      	beq.n	800864c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f962 	bl	8008906 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800864a:	e065      	b.n	8008718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fa25 	bl	8008a9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2203      	movs	r2, #3
 8008656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800865a:	e05d      	b.n	8008718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fa1d 	bl	8008a9c <USBD_CtlSendStatus>
      break;
 8008662:	e059      	b.n	8008718 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008664:	4b2f      	ldr	r3, [pc, #188]	; (8008724 <USBD_SetConfig+0x150>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d112      	bne.n	8008692 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008674:	4b2b      	ldr	r3, [pc, #172]	; (8008724 <USBD_SetConfig+0x150>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800867e:	4b29      	ldr	r3, [pc, #164]	; (8008724 <USBD_SetConfig+0x150>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7fe ffd6 	bl	8007636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa06 	bl	8008a9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008690:	e042      	b.n	8008718 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008692:	4b24      	ldr	r3, [pc, #144]	; (8008724 <USBD_SetConfig+0x150>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	429a      	cmp	r2, r3
 800869e:	d02a      	beq.n	80086f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fe ffc4 	bl	8007636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086ae:	4b1d      	ldr	r3, [pc, #116]	; (8008724 <USBD_SetConfig+0x150>)
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086b8:	4b1a      	ldr	r3, [pc, #104]	; (8008724 <USBD_SetConfig+0x150>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7fe ff9d 	bl	80075fe <USBD_SetClassConfig>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00f      	beq.n	80086ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f918 	bl	8008906 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7fe ffa9 	bl	8007636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086ec:	e014      	b.n	8008718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9d4 	bl	8008a9c <USBD_CtlSendStatus>
      break;
 80086f4:	e010      	b.n	8008718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f9d0 	bl	8008a9c <USBD_CtlSendStatus>
      break;
 80086fc:	e00c      	b.n	8008718 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f900 	bl	8008906 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008706:	4b07      	ldr	r3, [pc, #28]	; (8008724 <USBD_SetConfig+0x150>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7fe ff92 	bl	8007636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008712:	2303      	movs	r3, #3
 8008714:	73fb      	strb	r3, [r7, #15]
      break;
 8008716:	bf00      	nop
  }

  return ret;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000404 	.word	0x20000404

08008728 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	88db      	ldrh	r3, [r3, #6]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d004      	beq.n	8008744 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f8e2 	bl	8008906 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008742:	e023      	b.n	800878c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	dc02      	bgt.n	8008756 <USBD_GetConfig+0x2e>
 8008750:	2b00      	cmp	r3, #0
 8008752:	dc03      	bgt.n	800875c <USBD_GetConfig+0x34>
 8008754:	e015      	b.n	8008782 <USBD_GetConfig+0x5a>
 8008756:	2b03      	cmp	r3, #3
 8008758:	d00b      	beq.n	8008772 <USBD_GetConfig+0x4a>
 800875a:	e012      	b.n	8008782 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3308      	adds	r3, #8
 8008766:	2201      	movs	r2, #1
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f93c 	bl	80089e8 <USBD_CtlSendData>
        break;
 8008770:	e00c      	b.n	800878c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3304      	adds	r3, #4
 8008776:	2201      	movs	r2, #1
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f934 	bl	80089e8 <USBD_CtlSendData>
        break;
 8008780:	e004      	b.n	800878c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f8be 	bl	8008906 <USBD_CtlError>
        break;
 800878a:	bf00      	nop
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d81e      	bhi.n	80087ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	88db      	ldrh	r3, [r3, #6]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d004      	beq.n	80087be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f8a5 	bl	8008906 <USBD_CtlError>
        break;
 80087bc:	e01a      	b.n	80087f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d005      	beq.n	80087da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f043 0202 	orr.w	r2, r3, #2
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	330c      	adds	r3, #12
 80087de:	2202      	movs	r2, #2
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f900 	bl	80089e8 <USBD_CtlSendData>
      break;
 80087e8:	e004      	b.n	80087f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f88a 	bl	8008906 <USBD_CtlError>
      break;
 80087f2:	bf00      	nop
  }
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	885b      	ldrh	r3, [r3, #2]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d107      	bne.n	800881e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f940 	bl	8008a9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800881c:	e013      	b.n	8008846 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	885b      	ldrh	r3, [r3, #2]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d10b      	bne.n	800883e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	889b      	ldrh	r3, [r3, #4]
 800882a:	0a1b      	lsrs	r3, r3, #8
 800882c:	b29b      	uxth	r3, r3
 800882e:	b2da      	uxtb	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f930 	bl	8008a9c <USBD_CtlSendStatus>
}
 800883c:	e003      	b.n	8008846 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f860 	bl	8008906 <USBD_CtlError>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885e:	b2db      	uxtb	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	2b02      	cmp	r3, #2
 8008864:	d80b      	bhi.n	800887e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	885b      	ldrh	r3, [r3, #2]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d10c      	bne.n	8008888 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f910 	bl	8008a9c <USBD_CtlSendStatus>
      }
      break;
 800887c:	e004      	b.n	8008888 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f840 	bl	8008906 <USBD_CtlError>
      break;
 8008886:	e000      	b.n	800888a <USBD_ClrFeature+0x3c>
      break;
 8008888:	bf00      	nop
  }
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	781a      	ldrb	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	781a      	ldrb	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff fa41 	bl	8007d44 <SWAPBYTE>
 80088c2:	4603      	mov	r3, r0
 80088c4:	461a      	mov	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff fa34 	bl	8007d44 <SWAPBYTE>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3301      	adds	r3, #1
 80088ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff fa27 	bl	8007d44 <SWAPBYTE>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461a      	mov	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	80da      	strh	r2, [r3, #6]
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008910:	2180      	movs	r1, #128	; 0x80
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fce0 	bl	80092d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008918:	2100      	movs	r1, #0
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fcdc 	bl	80092d8 <USBD_LL_StallEP>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d036      	beq.n	80089ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008942:	6938      	ldr	r0, [r7, #16]
 8008944:	f000 f836 	bl	80089b4 <USBD_GetLen>
 8008948:	4603      	mov	r3, r0
 800894a:	3301      	adds	r3, #1
 800894c:	b29b      	uxth	r3, r3
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	b29a      	uxth	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	4413      	add	r3, r2
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7812      	ldrb	r2, [r2, #0]
 8008960:	701a      	strb	r2, [r3, #0]
  idx++;
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	3301      	adds	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	4413      	add	r3, r2
 800896e:	2203      	movs	r2, #3
 8008970:	701a      	strb	r2, [r3, #0]
  idx++;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	3301      	adds	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008978:	e013      	b.n	80089a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	4413      	add	r3, r2
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	7812      	ldrb	r2, [r2, #0]
 8008984:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	3301      	adds	r3, #1
 800898a:	613b      	str	r3, [r7, #16]
    idx++;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	3301      	adds	r3, #1
 8008990:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	4413      	add	r3, r2
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]
    idx++;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	3301      	adds	r3, #1
 80089a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e7      	bne.n	800897a <USBD_GetString+0x52>
 80089aa:	e000      	b.n	80089ae <USBD_GetString+0x86>
    return;
 80089ac:	bf00      	nop
  }
}
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089c4:	e005      	b.n	80089d2 <USBD_GetLen+0x1e>
  {
    len++;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	3301      	adds	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3301      	adds	r3, #1
 80089d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f5      	bne.n	80089c6 <USBD_GetLen+0x12>
  }

  return len;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 fceb 	bl	80093ea <USBD_LL_Transmit>

  return USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	2100      	movs	r1, #0
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fcda 	bl	80093ea <USBD_LL_Transmit>

  return USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 fcde 	bl	800942c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 fccd 	bl	800942c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2204      	movs	r2, #4
 8008aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008aac:	2300      	movs	r3, #0
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fc99 	bl	80093ea <USBD_LL_Transmit>

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2205      	movs	r2, #5
 8008ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fca7 	bl	800942c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008aec:	2200      	movs	r2, #0
 8008aee:	4912      	ldr	r1, [pc, #72]	; (8008b38 <MX_USB_DEVICE_Init+0x50>)
 8008af0:	4812      	ldr	r0, [pc, #72]	; (8008b3c <MX_USB_DEVICE_Init+0x54>)
 8008af2:	f7fe fd07 	bl	8007504 <USBD_Init>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008afc:	f7f9 f814 	bl	8001b28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b00:	490f      	ldr	r1, [pc, #60]	; (8008b40 <MX_USB_DEVICE_Init+0x58>)
 8008b02:	480e      	ldr	r0, [pc, #56]	; (8008b3c <MX_USB_DEVICE_Init+0x54>)
 8008b04:	f7fe fd2e 	bl	8007564 <USBD_RegisterClass>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b0e:	f7f9 f80b 	bl	8001b28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b12:	490c      	ldr	r1, [pc, #48]	; (8008b44 <MX_USB_DEVICE_Init+0x5c>)
 8008b14:	4809      	ldr	r0, [pc, #36]	; (8008b3c <MX_USB_DEVICE_Init+0x54>)
 8008b16:	f7fe fc1f 	bl	8007358 <USBD_CDC_RegisterInterface>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b20:	f7f9 f802 	bl	8001b28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b24:	4805      	ldr	r0, [pc, #20]	; (8008b3c <MX_USB_DEVICE_Init+0x54>)
 8008b26:	f7fe fd53 	bl	80075d0 <USBD_Start>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b30:	f7f8 fffa 	bl	8001b28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b34:	bf00      	nop
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	200000ac 	.word	0x200000ac
 8008b3c:	20000408 	.word	0x20000408
 8008b40:	20000018 	.word	0x20000018
 8008b44:	20000098 	.word	0x20000098

08008b48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4905      	ldr	r1, [pc, #20]	; (8008b64 <CDC_Init_FS+0x1c>)
 8008b50:	4805      	ldr	r0, [pc, #20]	; (8008b68 <CDC_Init_FS+0x20>)
 8008b52:	f7fe fc1b 	bl	800738c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b56:	4905      	ldr	r1, [pc, #20]	; (8008b6c <CDC_Init_FS+0x24>)
 8008b58:	4803      	ldr	r0, [pc, #12]	; (8008b68 <CDC_Init_FS+0x20>)
 8008b5a:	f7fe fc39 	bl	80073d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000ee4 	.word	0x20000ee4
 8008b68:	20000408 	.word	0x20000408
 8008b6c:	200006e4 	.word	0x200006e4

08008b70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	6039      	str	r1, [r7, #0]
 8008b8a:	71fb      	strb	r3, [r7, #7]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	2b23      	cmp	r3, #35	; 0x23
 8008b94:	d84a      	bhi.n	8008c2c <CDC_Control_FS+0xac>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <CDC_Control_FS+0x1c>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008c2d 	.word	0x08008c2d
 8008ba0:	08008c2d 	.word	0x08008c2d
 8008ba4:	08008c2d 	.word	0x08008c2d
 8008ba8:	08008c2d 	.word	0x08008c2d
 8008bac:	08008c2d 	.word	0x08008c2d
 8008bb0:	08008c2d 	.word	0x08008c2d
 8008bb4:	08008c2d 	.word	0x08008c2d
 8008bb8:	08008c2d 	.word	0x08008c2d
 8008bbc:	08008c2d 	.word	0x08008c2d
 8008bc0:	08008c2d 	.word	0x08008c2d
 8008bc4:	08008c2d 	.word	0x08008c2d
 8008bc8:	08008c2d 	.word	0x08008c2d
 8008bcc:	08008c2d 	.word	0x08008c2d
 8008bd0:	08008c2d 	.word	0x08008c2d
 8008bd4:	08008c2d 	.word	0x08008c2d
 8008bd8:	08008c2d 	.word	0x08008c2d
 8008bdc:	08008c2d 	.word	0x08008c2d
 8008be0:	08008c2d 	.word	0x08008c2d
 8008be4:	08008c2d 	.word	0x08008c2d
 8008be8:	08008c2d 	.word	0x08008c2d
 8008bec:	08008c2d 	.word	0x08008c2d
 8008bf0:	08008c2d 	.word	0x08008c2d
 8008bf4:	08008c2d 	.word	0x08008c2d
 8008bf8:	08008c2d 	.word	0x08008c2d
 8008bfc:	08008c2d 	.word	0x08008c2d
 8008c00:	08008c2d 	.word	0x08008c2d
 8008c04:	08008c2d 	.word	0x08008c2d
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c2d 	.word	0x08008c2d
 8008c10:	08008c2d 	.word	0x08008c2d
 8008c14:	08008c2d 	.word	0x08008c2d
 8008c18:	08008c2d 	.word	0x08008c2d
 8008c1c:	08008c2d 	.word	0x08008c2d
 8008c20:	08008c2d 	.word	0x08008c2d
 8008c24:	08008c2d 	.word	0x08008c2d
 8008c28:	08008c2d 	.word	0x08008c2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c2c:	bf00      	nop
  }

  return (USBD_OK);
 8008c2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	4805      	ldr	r0, [pc, #20]	; (8008c60 <CDC_Receive_FS+0x24>)
 8008c4a:	f7fe fbc1 	bl	80073d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c4e:	4804      	ldr	r0, [pc, #16]	; (8008c60 <CDC_Receive_FS+0x24>)
 8008c50:	f7fe fc22 	bl	8007498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000408 	.word	0x20000408

08008c64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c74:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <CDC_Transmit_FS+0x48>)
 8008c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e00b      	b.n	8008ca2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c8a:	887b      	ldrh	r3, [r7, #2]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4806      	ldr	r0, [pc, #24]	; (8008cac <CDC_Transmit_FS+0x48>)
 8008c92:	f7fe fb7b 	bl	800738c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c96:	4805      	ldr	r0, [pc, #20]	; (8008cac <CDC_Transmit_FS+0x48>)
 8008c98:	f7fe fbb8 	bl	800740c <USBD_CDC_TransmitPacket>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000408 	.word	0x20000408

08008cb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	6039      	str	r1, [r7, #0]
 8008cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2212      	movs	r2, #18
 8008ce4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	200000c8 	.word	0x200000c8

08008cf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	6039      	str	r1, [r7, #0]
 8008d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2204      	movs	r2, #4
 8008d08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d0a:	4b03      	ldr	r3, [pc, #12]	; (8008d18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	200000dc 	.word	0x200000dc

08008d1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d105      	bne.n	8008d3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	4907      	ldr	r1, [pc, #28]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d32:	4808      	ldr	r0, [pc, #32]	; (8008d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d34:	f7ff fdf8 	bl	8008928 <USBD_GetString>
 8008d38:	e004      	b.n	8008d44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	4904      	ldr	r1, [pc, #16]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d3e:	4805      	ldr	r0, [pc, #20]	; (8008d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d40:	f7ff fdf2 	bl	8008928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	200016e4 	.word	0x200016e4
 8008d54:	0800d10c 	.word	0x0800d10c

08008d58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	4904      	ldr	r1, [pc, #16]	; (8008d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d68:	4804      	ldr	r0, [pc, #16]	; (8008d7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d6a:	f7ff fddd 	bl	8008928 <USBD_GetString>
  return USBD_StrDesc;
 8008d6e:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	200016e4 	.word	0x200016e4
 8008d7c:	0800d124 	.word	0x0800d124

08008d80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	6039      	str	r1, [r7, #0]
 8008d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	221a      	movs	r2, #26
 8008d90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d92:	f000 f843 	bl	8008e1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d96:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	200000e0 	.word	0x200000e0

08008da4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	6039      	str	r1, [r7, #0]
 8008dae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4907      	ldr	r1, [pc, #28]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dba:	4808      	ldr	r0, [pc, #32]	; (8008ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dbc:	f7ff fdb4 	bl	8008928 <USBD_GetString>
 8008dc0:	e004      	b.n	8008dcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	4904      	ldr	r1, [pc, #16]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dc6:	4805      	ldr	r0, [pc, #20]	; (8008ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dc8:	f7ff fdae 	bl	8008928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	; (8008dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	200016e4 	.word	0x200016e4
 8008ddc:	0800d138 	.word	0x0800d138

08008de0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	6039      	str	r1, [r7, #0]
 8008dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d105      	bne.n	8008dfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	4907      	ldr	r1, [pc, #28]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008df6:	4808      	ldr	r0, [pc, #32]	; (8008e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008df8:	f7ff fd96 	bl	8008928 <USBD_GetString>
 8008dfc:	e004      	b.n	8008e08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	4904      	ldr	r1, [pc, #16]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e02:	4805      	ldr	r0, [pc, #20]	; (8008e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e04:	f7ff fd90 	bl	8008928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e08:	4b02      	ldr	r3, [pc, #8]	; (8008e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	200016e4 	.word	0x200016e4
 8008e18:	0800d144 	.word	0x0800d144

08008e1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e22:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <Get_SerialNum+0x44>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e28:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <Get_SerialNum+0x48>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e2e:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <Get_SerialNum+0x4c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e42:	2208      	movs	r2, #8
 8008e44:	4909      	ldr	r1, [pc, #36]	; (8008e6c <Get_SerialNum+0x50>)
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f814 	bl	8008e74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	4908      	ldr	r1, [pc, #32]	; (8008e70 <Get_SerialNum+0x54>)
 8008e50:	68b8      	ldr	r0, [r7, #8]
 8008e52:	f000 f80f 	bl	8008e74 <IntToUnicode>
  }
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	1fff7a10 	.word	0x1fff7a10
 8008e64:	1fff7a14 	.word	0x1fff7a14
 8008e68:	1fff7a18 	.word	0x1fff7a18
 8008e6c:	200000e2 	.word	0x200000e2
 8008e70:	200000f2 	.word	0x200000f2

08008e74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e86:	2300      	movs	r3, #0
 8008e88:	75fb      	strb	r3, [r7, #23]
 8008e8a:	e027      	b.n	8008edc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0f1b      	lsrs	r3, r3, #28
 8008e90:	2b09      	cmp	r3, #9
 8008e92:	d80b      	bhi.n	8008eac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	0f1b      	lsrs	r3, r3, #28
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	440b      	add	r3, r1
 8008ea4:	3230      	adds	r2, #48	; 0x30
 8008ea6:	b2d2      	uxtb	r2, r2
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e00a      	b.n	8008ec2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	0f1b      	lsrs	r3, r3, #28
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	440b      	add	r3, r1
 8008ebc:	3237      	adds	r2, #55	; 0x37
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	011b      	lsls	r3, r3, #4
 8008ec6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	3301      	adds	r3, #1
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
 8008edc:	7dfa      	ldrb	r2, [r7, #23]
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d3d3      	bcc.n	8008e8c <IntToUnicode+0x18>
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
	...

08008ef4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	605a      	str	r2, [r3, #4]
 8008f06:	609a      	str	r2, [r3, #8]
 8008f08:	60da      	str	r2, [r3, #12]
 8008f0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f14:	d13a      	bne.n	8008f8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f16:	2300      	movs	r3, #0
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	4b1e      	ldr	r3, [pc, #120]	; (8008f94 <HAL_PCD_MspInit+0xa0>)
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	4a1d      	ldr	r2, [pc, #116]	; (8008f94 <HAL_PCD_MspInit+0xa0>)
 8008f20:	f043 0301 	orr.w	r3, r3, #1
 8008f24:	6313      	str	r3, [r2, #48]	; 0x30
 8008f26:	4b1b      	ldr	r3, [pc, #108]	; (8008f94 <HAL_PCD_MspInit+0xa0>)
 8008f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	613b      	str	r3, [r7, #16]
 8008f30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f40:	2303      	movs	r3, #3
 8008f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f44:	230a      	movs	r3, #10
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4812      	ldr	r0, [pc, #72]	; (8008f98 <HAL_PCD_MspInit+0xa4>)
 8008f50:	f7f9 f93e 	bl	80021d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f54:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <HAL_PCD_MspInit+0xa0>)
 8008f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f58:	4a0e      	ldr	r2, [pc, #56]	; (8008f94 <HAL_PCD_MspInit+0xa0>)
 8008f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5e:	6353      	str	r3, [r2, #52]	; 0x34
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <HAL_PCD_MspInit+0xa0>)
 8008f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f68:	4a0a      	ldr	r2, [pc, #40]	; (8008f94 <HAL_PCD_MspInit+0xa0>)
 8008f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8008f70:	4b08      	ldr	r3, [pc, #32]	; (8008f94 <HAL_PCD_MspInit+0xa0>)
 8008f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2100      	movs	r1, #0
 8008f80:	2043      	movs	r0, #67	; 0x43
 8008f82:	f7f9 f8ee 	bl	8002162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f86:	2043      	movs	r0, #67	; 0x43
 8008f88:	f7f9 f907 	bl	800219a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f8c:	bf00      	nop
 8008f8e:	3728      	adds	r7, #40	; 0x28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	40023800 	.word	0x40023800
 8008f98:	40020000 	.word	0x40020000

08008f9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	f7fe fb59 	bl	800766a <USBD_LL_SetupStage>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	00db      	lsls	r3, r3, #3
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	f7fe fb93 	bl	8007714 <USBD_LL_DataOutStage>
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009008:	78fa      	ldrb	r2, [r7, #3]
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	4613      	mov	r3, r2
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	334c      	adds	r3, #76	; 0x4c
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	78fb      	ldrb	r3, [r7, #3]
 800901c:	4619      	mov	r1, r3
 800901e:	f7fe fc2c 	bl	800787a <USBD_LL_DataInStage>
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe fd60 	bl	8007afe <USBD_LL_SOF>
}
 800903e:	bf00      	nop
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800904e:	2301      	movs	r3, #1
 8009050:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d102      	bne.n	8009060 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
 800905e:	e008      	b.n	8009072 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d102      	bne.n	800906e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009068:	2301      	movs	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]
 800906c:	e001      	b.n	8009072 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800906e:	f7f8 fd5b 	bl	8001b28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009078:	7bfa      	ldrb	r2, [r7, #15]
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fd00 	bl	8007a82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fca8 	bl	80079de <USBD_LL_Reset>
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fcfb 	bl	8007aa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090be:	f043 0301 	orr.w	r3, r3, #1
 80090c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090cc:	4b04      	ldr	r3, [pc, #16]	; (80090e0 <HAL_PCD_SuspendCallback+0x48>)
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	4a03      	ldr	r2, [pc, #12]	; (80090e0 <HAL_PCD_SuspendCallback+0x48>)
 80090d2:	f043 0306 	orr.w	r3, r3, #6
 80090d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	e000ed00 	.word	0xe000ed00

080090e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fceb 	bl	8007ace <USBD_LL_Resume>
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe fd43 	bl	8007ba2 <USBD_LL_IsoOUTIncomplete>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	4611      	mov	r1, r2
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fcff 	bl	8007b3e <USBD_LL_IsoINIncomplete>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fd55 	bl	8007c06 <USBD_LL_DevConnected>
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fd52 	bl	8007c1c <USBD_LL_DevDisconnected>
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d13c      	bne.n	800920a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009190:	4a20      	ldr	r2, [pc, #128]	; (8009214 <USBD_LL_Init+0x94>)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a1e      	ldr	r2, [pc, #120]	; (8009214 <USBD_LL_Init+0x94>)
 800919c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091a0:	4b1c      	ldr	r3, [pc, #112]	; (8009214 <USBD_LL_Init+0x94>)
 80091a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80091a8:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <USBD_LL_Init+0x94>)
 80091aa:	2204      	movs	r2, #4
 80091ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091ae:	4b19      	ldr	r3, [pc, #100]	; (8009214 <USBD_LL_Init+0x94>)
 80091b0:	2202      	movs	r2, #2
 80091b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091b4:	4b17      	ldr	r3, [pc, #92]	; (8009214 <USBD_LL_Init+0x94>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091ba:	4b16      	ldr	r3, [pc, #88]	; (8009214 <USBD_LL_Init+0x94>)
 80091bc:	2202      	movs	r2, #2
 80091be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091c0:	4b14      	ldr	r3, [pc, #80]	; (8009214 <USBD_LL_Init+0x94>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091c6:	4b13      	ldr	r3, [pc, #76]	; (8009214 <USBD_LL_Init+0x94>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091cc:	4b11      	ldr	r3, [pc, #68]	; (8009214 <USBD_LL_Init+0x94>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80091d2:	4b10      	ldr	r3, [pc, #64]	; (8009214 <USBD_LL_Init+0x94>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091d8:	4b0e      	ldr	r3, [pc, #56]	; (8009214 <USBD_LL_Init+0x94>)
 80091da:	2200      	movs	r2, #0
 80091dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091de:	480d      	ldr	r0, [pc, #52]	; (8009214 <USBD_LL_Init+0x94>)
 80091e0:	f7fa f96b 	bl	80034ba <HAL_PCD_Init>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091ea:	f7f8 fc9d 	bl	8001b28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091ee:	2180      	movs	r1, #128	; 0x80
 80091f0:	4808      	ldr	r0, [pc, #32]	; (8009214 <USBD_LL_Init+0x94>)
 80091f2:	f7fb fbc2 	bl	800497a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091f6:	2240      	movs	r2, #64	; 0x40
 80091f8:	2100      	movs	r1, #0
 80091fa:	4806      	ldr	r0, [pc, #24]	; (8009214 <USBD_LL_Init+0x94>)
 80091fc:	f7fb fb76 	bl	80048ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009200:	2280      	movs	r2, #128	; 0x80
 8009202:	2101      	movs	r1, #1
 8009204:	4803      	ldr	r0, [pc, #12]	; (8009214 <USBD_LL_Init+0x94>)
 8009206:	f7fb fb71 	bl	80048ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	200018e4 	.word	0x200018e4

08009218 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800922e:	4618      	mov	r0, r3
 8009230:	f7fa fa60 	bl	80036f4 <HAL_PCD_Start>
 8009234:	4603      	mov	r3, r0
 8009236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	4618      	mov	r0, r3
 800923c:	f000 f942 	bl	80094c4 <USBD_Get_USB_Status>
 8009240:	4603      	mov	r3, r0
 8009242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009244:	7bbb      	ldrb	r3, [r7, #14]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	4608      	mov	r0, r1
 8009258:	4611      	mov	r1, r2
 800925a:	461a      	mov	r2, r3
 800925c:	4603      	mov	r3, r0
 800925e:	70fb      	strb	r3, [r7, #3]
 8009260:	460b      	mov	r3, r1
 8009262:	70bb      	strb	r3, [r7, #2]
 8009264:	4613      	mov	r3, r2
 8009266:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009276:	78bb      	ldrb	r3, [r7, #2]
 8009278:	883a      	ldrh	r2, [r7, #0]
 800927a:	78f9      	ldrb	r1, [r7, #3]
 800927c:	f7fa ff31 	bl	80040e2 <HAL_PCD_EP_Open>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	4618      	mov	r0, r3
 8009288:	f000 f91c 	bl	80094c4 <USBD_Get_USB_Status>
 800928c:	4603      	mov	r3, r0
 800928e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009290:	7bbb      	ldrb	r3, [r7, #14]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092b4:	78fa      	ldrb	r2, [r7, #3]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fa ff7a 	bl	80041b2 <HAL_PCD_EP_Close>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 f8fd 	bl	80094c4 <USBD_Get_USB_Status>
 80092ca:	4603      	mov	r3, r0
 80092cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092f2:	78fa      	ldrb	r2, [r7, #3]
 80092f4:	4611      	mov	r1, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fb f852 	bl	80043a0 <HAL_PCD_EP_SetStall>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	4618      	mov	r0, r3
 8009304:	f000 f8de 	bl	80094c4 <USBD_Get_USB_Status>
 8009308:	4603      	mov	r3, r0
 800930a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800930c:	7bbb      	ldrb	r3, [r7, #14]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	460b      	mov	r3, r1
 8009320:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009330:	78fa      	ldrb	r2, [r7, #3]
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f7fb f897 	bl	8004468 <HAL_PCD_EP_ClrStall>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	4618      	mov	r0, r3
 8009342:	f000 f8bf 	bl	80094c4 <USBD_Get_USB_Status>
 8009346:	4603      	mov	r3, r0
 8009348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800934a:	7bbb      	ldrb	r3, [r7, #14]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009366:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800936c:	2b00      	cmp	r3, #0
 800936e:	da0b      	bge.n	8009388 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	4613      	mov	r3, r2
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	333e      	adds	r3, #62	; 0x3e
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	e00b      	b.n	80093a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	4613      	mov	r3, r2
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800939e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093c6:	78fa      	ldrb	r2, [r7, #3]
 80093c8:	4611      	mov	r1, r2
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fa fe64 	bl	8004098 <HAL_PCD_SetAddress>
 80093d0:	4603      	mov	r3, r0
 80093d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f874 	bl	80094c4 <USBD_Get_USB_Status>
 80093dc:	4603      	mov	r3, r0
 80093de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b086      	sub	sp, #24
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
 80093f6:	460b      	mov	r3, r1
 80093f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009408:	7af9      	ldrb	r1, [r7, #11]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	f7fa ff7d 	bl	800430c <HAL_PCD_EP_Transmit>
 8009412:	4603      	mov	r3, r0
 8009414:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f853 	bl	80094c4 <USBD_Get_USB_Status>
 800941e:	4603      	mov	r3, r0
 8009420:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009422:	7dbb      	ldrb	r3, [r7, #22]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	607a      	str	r2, [r7, #4]
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	460b      	mov	r3, r1
 800943a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800944a:	7af9      	ldrb	r1, [r7, #11]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	f7fa fef9 	bl	8004246 <HAL_PCD_EP_Receive>
 8009454:	4603      	mov	r3, r0
 8009456:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f832 	bl	80094c4 <USBD_Get_USB_Status>
 8009460:	4603      	mov	r3, r0
 8009462:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009464:	7dbb      	ldrb	r3, [r7, #22]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b082      	sub	sp, #8
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009480:	78fa      	ldrb	r2, [r7, #3]
 8009482:	4611      	mov	r1, r2
 8009484:	4618      	mov	r0, r3
 8009486:	f7fa ff29 	bl	80042dc <HAL_PCD_EP_GetRxCount>
 800948a:	4603      	mov	r3, r0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800949c:	4b03      	ldr	r3, [pc, #12]	; (80094ac <USBD_static_malloc+0x18>)
}
 800949e:	4618      	mov	r0, r3
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20001df0 	.word	0x20001df0

080094b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]

}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d817      	bhi.n	8009508 <USBD_Get_USB_Status+0x44>
 80094d8:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <USBD_Get_USB_Status+0x1c>)
 80094da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094de:	bf00      	nop
 80094e0:	080094f1 	.word	0x080094f1
 80094e4:	080094f7 	.word	0x080094f7
 80094e8:	080094fd 	.word	0x080094fd
 80094ec:	08009503 	.word	0x08009503
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]
    break;
 80094f4:	e00b      	b.n	800950e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094f6:	2303      	movs	r3, #3
 80094f8:	73fb      	strb	r3, [r7, #15]
    break;
 80094fa:	e008      	b.n	800950e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009500:	e005      	b.n	800950e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009502:	2303      	movs	r3, #3
 8009504:	73fb      	strb	r3, [r7, #15]
    break;
 8009506:	e002      	b.n	800950e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009508:	2303      	movs	r3, #3
 800950a:	73fb      	strb	r3, [r7, #15]
    break;
 800950c:	bf00      	nop
  }
  return usb_status;
 800950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <__cvt>:
 800951c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	ec55 4b10 	vmov	r4, r5, d0
 8009524:	2d00      	cmp	r5, #0
 8009526:	460e      	mov	r6, r1
 8009528:	4619      	mov	r1, r3
 800952a:	462b      	mov	r3, r5
 800952c:	bfbb      	ittet	lt
 800952e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009532:	461d      	movlt	r5, r3
 8009534:	2300      	movge	r3, #0
 8009536:	232d      	movlt	r3, #45	; 0x2d
 8009538:	700b      	strb	r3, [r1, #0]
 800953a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800953c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009540:	4691      	mov	r9, r2
 8009542:	f023 0820 	bic.w	r8, r3, #32
 8009546:	bfbc      	itt	lt
 8009548:	4622      	movlt	r2, r4
 800954a:	4614      	movlt	r4, r2
 800954c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009550:	d005      	beq.n	800955e <__cvt+0x42>
 8009552:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009556:	d100      	bne.n	800955a <__cvt+0x3e>
 8009558:	3601      	adds	r6, #1
 800955a:	2102      	movs	r1, #2
 800955c:	e000      	b.n	8009560 <__cvt+0x44>
 800955e:	2103      	movs	r1, #3
 8009560:	ab03      	add	r3, sp, #12
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	ab02      	add	r3, sp, #8
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	ec45 4b10 	vmov	d0, r4, r5
 800956c:	4653      	mov	r3, sl
 800956e:	4632      	mov	r2, r6
 8009570:	f000 fe7e 	bl	800a270 <_dtoa_r>
 8009574:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009578:	4607      	mov	r7, r0
 800957a:	d102      	bne.n	8009582 <__cvt+0x66>
 800957c:	f019 0f01 	tst.w	r9, #1
 8009580:	d022      	beq.n	80095c8 <__cvt+0xac>
 8009582:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009586:	eb07 0906 	add.w	r9, r7, r6
 800958a:	d110      	bne.n	80095ae <__cvt+0x92>
 800958c:	783b      	ldrb	r3, [r7, #0]
 800958e:	2b30      	cmp	r3, #48	; 0x30
 8009590:	d10a      	bne.n	80095a8 <__cvt+0x8c>
 8009592:	2200      	movs	r2, #0
 8009594:	2300      	movs	r3, #0
 8009596:	4620      	mov	r0, r4
 8009598:	4629      	mov	r1, r5
 800959a:	f7f7 fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800959e:	b918      	cbnz	r0, 80095a8 <__cvt+0x8c>
 80095a0:	f1c6 0601 	rsb	r6, r6, #1
 80095a4:	f8ca 6000 	str.w	r6, [sl]
 80095a8:	f8da 3000 	ldr.w	r3, [sl]
 80095ac:	4499      	add	r9, r3
 80095ae:	2200      	movs	r2, #0
 80095b0:	2300      	movs	r3, #0
 80095b2:	4620      	mov	r0, r4
 80095b4:	4629      	mov	r1, r5
 80095b6:	f7f7 fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 80095ba:	b108      	cbz	r0, 80095c0 <__cvt+0xa4>
 80095bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80095c0:	2230      	movs	r2, #48	; 0x30
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	454b      	cmp	r3, r9
 80095c6:	d307      	bcc.n	80095d8 <__cvt+0xbc>
 80095c8:	9b03      	ldr	r3, [sp, #12]
 80095ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095cc:	1bdb      	subs	r3, r3, r7
 80095ce:	4638      	mov	r0, r7
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	b004      	add	sp, #16
 80095d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d8:	1c59      	adds	r1, r3, #1
 80095da:	9103      	str	r1, [sp, #12]
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	e7f0      	b.n	80095c2 <__cvt+0xa6>

080095e0 <__exponent>:
 80095e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095e2:	4603      	mov	r3, r0
 80095e4:	2900      	cmp	r1, #0
 80095e6:	bfb8      	it	lt
 80095e8:	4249      	neglt	r1, r1
 80095ea:	f803 2b02 	strb.w	r2, [r3], #2
 80095ee:	bfb4      	ite	lt
 80095f0:	222d      	movlt	r2, #45	; 0x2d
 80095f2:	222b      	movge	r2, #43	; 0x2b
 80095f4:	2909      	cmp	r1, #9
 80095f6:	7042      	strb	r2, [r0, #1]
 80095f8:	dd2a      	ble.n	8009650 <__exponent+0x70>
 80095fa:	f10d 0207 	add.w	r2, sp, #7
 80095fe:	4617      	mov	r7, r2
 8009600:	260a      	movs	r6, #10
 8009602:	4694      	mov	ip, r2
 8009604:	fb91 f5f6 	sdiv	r5, r1, r6
 8009608:	fb06 1415 	mls	r4, r6, r5, r1
 800960c:	3430      	adds	r4, #48	; 0x30
 800960e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009612:	460c      	mov	r4, r1
 8009614:	2c63      	cmp	r4, #99	; 0x63
 8009616:	f102 32ff 	add.w	r2, r2, #4294967295
 800961a:	4629      	mov	r1, r5
 800961c:	dcf1      	bgt.n	8009602 <__exponent+0x22>
 800961e:	3130      	adds	r1, #48	; 0x30
 8009620:	f1ac 0402 	sub.w	r4, ip, #2
 8009624:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009628:	1c41      	adds	r1, r0, #1
 800962a:	4622      	mov	r2, r4
 800962c:	42ba      	cmp	r2, r7
 800962e:	d30a      	bcc.n	8009646 <__exponent+0x66>
 8009630:	f10d 0209 	add.w	r2, sp, #9
 8009634:	eba2 020c 	sub.w	r2, r2, ip
 8009638:	42bc      	cmp	r4, r7
 800963a:	bf88      	it	hi
 800963c:	2200      	movhi	r2, #0
 800963e:	4413      	add	r3, r2
 8009640:	1a18      	subs	r0, r3, r0
 8009642:	b003      	add	sp, #12
 8009644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009646:	f812 5b01 	ldrb.w	r5, [r2], #1
 800964a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800964e:	e7ed      	b.n	800962c <__exponent+0x4c>
 8009650:	2330      	movs	r3, #48	; 0x30
 8009652:	3130      	adds	r1, #48	; 0x30
 8009654:	7083      	strb	r3, [r0, #2]
 8009656:	70c1      	strb	r1, [r0, #3]
 8009658:	1d03      	adds	r3, r0, #4
 800965a:	e7f1      	b.n	8009640 <__exponent+0x60>

0800965c <_printf_float>:
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	ed2d 8b02 	vpush	{d8}
 8009664:	b08d      	sub	sp, #52	; 0x34
 8009666:	460c      	mov	r4, r1
 8009668:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800966c:	4616      	mov	r6, r2
 800966e:	461f      	mov	r7, r3
 8009670:	4605      	mov	r5, r0
 8009672:	f000 fcfb 	bl	800a06c <_localeconv_r>
 8009676:	f8d0 a000 	ldr.w	sl, [r0]
 800967a:	4650      	mov	r0, sl
 800967c:	f7f6 fdf8 	bl	8000270 <strlen>
 8009680:	2300      	movs	r3, #0
 8009682:	930a      	str	r3, [sp, #40]	; 0x28
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	9305      	str	r3, [sp, #20]
 8009688:	f8d8 3000 	ldr.w	r3, [r8]
 800968c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009690:	3307      	adds	r3, #7
 8009692:	f023 0307 	bic.w	r3, r3, #7
 8009696:	f103 0208 	add.w	r2, r3, #8
 800969a:	f8c8 2000 	str.w	r2, [r8]
 800969e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096a6:	9307      	str	r3, [sp, #28]
 80096a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80096ac:	ee08 0a10 	vmov	s16, r0
 80096b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80096b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096b8:	4b9e      	ldr	r3, [pc, #632]	; (8009934 <_printf_float+0x2d8>)
 80096ba:	f04f 32ff 	mov.w	r2, #4294967295
 80096be:	f7f7 fa35 	bl	8000b2c <__aeabi_dcmpun>
 80096c2:	bb88      	cbnz	r0, 8009728 <_printf_float+0xcc>
 80096c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096c8:	4b9a      	ldr	r3, [pc, #616]	; (8009934 <_printf_float+0x2d8>)
 80096ca:	f04f 32ff 	mov.w	r2, #4294967295
 80096ce:	f7f7 fa0f 	bl	8000af0 <__aeabi_dcmple>
 80096d2:	bb48      	cbnz	r0, 8009728 <_printf_float+0xcc>
 80096d4:	2200      	movs	r2, #0
 80096d6:	2300      	movs	r3, #0
 80096d8:	4640      	mov	r0, r8
 80096da:	4649      	mov	r1, r9
 80096dc:	f7f7 f9fe 	bl	8000adc <__aeabi_dcmplt>
 80096e0:	b110      	cbz	r0, 80096e8 <_printf_float+0x8c>
 80096e2:	232d      	movs	r3, #45	; 0x2d
 80096e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e8:	4a93      	ldr	r2, [pc, #588]	; (8009938 <_printf_float+0x2dc>)
 80096ea:	4b94      	ldr	r3, [pc, #592]	; (800993c <_printf_float+0x2e0>)
 80096ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096f0:	bf94      	ite	ls
 80096f2:	4690      	movls	r8, r2
 80096f4:	4698      	movhi	r8, r3
 80096f6:	2303      	movs	r3, #3
 80096f8:	6123      	str	r3, [r4, #16]
 80096fa:	9b05      	ldr	r3, [sp, #20]
 80096fc:	f023 0304 	bic.w	r3, r3, #4
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	f04f 0900 	mov.w	r9, #0
 8009706:	9700      	str	r7, [sp, #0]
 8009708:	4633      	mov	r3, r6
 800970a:	aa0b      	add	r2, sp, #44	; 0x2c
 800970c:	4621      	mov	r1, r4
 800970e:	4628      	mov	r0, r5
 8009710:	f000 f9da 	bl	8009ac8 <_printf_common>
 8009714:	3001      	adds	r0, #1
 8009716:	f040 8090 	bne.w	800983a <_printf_float+0x1de>
 800971a:	f04f 30ff 	mov.w	r0, #4294967295
 800971e:	b00d      	add	sp, #52	; 0x34
 8009720:	ecbd 8b02 	vpop	{d8}
 8009724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009728:	4642      	mov	r2, r8
 800972a:	464b      	mov	r3, r9
 800972c:	4640      	mov	r0, r8
 800972e:	4649      	mov	r1, r9
 8009730:	f7f7 f9fc 	bl	8000b2c <__aeabi_dcmpun>
 8009734:	b140      	cbz	r0, 8009748 <_printf_float+0xec>
 8009736:	464b      	mov	r3, r9
 8009738:	2b00      	cmp	r3, #0
 800973a:	bfbc      	itt	lt
 800973c:	232d      	movlt	r3, #45	; 0x2d
 800973e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009742:	4a7f      	ldr	r2, [pc, #508]	; (8009940 <_printf_float+0x2e4>)
 8009744:	4b7f      	ldr	r3, [pc, #508]	; (8009944 <_printf_float+0x2e8>)
 8009746:	e7d1      	b.n	80096ec <_printf_float+0x90>
 8009748:	6863      	ldr	r3, [r4, #4]
 800974a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800974e:	9206      	str	r2, [sp, #24]
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	d13f      	bne.n	80097d4 <_printf_float+0x178>
 8009754:	2306      	movs	r3, #6
 8009756:	6063      	str	r3, [r4, #4]
 8009758:	9b05      	ldr	r3, [sp, #20]
 800975a:	6861      	ldr	r1, [r4, #4]
 800975c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009760:	2300      	movs	r3, #0
 8009762:	9303      	str	r3, [sp, #12]
 8009764:	ab0a      	add	r3, sp, #40	; 0x28
 8009766:	e9cd b301 	strd	fp, r3, [sp, #4]
 800976a:	ab09      	add	r3, sp, #36	; 0x24
 800976c:	ec49 8b10 	vmov	d0, r8, r9
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	6022      	str	r2, [r4, #0]
 8009774:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009778:	4628      	mov	r0, r5
 800977a:	f7ff fecf 	bl	800951c <__cvt>
 800977e:	9b06      	ldr	r3, [sp, #24]
 8009780:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009782:	2b47      	cmp	r3, #71	; 0x47
 8009784:	4680      	mov	r8, r0
 8009786:	d108      	bne.n	800979a <_printf_float+0x13e>
 8009788:	1cc8      	adds	r0, r1, #3
 800978a:	db02      	blt.n	8009792 <_printf_float+0x136>
 800978c:	6863      	ldr	r3, [r4, #4]
 800978e:	4299      	cmp	r1, r3
 8009790:	dd41      	ble.n	8009816 <_printf_float+0x1ba>
 8009792:	f1ab 0302 	sub.w	r3, fp, #2
 8009796:	fa5f fb83 	uxtb.w	fp, r3
 800979a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800979e:	d820      	bhi.n	80097e2 <_printf_float+0x186>
 80097a0:	3901      	subs	r1, #1
 80097a2:	465a      	mov	r2, fp
 80097a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097a8:	9109      	str	r1, [sp, #36]	; 0x24
 80097aa:	f7ff ff19 	bl	80095e0 <__exponent>
 80097ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097b0:	1813      	adds	r3, r2, r0
 80097b2:	2a01      	cmp	r2, #1
 80097b4:	4681      	mov	r9, r0
 80097b6:	6123      	str	r3, [r4, #16]
 80097b8:	dc02      	bgt.n	80097c0 <_printf_float+0x164>
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	07d2      	lsls	r2, r2, #31
 80097be:	d501      	bpl.n	80097c4 <_printf_float+0x168>
 80097c0:	3301      	adds	r3, #1
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d09c      	beq.n	8009706 <_printf_float+0xaa>
 80097cc:	232d      	movs	r3, #45	; 0x2d
 80097ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d2:	e798      	b.n	8009706 <_printf_float+0xaa>
 80097d4:	9a06      	ldr	r2, [sp, #24]
 80097d6:	2a47      	cmp	r2, #71	; 0x47
 80097d8:	d1be      	bne.n	8009758 <_printf_float+0xfc>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1bc      	bne.n	8009758 <_printf_float+0xfc>
 80097de:	2301      	movs	r3, #1
 80097e0:	e7b9      	b.n	8009756 <_printf_float+0xfa>
 80097e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097e6:	d118      	bne.n	800981a <_printf_float+0x1be>
 80097e8:	2900      	cmp	r1, #0
 80097ea:	6863      	ldr	r3, [r4, #4]
 80097ec:	dd0b      	ble.n	8009806 <_printf_float+0x1aa>
 80097ee:	6121      	str	r1, [r4, #16]
 80097f0:	b913      	cbnz	r3, 80097f8 <_printf_float+0x19c>
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	07d0      	lsls	r0, r2, #31
 80097f6:	d502      	bpl.n	80097fe <_printf_float+0x1a2>
 80097f8:	3301      	adds	r3, #1
 80097fa:	440b      	add	r3, r1
 80097fc:	6123      	str	r3, [r4, #16]
 80097fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8009800:	f04f 0900 	mov.w	r9, #0
 8009804:	e7de      	b.n	80097c4 <_printf_float+0x168>
 8009806:	b913      	cbnz	r3, 800980e <_printf_float+0x1b2>
 8009808:	6822      	ldr	r2, [r4, #0]
 800980a:	07d2      	lsls	r2, r2, #31
 800980c:	d501      	bpl.n	8009812 <_printf_float+0x1b6>
 800980e:	3302      	adds	r3, #2
 8009810:	e7f4      	b.n	80097fc <_printf_float+0x1a0>
 8009812:	2301      	movs	r3, #1
 8009814:	e7f2      	b.n	80097fc <_printf_float+0x1a0>
 8009816:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800981a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800981c:	4299      	cmp	r1, r3
 800981e:	db05      	blt.n	800982c <_printf_float+0x1d0>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	6121      	str	r1, [r4, #16]
 8009824:	07d8      	lsls	r0, r3, #31
 8009826:	d5ea      	bpl.n	80097fe <_printf_float+0x1a2>
 8009828:	1c4b      	adds	r3, r1, #1
 800982a:	e7e7      	b.n	80097fc <_printf_float+0x1a0>
 800982c:	2900      	cmp	r1, #0
 800982e:	bfd4      	ite	le
 8009830:	f1c1 0202 	rsble	r2, r1, #2
 8009834:	2201      	movgt	r2, #1
 8009836:	4413      	add	r3, r2
 8009838:	e7e0      	b.n	80097fc <_printf_float+0x1a0>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	055a      	lsls	r2, r3, #21
 800983e:	d407      	bmi.n	8009850 <_printf_float+0x1f4>
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	4642      	mov	r2, r8
 8009844:	4631      	mov	r1, r6
 8009846:	4628      	mov	r0, r5
 8009848:	47b8      	blx	r7
 800984a:	3001      	adds	r0, #1
 800984c:	d12c      	bne.n	80098a8 <_printf_float+0x24c>
 800984e:	e764      	b.n	800971a <_printf_float+0xbe>
 8009850:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009854:	f240 80e0 	bls.w	8009a18 <_printf_float+0x3bc>
 8009858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	f7f7 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8009864:	2800      	cmp	r0, #0
 8009866:	d034      	beq.n	80098d2 <_printf_float+0x276>
 8009868:	4a37      	ldr	r2, [pc, #220]	; (8009948 <_printf_float+0x2ec>)
 800986a:	2301      	movs	r3, #1
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	f43f af51 	beq.w	800971a <_printf_float+0xbe>
 8009878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800987c:	429a      	cmp	r2, r3
 800987e:	db02      	blt.n	8009886 <_printf_float+0x22a>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	07d8      	lsls	r0, r3, #31
 8009884:	d510      	bpl.n	80098a8 <_printf_float+0x24c>
 8009886:	ee18 3a10 	vmov	r3, s16
 800988a:	4652      	mov	r2, sl
 800988c:	4631      	mov	r1, r6
 800988e:	4628      	mov	r0, r5
 8009890:	47b8      	blx	r7
 8009892:	3001      	adds	r0, #1
 8009894:	f43f af41 	beq.w	800971a <_printf_float+0xbe>
 8009898:	f04f 0800 	mov.w	r8, #0
 800989c:	f104 091a 	add.w	r9, r4, #26
 80098a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098a2:	3b01      	subs	r3, #1
 80098a4:	4543      	cmp	r3, r8
 80098a6:	dc09      	bgt.n	80098bc <_printf_float+0x260>
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	079b      	lsls	r3, r3, #30
 80098ac:	f100 8107 	bmi.w	8009abe <_printf_float+0x462>
 80098b0:	68e0      	ldr	r0, [r4, #12]
 80098b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098b4:	4298      	cmp	r0, r3
 80098b6:	bfb8      	it	lt
 80098b8:	4618      	movlt	r0, r3
 80098ba:	e730      	b.n	800971e <_printf_float+0xc2>
 80098bc:	2301      	movs	r3, #1
 80098be:	464a      	mov	r2, r9
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f af27 	beq.w	800971a <_printf_float+0xbe>
 80098cc:	f108 0801 	add.w	r8, r8, #1
 80098d0:	e7e6      	b.n	80098a0 <_printf_float+0x244>
 80098d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dc39      	bgt.n	800994c <_printf_float+0x2f0>
 80098d8:	4a1b      	ldr	r2, [pc, #108]	; (8009948 <_printf_float+0x2ec>)
 80098da:	2301      	movs	r3, #1
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	f43f af19 	beq.w	800971a <_printf_float+0xbe>
 80098e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80098ec:	4313      	orrs	r3, r2
 80098ee:	d102      	bne.n	80098f6 <_printf_float+0x29a>
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	07d9      	lsls	r1, r3, #31
 80098f4:	d5d8      	bpl.n	80098a8 <_printf_float+0x24c>
 80098f6:	ee18 3a10 	vmov	r3, s16
 80098fa:	4652      	mov	r2, sl
 80098fc:	4631      	mov	r1, r6
 80098fe:	4628      	mov	r0, r5
 8009900:	47b8      	blx	r7
 8009902:	3001      	adds	r0, #1
 8009904:	f43f af09 	beq.w	800971a <_printf_float+0xbe>
 8009908:	f04f 0900 	mov.w	r9, #0
 800990c:	f104 0a1a 	add.w	sl, r4, #26
 8009910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009912:	425b      	negs	r3, r3
 8009914:	454b      	cmp	r3, r9
 8009916:	dc01      	bgt.n	800991c <_printf_float+0x2c0>
 8009918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991a:	e792      	b.n	8009842 <_printf_float+0x1e6>
 800991c:	2301      	movs	r3, #1
 800991e:	4652      	mov	r2, sl
 8009920:	4631      	mov	r1, r6
 8009922:	4628      	mov	r0, r5
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	f43f aef7 	beq.w	800971a <_printf_float+0xbe>
 800992c:	f109 0901 	add.w	r9, r9, #1
 8009930:	e7ee      	b.n	8009910 <_printf_float+0x2b4>
 8009932:	bf00      	nop
 8009934:	7fefffff 	.word	0x7fefffff
 8009938:	0800d16c 	.word	0x0800d16c
 800993c:	0800d170 	.word	0x0800d170
 8009940:	0800d174 	.word	0x0800d174
 8009944:	0800d178 	.word	0x0800d178
 8009948:	0800d17c 	.word	0x0800d17c
 800994c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800994e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009950:	429a      	cmp	r2, r3
 8009952:	bfa8      	it	ge
 8009954:	461a      	movge	r2, r3
 8009956:	2a00      	cmp	r2, #0
 8009958:	4691      	mov	r9, r2
 800995a:	dc37      	bgt.n	80099cc <_printf_float+0x370>
 800995c:	f04f 0b00 	mov.w	fp, #0
 8009960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009964:	f104 021a 	add.w	r2, r4, #26
 8009968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	eba3 0309 	sub.w	r3, r3, r9
 8009970:	455b      	cmp	r3, fp
 8009972:	dc33      	bgt.n	80099dc <_printf_float+0x380>
 8009974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009978:	429a      	cmp	r2, r3
 800997a:	db3b      	blt.n	80099f4 <_printf_float+0x398>
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	07da      	lsls	r2, r3, #31
 8009980:	d438      	bmi.n	80099f4 <_printf_float+0x398>
 8009982:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009986:	eba2 0903 	sub.w	r9, r2, r3
 800998a:	9b05      	ldr	r3, [sp, #20]
 800998c:	1ad2      	subs	r2, r2, r3
 800998e:	4591      	cmp	r9, r2
 8009990:	bfa8      	it	ge
 8009992:	4691      	movge	r9, r2
 8009994:	f1b9 0f00 	cmp.w	r9, #0
 8009998:	dc35      	bgt.n	8009a06 <_printf_float+0x3aa>
 800999a:	f04f 0800 	mov.w	r8, #0
 800999e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099a2:	f104 0a1a 	add.w	sl, r4, #26
 80099a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	eba3 0309 	sub.w	r3, r3, r9
 80099b0:	4543      	cmp	r3, r8
 80099b2:	f77f af79 	ble.w	80098a8 <_printf_float+0x24c>
 80099b6:	2301      	movs	r3, #1
 80099b8:	4652      	mov	r2, sl
 80099ba:	4631      	mov	r1, r6
 80099bc:	4628      	mov	r0, r5
 80099be:	47b8      	blx	r7
 80099c0:	3001      	adds	r0, #1
 80099c2:	f43f aeaa 	beq.w	800971a <_printf_float+0xbe>
 80099c6:	f108 0801 	add.w	r8, r8, #1
 80099ca:	e7ec      	b.n	80099a6 <_printf_float+0x34a>
 80099cc:	4613      	mov	r3, r2
 80099ce:	4631      	mov	r1, r6
 80099d0:	4642      	mov	r2, r8
 80099d2:	4628      	mov	r0, r5
 80099d4:	47b8      	blx	r7
 80099d6:	3001      	adds	r0, #1
 80099d8:	d1c0      	bne.n	800995c <_printf_float+0x300>
 80099da:	e69e      	b.n	800971a <_printf_float+0xbe>
 80099dc:	2301      	movs	r3, #1
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	9205      	str	r2, [sp, #20]
 80099e4:	47b8      	blx	r7
 80099e6:	3001      	adds	r0, #1
 80099e8:	f43f ae97 	beq.w	800971a <_printf_float+0xbe>
 80099ec:	9a05      	ldr	r2, [sp, #20]
 80099ee:	f10b 0b01 	add.w	fp, fp, #1
 80099f2:	e7b9      	b.n	8009968 <_printf_float+0x30c>
 80099f4:	ee18 3a10 	vmov	r3, s16
 80099f8:	4652      	mov	r2, sl
 80099fa:	4631      	mov	r1, r6
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	d1be      	bne.n	8009982 <_printf_float+0x326>
 8009a04:	e689      	b.n	800971a <_printf_float+0xbe>
 8009a06:	9a05      	ldr	r2, [sp, #20]
 8009a08:	464b      	mov	r3, r9
 8009a0a:	4442      	add	r2, r8
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b8      	blx	r7
 8009a12:	3001      	adds	r0, #1
 8009a14:	d1c1      	bne.n	800999a <_printf_float+0x33e>
 8009a16:	e680      	b.n	800971a <_printf_float+0xbe>
 8009a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a1a:	2a01      	cmp	r2, #1
 8009a1c:	dc01      	bgt.n	8009a22 <_printf_float+0x3c6>
 8009a1e:	07db      	lsls	r3, r3, #31
 8009a20:	d53a      	bpl.n	8009a98 <_printf_float+0x43c>
 8009a22:	2301      	movs	r3, #1
 8009a24:	4642      	mov	r2, r8
 8009a26:	4631      	mov	r1, r6
 8009a28:	4628      	mov	r0, r5
 8009a2a:	47b8      	blx	r7
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	f43f ae74 	beq.w	800971a <_printf_float+0xbe>
 8009a32:	ee18 3a10 	vmov	r3, s16
 8009a36:	4652      	mov	r2, sl
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f ae6b 	beq.w	800971a <_printf_float+0xbe>
 8009a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a48:	2200      	movs	r2, #0
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009a50:	f7f7 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a54:	b9d8      	cbnz	r0, 8009a8e <_printf_float+0x432>
 8009a56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a5a:	f108 0201 	add.w	r2, r8, #1
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	d10e      	bne.n	8009a86 <_printf_float+0x42a>
 8009a68:	e657      	b.n	800971a <_printf_float+0xbe>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f ae50 	beq.w	800971a <_printf_float+0xbe>
 8009a7a:	f108 0801 	add.w	r8, r8, #1
 8009a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a80:	3b01      	subs	r3, #1
 8009a82:	4543      	cmp	r3, r8
 8009a84:	dcf1      	bgt.n	8009a6a <_printf_float+0x40e>
 8009a86:	464b      	mov	r3, r9
 8009a88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a8c:	e6da      	b.n	8009844 <_printf_float+0x1e8>
 8009a8e:	f04f 0800 	mov.w	r8, #0
 8009a92:	f104 0a1a 	add.w	sl, r4, #26
 8009a96:	e7f2      	b.n	8009a7e <_printf_float+0x422>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	4642      	mov	r2, r8
 8009a9c:	e7df      	b.n	8009a5e <_printf_float+0x402>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	464a      	mov	r2, r9
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	47b8      	blx	r7
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	f43f ae36 	beq.w	800971a <_printf_float+0xbe>
 8009aae:	f108 0801 	add.w	r8, r8, #1
 8009ab2:	68e3      	ldr	r3, [r4, #12]
 8009ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ab6:	1a5b      	subs	r3, r3, r1
 8009ab8:	4543      	cmp	r3, r8
 8009aba:	dcf0      	bgt.n	8009a9e <_printf_float+0x442>
 8009abc:	e6f8      	b.n	80098b0 <_printf_float+0x254>
 8009abe:	f04f 0800 	mov.w	r8, #0
 8009ac2:	f104 0919 	add.w	r9, r4, #25
 8009ac6:	e7f4      	b.n	8009ab2 <_printf_float+0x456>

08009ac8 <_printf_common>:
 8009ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	4616      	mov	r6, r2
 8009ace:	4699      	mov	r9, r3
 8009ad0:	688a      	ldr	r2, [r1, #8]
 8009ad2:	690b      	ldr	r3, [r1, #16]
 8009ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	bfb8      	it	lt
 8009adc:	4613      	movlt	r3, r2
 8009ade:	6033      	str	r3, [r6, #0]
 8009ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	b10a      	cbz	r2, 8009aee <_printf_common+0x26>
 8009aea:	3301      	adds	r3, #1
 8009aec:	6033      	str	r3, [r6, #0]
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	0699      	lsls	r1, r3, #26
 8009af2:	bf42      	ittt	mi
 8009af4:	6833      	ldrmi	r3, [r6, #0]
 8009af6:	3302      	addmi	r3, #2
 8009af8:	6033      	strmi	r3, [r6, #0]
 8009afa:	6825      	ldr	r5, [r4, #0]
 8009afc:	f015 0506 	ands.w	r5, r5, #6
 8009b00:	d106      	bne.n	8009b10 <_printf_common+0x48>
 8009b02:	f104 0a19 	add.w	sl, r4, #25
 8009b06:	68e3      	ldr	r3, [r4, #12]
 8009b08:	6832      	ldr	r2, [r6, #0]
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	42ab      	cmp	r3, r5
 8009b0e:	dc26      	bgt.n	8009b5e <_printf_common+0x96>
 8009b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b14:	1e13      	subs	r3, r2, #0
 8009b16:	6822      	ldr	r2, [r4, #0]
 8009b18:	bf18      	it	ne
 8009b1a:	2301      	movne	r3, #1
 8009b1c:	0692      	lsls	r2, r2, #26
 8009b1e:	d42b      	bmi.n	8009b78 <_printf_common+0xb0>
 8009b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b24:	4649      	mov	r1, r9
 8009b26:	4638      	mov	r0, r7
 8009b28:	47c0      	blx	r8
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	d01e      	beq.n	8009b6c <_printf_common+0xa4>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	6922      	ldr	r2, [r4, #16]
 8009b32:	f003 0306 	and.w	r3, r3, #6
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	bf02      	ittt	eq
 8009b3a:	68e5      	ldreq	r5, [r4, #12]
 8009b3c:	6833      	ldreq	r3, [r6, #0]
 8009b3e:	1aed      	subeq	r5, r5, r3
 8009b40:	68a3      	ldr	r3, [r4, #8]
 8009b42:	bf0c      	ite	eq
 8009b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b48:	2500      	movne	r5, #0
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	bfc4      	itt	gt
 8009b4e:	1a9b      	subgt	r3, r3, r2
 8009b50:	18ed      	addgt	r5, r5, r3
 8009b52:	2600      	movs	r6, #0
 8009b54:	341a      	adds	r4, #26
 8009b56:	42b5      	cmp	r5, r6
 8009b58:	d11a      	bne.n	8009b90 <_printf_common+0xc8>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e008      	b.n	8009b70 <_printf_common+0xa8>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4652      	mov	r2, sl
 8009b62:	4649      	mov	r1, r9
 8009b64:	4638      	mov	r0, r7
 8009b66:	47c0      	blx	r8
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d103      	bne.n	8009b74 <_printf_common+0xac>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b74:	3501      	adds	r5, #1
 8009b76:	e7c6      	b.n	8009b06 <_printf_common+0x3e>
 8009b78:	18e1      	adds	r1, r4, r3
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	2030      	movs	r0, #48	; 0x30
 8009b7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b82:	4422      	add	r2, r4
 8009b84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	e7c7      	b.n	8009b20 <_printf_common+0x58>
 8009b90:	2301      	movs	r3, #1
 8009b92:	4622      	mov	r2, r4
 8009b94:	4649      	mov	r1, r9
 8009b96:	4638      	mov	r0, r7
 8009b98:	47c0      	blx	r8
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d0e6      	beq.n	8009b6c <_printf_common+0xa4>
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7d9      	b.n	8009b56 <_printf_common+0x8e>
	...

08009ba4 <_printf_i>:
 8009ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	7e0f      	ldrb	r7, [r1, #24]
 8009baa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bac:	2f78      	cmp	r7, #120	; 0x78
 8009bae:	4691      	mov	r9, r2
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	469a      	mov	sl, r3
 8009bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bba:	d807      	bhi.n	8009bcc <_printf_i+0x28>
 8009bbc:	2f62      	cmp	r7, #98	; 0x62
 8009bbe:	d80a      	bhi.n	8009bd6 <_printf_i+0x32>
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	f000 80d4 	beq.w	8009d6e <_printf_i+0x1ca>
 8009bc6:	2f58      	cmp	r7, #88	; 0x58
 8009bc8:	f000 80c0 	beq.w	8009d4c <_printf_i+0x1a8>
 8009bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd4:	e03a      	b.n	8009c4c <_printf_i+0xa8>
 8009bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bda:	2b15      	cmp	r3, #21
 8009bdc:	d8f6      	bhi.n	8009bcc <_printf_i+0x28>
 8009bde:	a101      	add	r1, pc, #4	; (adr r1, 8009be4 <_printf_i+0x40>)
 8009be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009be4:	08009c3d 	.word	0x08009c3d
 8009be8:	08009c51 	.word	0x08009c51
 8009bec:	08009bcd 	.word	0x08009bcd
 8009bf0:	08009bcd 	.word	0x08009bcd
 8009bf4:	08009bcd 	.word	0x08009bcd
 8009bf8:	08009bcd 	.word	0x08009bcd
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009bcd 	.word	0x08009bcd
 8009c04:	08009bcd 	.word	0x08009bcd
 8009c08:	08009bcd 	.word	0x08009bcd
 8009c0c:	08009bcd 	.word	0x08009bcd
 8009c10:	08009d55 	.word	0x08009d55
 8009c14:	08009c7d 	.word	0x08009c7d
 8009c18:	08009d0f 	.word	0x08009d0f
 8009c1c:	08009bcd 	.word	0x08009bcd
 8009c20:	08009bcd 	.word	0x08009bcd
 8009c24:	08009d77 	.word	0x08009d77
 8009c28:	08009bcd 	.word	0x08009bcd
 8009c2c:	08009c7d 	.word	0x08009c7d
 8009c30:	08009bcd 	.word	0x08009bcd
 8009c34:	08009bcd 	.word	0x08009bcd
 8009c38:	08009d17 	.word	0x08009d17
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	602a      	str	r2, [r5, #0]
 8009c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e09f      	b.n	8009d90 <_printf_i+0x1ec>
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	682b      	ldr	r3, [r5, #0]
 8009c54:	0607      	lsls	r7, r0, #24
 8009c56:	f103 0104 	add.w	r1, r3, #4
 8009c5a:	6029      	str	r1, [r5, #0]
 8009c5c:	d501      	bpl.n	8009c62 <_printf_i+0xbe>
 8009c5e:	681e      	ldr	r6, [r3, #0]
 8009c60:	e003      	b.n	8009c6a <_printf_i+0xc6>
 8009c62:	0646      	lsls	r6, r0, #25
 8009c64:	d5fb      	bpl.n	8009c5e <_printf_i+0xba>
 8009c66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c6a:	2e00      	cmp	r6, #0
 8009c6c:	da03      	bge.n	8009c76 <_printf_i+0xd2>
 8009c6e:	232d      	movs	r3, #45	; 0x2d
 8009c70:	4276      	negs	r6, r6
 8009c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c76:	485a      	ldr	r0, [pc, #360]	; (8009de0 <_printf_i+0x23c>)
 8009c78:	230a      	movs	r3, #10
 8009c7a:	e012      	b.n	8009ca2 <_printf_i+0xfe>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	1d19      	adds	r1, r3, #4
 8009c82:	6029      	str	r1, [r5, #0]
 8009c84:	0605      	lsls	r5, r0, #24
 8009c86:	d501      	bpl.n	8009c8c <_printf_i+0xe8>
 8009c88:	681e      	ldr	r6, [r3, #0]
 8009c8a:	e002      	b.n	8009c92 <_printf_i+0xee>
 8009c8c:	0641      	lsls	r1, r0, #25
 8009c8e:	d5fb      	bpl.n	8009c88 <_printf_i+0xe4>
 8009c90:	881e      	ldrh	r6, [r3, #0]
 8009c92:	4853      	ldr	r0, [pc, #332]	; (8009de0 <_printf_i+0x23c>)
 8009c94:	2f6f      	cmp	r7, #111	; 0x6f
 8009c96:	bf0c      	ite	eq
 8009c98:	2308      	moveq	r3, #8
 8009c9a:	230a      	movne	r3, #10
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca2:	6865      	ldr	r5, [r4, #4]
 8009ca4:	60a5      	str	r5, [r4, #8]
 8009ca6:	2d00      	cmp	r5, #0
 8009ca8:	bfa2      	ittt	ge
 8009caa:	6821      	ldrge	r1, [r4, #0]
 8009cac:	f021 0104 	bicge.w	r1, r1, #4
 8009cb0:	6021      	strge	r1, [r4, #0]
 8009cb2:	b90e      	cbnz	r6, 8009cb8 <_printf_i+0x114>
 8009cb4:	2d00      	cmp	r5, #0
 8009cb6:	d04b      	beq.n	8009d50 <_printf_i+0x1ac>
 8009cb8:	4615      	mov	r5, r2
 8009cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8009cc2:	5dc7      	ldrb	r7, [r0, r7]
 8009cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cc8:	4637      	mov	r7, r6
 8009cca:	42bb      	cmp	r3, r7
 8009ccc:	460e      	mov	r6, r1
 8009cce:	d9f4      	bls.n	8009cba <_printf_i+0x116>
 8009cd0:	2b08      	cmp	r3, #8
 8009cd2:	d10b      	bne.n	8009cec <_printf_i+0x148>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	07de      	lsls	r6, r3, #31
 8009cd8:	d508      	bpl.n	8009cec <_printf_i+0x148>
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	6861      	ldr	r1, [r4, #4]
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	bfde      	ittt	le
 8009ce2:	2330      	movle	r3, #48	; 0x30
 8009ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cec:	1b52      	subs	r2, r2, r5
 8009cee:	6122      	str	r2, [r4, #16]
 8009cf0:	f8cd a000 	str.w	sl, [sp]
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	aa03      	add	r2, sp, #12
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7ff fee4 	bl	8009ac8 <_printf_common>
 8009d00:	3001      	adds	r0, #1
 8009d02:	d14a      	bne.n	8009d9a <_printf_i+0x1f6>
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	b004      	add	sp, #16
 8009d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	f043 0320 	orr.w	r3, r3, #32
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	4833      	ldr	r0, [pc, #204]	; (8009de4 <_printf_i+0x240>)
 8009d18:	2778      	movs	r7, #120	; 0x78
 8009d1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	6829      	ldr	r1, [r5, #0]
 8009d22:	061f      	lsls	r7, r3, #24
 8009d24:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d28:	d402      	bmi.n	8009d30 <_printf_i+0x18c>
 8009d2a:	065f      	lsls	r7, r3, #25
 8009d2c:	bf48      	it	mi
 8009d2e:	b2b6      	uxthmi	r6, r6
 8009d30:	07df      	lsls	r7, r3, #31
 8009d32:	bf48      	it	mi
 8009d34:	f043 0320 	orrmi.w	r3, r3, #32
 8009d38:	6029      	str	r1, [r5, #0]
 8009d3a:	bf48      	it	mi
 8009d3c:	6023      	strmi	r3, [r4, #0]
 8009d3e:	b91e      	cbnz	r6, 8009d48 <_printf_i+0x1a4>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	f023 0320 	bic.w	r3, r3, #32
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	2310      	movs	r3, #16
 8009d4a:	e7a7      	b.n	8009c9c <_printf_i+0xf8>
 8009d4c:	4824      	ldr	r0, [pc, #144]	; (8009de0 <_printf_i+0x23c>)
 8009d4e:	e7e4      	b.n	8009d1a <_printf_i+0x176>
 8009d50:	4615      	mov	r5, r2
 8009d52:	e7bd      	b.n	8009cd0 <_printf_i+0x12c>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	6826      	ldr	r6, [r4, #0]
 8009d58:	6961      	ldr	r1, [r4, #20]
 8009d5a:	1d18      	adds	r0, r3, #4
 8009d5c:	6028      	str	r0, [r5, #0]
 8009d5e:	0635      	lsls	r5, r6, #24
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	d501      	bpl.n	8009d68 <_printf_i+0x1c4>
 8009d64:	6019      	str	r1, [r3, #0]
 8009d66:	e002      	b.n	8009d6e <_printf_i+0x1ca>
 8009d68:	0670      	lsls	r0, r6, #25
 8009d6a:	d5fb      	bpl.n	8009d64 <_printf_i+0x1c0>
 8009d6c:	8019      	strh	r1, [r3, #0]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	6123      	str	r3, [r4, #16]
 8009d72:	4615      	mov	r5, r2
 8009d74:	e7bc      	b.n	8009cf0 <_printf_i+0x14c>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	1d1a      	adds	r2, r3, #4
 8009d7a:	602a      	str	r2, [r5, #0]
 8009d7c:	681d      	ldr	r5, [r3, #0]
 8009d7e:	6862      	ldr	r2, [r4, #4]
 8009d80:	2100      	movs	r1, #0
 8009d82:	4628      	mov	r0, r5
 8009d84:	f7f6 fa24 	bl	80001d0 <memchr>
 8009d88:	b108      	cbz	r0, 8009d8e <_printf_i+0x1ea>
 8009d8a:	1b40      	subs	r0, r0, r5
 8009d8c:	6060      	str	r0, [r4, #4]
 8009d8e:	6863      	ldr	r3, [r4, #4]
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	2300      	movs	r3, #0
 8009d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d98:	e7aa      	b.n	8009cf0 <_printf_i+0x14c>
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	462a      	mov	r2, r5
 8009d9e:	4649      	mov	r1, r9
 8009da0:	4640      	mov	r0, r8
 8009da2:	47d0      	blx	sl
 8009da4:	3001      	adds	r0, #1
 8009da6:	d0ad      	beq.n	8009d04 <_printf_i+0x160>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	079b      	lsls	r3, r3, #30
 8009dac:	d413      	bmi.n	8009dd6 <_printf_i+0x232>
 8009dae:	68e0      	ldr	r0, [r4, #12]
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	4298      	cmp	r0, r3
 8009db4:	bfb8      	it	lt
 8009db6:	4618      	movlt	r0, r3
 8009db8:	e7a6      	b.n	8009d08 <_printf_i+0x164>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	4640      	mov	r0, r8
 8009dc2:	47d0      	blx	sl
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d09d      	beq.n	8009d04 <_printf_i+0x160>
 8009dc8:	3501      	adds	r5, #1
 8009dca:	68e3      	ldr	r3, [r4, #12]
 8009dcc:	9903      	ldr	r1, [sp, #12]
 8009dce:	1a5b      	subs	r3, r3, r1
 8009dd0:	42ab      	cmp	r3, r5
 8009dd2:	dcf2      	bgt.n	8009dba <_printf_i+0x216>
 8009dd4:	e7eb      	b.n	8009dae <_printf_i+0x20a>
 8009dd6:	2500      	movs	r5, #0
 8009dd8:	f104 0619 	add.w	r6, r4, #25
 8009ddc:	e7f5      	b.n	8009dca <_printf_i+0x226>
 8009dde:	bf00      	nop
 8009de0:	0800d17e 	.word	0x0800d17e
 8009de4:	0800d18f 	.word	0x0800d18f

08009de8 <std>:
 8009de8:	2300      	movs	r3, #0
 8009dea:	b510      	push	{r4, lr}
 8009dec:	4604      	mov	r4, r0
 8009dee:	e9c0 3300 	strd	r3, r3, [r0]
 8009df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009df6:	6083      	str	r3, [r0, #8]
 8009df8:	8181      	strh	r1, [r0, #12]
 8009dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8009dfc:	81c2      	strh	r2, [r0, #14]
 8009dfe:	6183      	str	r3, [r0, #24]
 8009e00:	4619      	mov	r1, r3
 8009e02:	2208      	movs	r2, #8
 8009e04:	305c      	adds	r0, #92	; 0x5c
 8009e06:	f000 f928 	bl	800a05a <memset>
 8009e0a:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <std+0x58>)
 8009e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e0e:	4b0d      	ldr	r3, [pc, #52]	; (8009e44 <std+0x5c>)
 8009e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e12:	4b0d      	ldr	r3, [pc, #52]	; (8009e48 <std+0x60>)
 8009e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e16:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <std+0x64>)
 8009e18:	6323      	str	r3, [r4, #48]	; 0x30
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	; (8009e50 <std+0x68>)
 8009e1c:	6224      	str	r4, [r4, #32]
 8009e1e:	429c      	cmp	r4, r3
 8009e20:	d006      	beq.n	8009e30 <std+0x48>
 8009e22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009e26:	4294      	cmp	r4, r2
 8009e28:	d002      	beq.n	8009e30 <std+0x48>
 8009e2a:	33d0      	adds	r3, #208	; 0xd0
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d105      	bne.n	8009e3c <std+0x54>
 8009e30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e38:	f000 b98c 	b.w	800a154 <__retarget_lock_init_recursive>
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	bf00      	nop
 8009e40:	08009fd5 	.word	0x08009fd5
 8009e44:	08009ff7 	.word	0x08009ff7
 8009e48:	0800a02f 	.word	0x0800a02f
 8009e4c:	0800a053 	.word	0x0800a053
 8009e50:	20002010 	.word	0x20002010

08009e54 <stdio_exit_handler>:
 8009e54:	4a02      	ldr	r2, [pc, #8]	; (8009e60 <stdio_exit_handler+0xc>)
 8009e56:	4903      	ldr	r1, [pc, #12]	; (8009e64 <stdio_exit_handler+0x10>)
 8009e58:	4803      	ldr	r0, [pc, #12]	; (8009e68 <stdio_exit_handler+0x14>)
 8009e5a:	f000 b869 	b.w	8009f30 <_fwalk_sglue>
 8009e5e:	bf00      	nop
 8009e60:	200000fc 	.word	0x200000fc
 8009e64:	0800bb09 	.word	0x0800bb09
 8009e68:	20000108 	.word	0x20000108

08009e6c <cleanup_stdio>:
 8009e6c:	6841      	ldr	r1, [r0, #4]
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <cleanup_stdio+0x34>)
 8009e70:	4299      	cmp	r1, r3
 8009e72:	b510      	push	{r4, lr}
 8009e74:	4604      	mov	r4, r0
 8009e76:	d001      	beq.n	8009e7c <cleanup_stdio+0x10>
 8009e78:	f001 fe46 	bl	800bb08 <_fflush_r>
 8009e7c:	68a1      	ldr	r1, [r4, #8]
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <cleanup_stdio+0x38>)
 8009e80:	4299      	cmp	r1, r3
 8009e82:	d002      	beq.n	8009e8a <cleanup_stdio+0x1e>
 8009e84:	4620      	mov	r0, r4
 8009e86:	f001 fe3f 	bl	800bb08 <_fflush_r>
 8009e8a:	68e1      	ldr	r1, [r4, #12]
 8009e8c:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <cleanup_stdio+0x3c>)
 8009e8e:	4299      	cmp	r1, r3
 8009e90:	d004      	beq.n	8009e9c <cleanup_stdio+0x30>
 8009e92:	4620      	mov	r0, r4
 8009e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e98:	f001 be36 	b.w	800bb08 <_fflush_r>
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20002010 	.word	0x20002010
 8009ea4:	20002078 	.word	0x20002078
 8009ea8:	200020e0 	.word	0x200020e0

08009eac <global_stdio_init.part.0>:
 8009eac:	b510      	push	{r4, lr}
 8009eae:	4b0b      	ldr	r3, [pc, #44]	; (8009edc <global_stdio_init.part.0+0x30>)
 8009eb0:	4c0b      	ldr	r4, [pc, #44]	; (8009ee0 <global_stdio_init.part.0+0x34>)
 8009eb2:	4a0c      	ldr	r2, [pc, #48]	; (8009ee4 <global_stdio_init.part.0+0x38>)
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2104      	movs	r1, #4
 8009ebc:	f7ff ff94 	bl	8009de8 <std>
 8009ec0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	2109      	movs	r1, #9
 8009ec8:	f7ff ff8e 	bl	8009de8 <std>
 8009ecc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ed6:	2112      	movs	r1, #18
 8009ed8:	f7ff bf86 	b.w	8009de8 <std>
 8009edc:	20002148 	.word	0x20002148
 8009ee0:	20002010 	.word	0x20002010
 8009ee4:	08009e55 	.word	0x08009e55

08009ee8 <__sfp_lock_acquire>:
 8009ee8:	4801      	ldr	r0, [pc, #4]	; (8009ef0 <__sfp_lock_acquire+0x8>)
 8009eea:	f000 b934 	b.w	800a156 <__retarget_lock_acquire_recursive>
 8009eee:	bf00      	nop
 8009ef0:	20002151 	.word	0x20002151

08009ef4 <__sfp_lock_release>:
 8009ef4:	4801      	ldr	r0, [pc, #4]	; (8009efc <__sfp_lock_release+0x8>)
 8009ef6:	f000 b92f 	b.w	800a158 <__retarget_lock_release_recursive>
 8009efa:	bf00      	nop
 8009efc:	20002151 	.word	0x20002151

08009f00 <__sinit>:
 8009f00:	b510      	push	{r4, lr}
 8009f02:	4604      	mov	r4, r0
 8009f04:	f7ff fff0 	bl	8009ee8 <__sfp_lock_acquire>
 8009f08:	6a23      	ldr	r3, [r4, #32]
 8009f0a:	b11b      	cbz	r3, 8009f14 <__sinit+0x14>
 8009f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f10:	f7ff bff0 	b.w	8009ef4 <__sfp_lock_release>
 8009f14:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <__sinit+0x28>)
 8009f16:	6223      	str	r3, [r4, #32]
 8009f18:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <__sinit+0x2c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1f5      	bne.n	8009f0c <__sinit+0xc>
 8009f20:	f7ff ffc4 	bl	8009eac <global_stdio_init.part.0>
 8009f24:	e7f2      	b.n	8009f0c <__sinit+0xc>
 8009f26:	bf00      	nop
 8009f28:	08009e6d 	.word	0x08009e6d
 8009f2c:	20002148 	.word	0x20002148

08009f30 <_fwalk_sglue>:
 8009f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f34:	4607      	mov	r7, r0
 8009f36:	4688      	mov	r8, r1
 8009f38:	4614      	mov	r4, r2
 8009f3a:	2600      	movs	r6, #0
 8009f3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f40:	f1b9 0901 	subs.w	r9, r9, #1
 8009f44:	d505      	bpl.n	8009f52 <_fwalk_sglue+0x22>
 8009f46:	6824      	ldr	r4, [r4, #0]
 8009f48:	2c00      	cmp	r4, #0
 8009f4a:	d1f7      	bne.n	8009f3c <_fwalk_sglue+0xc>
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d907      	bls.n	8009f68 <_fwalk_sglue+0x38>
 8009f58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	d003      	beq.n	8009f68 <_fwalk_sglue+0x38>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4638      	mov	r0, r7
 8009f64:	47c0      	blx	r8
 8009f66:	4306      	orrs	r6, r0
 8009f68:	3568      	adds	r5, #104	; 0x68
 8009f6a:	e7e9      	b.n	8009f40 <_fwalk_sglue+0x10>

08009f6c <sniprintf>:
 8009f6c:	b40c      	push	{r2, r3}
 8009f6e:	b530      	push	{r4, r5, lr}
 8009f70:	4b17      	ldr	r3, [pc, #92]	; (8009fd0 <sniprintf+0x64>)
 8009f72:	1e0c      	subs	r4, r1, #0
 8009f74:	681d      	ldr	r5, [r3, #0]
 8009f76:	b09d      	sub	sp, #116	; 0x74
 8009f78:	da08      	bge.n	8009f8c <sniprintf+0x20>
 8009f7a:	238b      	movs	r3, #139	; 0x8b
 8009f7c:	602b      	str	r3, [r5, #0]
 8009f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f82:	b01d      	add	sp, #116	; 0x74
 8009f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f88:	b002      	add	sp, #8
 8009f8a:	4770      	bx	lr
 8009f8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009f90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f94:	bf14      	ite	ne
 8009f96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f9a:	4623      	moveq	r3, r4
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	9307      	str	r3, [sp, #28]
 8009fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fa4:	9002      	str	r0, [sp, #8]
 8009fa6:	9006      	str	r0, [sp, #24]
 8009fa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009fac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fae:	ab21      	add	r3, sp, #132	; 0x84
 8009fb0:	a902      	add	r1, sp, #8
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	f001 fc23 	bl	800b800 <_svfiprintf_r>
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	bfbc      	itt	lt
 8009fbe:	238b      	movlt	r3, #139	; 0x8b
 8009fc0:	602b      	strlt	r3, [r5, #0]
 8009fc2:	2c00      	cmp	r4, #0
 8009fc4:	d0dd      	beq.n	8009f82 <sniprintf+0x16>
 8009fc6:	9b02      	ldr	r3, [sp, #8]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	701a      	strb	r2, [r3, #0]
 8009fcc:	e7d9      	b.n	8009f82 <sniprintf+0x16>
 8009fce:	bf00      	nop
 8009fd0:	20000154 	.word	0x20000154

08009fd4 <__sread>:
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fdc:	f000 f86c 	bl	800a0b8 <_read_r>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	bfab      	itete	ge
 8009fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8009fe8:	181b      	addge	r3, r3, r0
 8009fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fee:	bfac      	ite	ge
 8009ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ff2:	81a3      	strhlt	r3, [r4, #12]
 8009ff4:	bd10      	pop	{r4, pc}

08009ff6 <__swrite>:
 8009ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffa:	461f      	mov	r7, r3
 8009ffc:	898b      	ldrh	r3, [r1, #12]
 8009ffe:	05db      	lsls	r3, r3, #23
 800a000:	4605      	mov	r5, r0
 800a002:	460c      	mov	r4, r1
 800a004:	4616      	mov	r6, r2
 800a006:	d505      	bpl.n	800a014 <__swrite+0x1e>
 800a008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a00c:	2302      	movs	r3, #2
 800a00e:	2200      	movs	r2, #0
 800a010:	f000 f840 	bl	800a094 <_lseek_r>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a01a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	4632      	mov	r2, r6
 800a022:	463b      	mov	r3, r7
 800a024:	4628      	mov	r0, r5
 800a026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a02a:	f000 b857 	b.w	800a0dc <_write_r>

0800a02e <__sseek>:
 800a02e:	b510      	push	{r4, lr}
 800a030:	460c      	mov	r4, r1
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	f000 f82d 	bl	800a094 <_lseek_r>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	bf15      	itete	ne
 800a040:	6560      	strne	r0, [r4, #84]	; 0x54
 800a042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a04a:	81a3      	strheq	r3, [r4, #12]
 800a04c:	bf18      	it	ne
 800a04e:	81a3      	strhne	r3, [r4, #12]
 800a050:	bd10      	pop	{r4, pc}

0800a052 <__sclose>:
 800a052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a056:	f000 b80d 	b.w	800a074 <_close_r>

0800a05a <memset>:
 800a05a:	4402      	add	r2, r0
 800a05c:	4603      	mov	r3, r0
 800a05e:	4293      	cmp	r3, r2
 800a060:	d100      	bne.n	800a064 <memset+0xa>
 800a062:	4770      	bx	lr
 800a064:	f803 1b01 	strb.w	r1, [r3], #1
 800a068:	e7f9      	b.n	800a05e <memset+0x4>
	...

0800a06c <_localeconv_r>:
 800a06c:	4800      	ldr	r0, [pc, #0]	; (800a070 <_localeconv_r+0x4>)
 800a06e:	4770      	bx	lr
 800a070:	20000248 	.word	0x20000248

0800a074 <_close_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d06      	ldr	r5, [pc, #24]	; (800a090 <_close_r+0x1c>)
 800a078:	2300      	movs	r3, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	f7f7 fe57 	bl	8001d32 <_close>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_close_r+0x1a>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_close_r+0x1a>
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	2000214c 	.word	0x2000214c

0800a094 <_lseek_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	; (800a0b4 <_lseek_r+0x20>)
 800a098:	4604      	mov	r4, r0
 800a09a:	4608      	mov	r0, r1
 800a09c:	4611      	mov	r1, r2
 800a09e:	2200      	movs	r2, #0
 800a0a0:	602a      	str	r2, [r5, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f7f7 fe6c 	bl	8001d80 <_lseek>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_lseek_r+0x1e>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_lseek_r+0x1e>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	2000214c 	.word	0x2000214c

0800a0b8 <_read_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d07      	ldr	r5, [pc, #28]	; (800a0d8 <_read_r+0x20>)
 800a0bc:	4604      	mov	r4, r0
 800a0be:	4608      	mov	r0, r1
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	602a      	str	r2, [r5, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f7f7 fdfa 	bl	8001cc0 <_read>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d102      	bne.n	800a0d6 <_read_r+0x1e>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	b103      	cbz	r3, 800a0d6 <_read_r+0x1e>
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
 800a0d8:	2000214c 	.word	0x2000214c

0800a0dc <_write_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d07      	ldr	r5, [pc, #28]	; (800a0fc <_write_r+0x20>)
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	4608      	mov	r0, r1
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	602a      	str	r2, [r5, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f7f7 fe05 	bl	8001cfa <_write>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_write_r+0x1e>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_write_r+0x1e>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	2000214c 	.word	0x2000214c

0800a100 <__errno>:
 800a100:	4b01      	ldr	r3, [pc, #4]	; (800a108 <__errno+0x8>)
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	20000154 	.word	0x20000154

0800a10c <__libc_init_array>:
 800a10c:	b570      	push	{r4, r5, r6, lr}
 800a10e:	4d0d      	ldr	r5, [pc, #52]	; (800a144 <__libc_init_array+0x38>)
 800a110:	4c0d      	ldr	r4, [pc, #52]	; (800a148 <__libc_init_array+0x3c>)
 800a112:	1b64      	subs	r4, r4, r5
 800a114:	10a4      	asrs	r4, r4, #2
 800a116:	2600      	movs	r6, #0
 800a118:	42a6      	cmp	r6, r4
 800a11a:	d109      	bne.n	800a130 <__libc_init_array+0x24>
 800a11c:	4d0b      	ldr	r5, [pc, #44]	; (800a14c <__libc_init_array+0x40>)
 800a11e:	4c0c      	ldr	r4, [pc, #48]	; (800a150 <__libc_init_array+0x44>)
 800a120:	f002 ffce 	bl	800d0c0 <_init>
 800a124:	1b64      	subs	r4, r4, r5
 800a126:	10a4      	asrs	r4, r4, #2
 800a128:	2600      	movs	r6, #0
 800a12a:	42a6      	cmp	r6, r4
 800a12c:	d105      	bne.n	800a13a <__libc_init_array+0x2e>
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	f855 3b04 	ldr.w	r3, [r5], #4
 800a134:	4798      	blx	r3
 800a136:	3601      	adds	r6, #1
 800a138:	e7ee      	b.n	800a118 <__libc_init_array+0xc>
 800a13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13e:	4798      	blx	r3
 800a140:	3601      	adds	r6, #1
 800a142:	e7f2      	b.n	800a12a <__libc_init_array+0x1e>
 800a144:	0800d518 	.word	0x0800d518
 800a148:	0800d518 	.word	0x0800d518
 800a14c:	0800d518 	.word	0x0800d518
 800a150:	0800d51c 	.word	0x0800d51c

0800a154 <__retarget_lock_init_recursive>:
 800a154:	4770      	bx	lr

0800a156 <__retarget_lock_acquire_recursive>:
 800a156:	4770      	bx	lr

0800a158 <__retarget_lock_release_recursive>:
 800a158:	4770      	bx	lr

0800a15a <quorem>:
 800a15a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15e:	6903      	ldr	r3, [r0, #16]
 800a160:	690c      	ldr	r4, [r1, #16]
 800a162:	42a3      	cmp	r3, r4
 800a164:	4607      	mov	r7, r0
 800a166:	db7e      	blt.n	800a266 <quorem+0x10c>
 800a168:	3c01      	subs	r4, #1
 800a16a:	f101 0814 	add.w	r8, r1, #20
 800a16e:	f100 0514 	add.w	r5, r0, #20
 800a172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a17c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a180:	3301      	adds	r3, #1
 800a182:	429a      	cmp	r2, r3
 800a184:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a18c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a190:	d331      	bcc.n	800a1f6 <quorem+0x9c>
 800a192:	f04f 0e00 	mov.w	lr, #0
 800a196:	4640      	mov	r0, r8
 800a198:	46ac      	mov	ip, r5
 800a19a:	46f2      	mov	sl, lr
 800a19c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1a0:	b293      	uxth	r3, r2
 800a1a2:	fb06 e303 	mla	r3, r6, r3, lr
 800a1a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1aa:	0c1a      	lsrs	r2, r3, #16
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	ebaa 0303 	sub.w	r3, sl, r3
 800a1b2:	f8dc a000 	ldr.w	sl, [ip]
 800a1b6:	fa13 f38a 	uxtah	r3, r3, sl
 800a1ba:	fb06 220e 	mla	r2, r6, lr, r2
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	9b00      	ldr	r3, [sp, #0]
 800a1c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1c6:	b292      	uxth	r2, r2
 800a1c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1d4:	4581      	cmp	r9, r0
 800a1d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1da:	f84c 3b04 	str.w	r3, [ip], #4
 800a1de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1e2:	d2db      	bcs.n	800a19c <quorem+0x42>
 800a1e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1e8:	b92b      	cbnz	r3, 800a1f6 <quorem+0x9c>
 800a1ea:	9b01      	ldr	r3, [sp, #4]
 800a1ec:	3b04      	subs	r3, #4
 800a1ee:	429d      	cmp	r5, r3
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	d32c      	bcc.n	800a24e <quorem+0xf4>
 800a1f4:	613c      	str	r4, [r7, #16]
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	f001 f9a8 	bl	800b54c <__mcmp>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	db22      	blt.n	800a246 <quorem+0xec>
 800a200:	3601      	adds	r6, #1
 800a202:	4629      	mov	r1, r5
 800a204:	2000      	movs	r0, #0
 800a206:	f858 2b04 	ldr.w	r2, [r8], #4
 800a20a:	f8d1 c000 	ldr.w	ip, [r1]
 800a20e:	b293      	uxth	r3, r2
 800a210:	1ac3      	subs	r3, r0, r3
 800a212:	0c12      	lsrs	r2, r2, #16
 800a214:	fa13 f38c 	uxtah	r3, r3, ip
 800a218:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a21c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a220:	b29b      	uxth	r3, r3
 800a222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a226:	45c1      	cmp	r9, r8
 800a228:	f841 3b04 	str.w	r3, [r1], #4
 800a22c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a230:	d2e9      	bcs.n	800a206 <quorem+0xac>
 800a232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a23a:	b922      	cbnz	r2, 800a246 <quorem+0xec>
 800a23c:	3b04      	subs	r3, #4
 800a23e:	429d      	cmp	r5, r3
 800a240:	461a      	mov	r2, r3
 800a242:	d30a      	bcc.n	800a25a <quorem+0x100>
 800a244:	613c      	str	r4, [r7, #16]
 800a246:	4630      	mov	r0, r6
 800a248:	b003      	add	sp, #12
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	6812      	ldr	r2, [r2, #0]
 800a250:	3b04      	subs	r3, #4
 800a252:	2a00      	cmp	r2, #0
 800a254:	d1ce      	bne.n	800a1f4 <quorem+0x9a>
 800a256:	3c01      	subs	r4, #1
 800a258:	e7c9      	b.n	800a1ee <quorem+0x94>
 800a25a:	6812      	ldr	r2, [r2, #0]
 800a25c:	3b04      	subs	r3, #4
 800a25e:	2a00      	cmp	r2, #0
 800a260:	d1f0      	bne.n	800a244 <quorem+0xea>
 800a262:	3c01      	subs	r4, #1
 800a264:	e7eb      	b.n	800a23e <quorem+0xe4>
 800a266:	2000      	movs	r0, #0
 800a268:	e7ee      	b.n	800a248 <quorem+0xee>
 800a26a:	0000      	movs	r0, r0
 800a26c:	0000      	movs	r0, r0
	...

0800a270 <_dtoa_r>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	ed2d 8b04 	vpush	{d8-d9}
 800a278:	69c5      	ldr	r5, [r0, #28]
 800a27a:	b093      	sub	sp, #76	; 0x4c
 800a27c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a280:	ec57 6b10 	vmov	r6, r7, d0
 800a284:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a288:	9107      	str	r1, [sp, #28]
 800a28a:	4604      	mov	r4, r0
 800a28c:	920a      	str	r2, [sp, #40]	; 0x28
 800a28e:	930d      	str	r3, [sp, #52]	; 0x34
 800a290:	b975      	cbnz	r5, 800a2b0 <_dtoa_r+0x40>
 800a292:	2010      	movs	r0, #16
 800a294:	f000 fe2a 	bl	800aeec <malloc>
 800a298:	4602      	mov	r2, r0
 800a29a:	61e0      	str	r0, [r4, #28]
 800a29c:	b920      	cbnz	r0, 800a2a8 <_dtoa_r+0x38>
 800a29e:	4bae      	ldr	r3, [pc, #696]	; (800a558 <_dtoa_r+0x2e8>)
 800a2a0:	21ef      	movs	r1, #239	; 0xef
 800a2a2:	48ae      	ldr	r0, [pc, #696]	; (800a55c <_dtoa_r+0x2ec>)
 800a2a4:	f001 fc90 	bl	800bbc8 <__assert_func>
 800a2a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2ac:	6005      	str	r5, [r0, #0]
 800a2ae:	60c5      	str	r5, [r0, #12]
 800a2b0:	69e3      	ldr	r3, [r4, #28]
 800a2b2:	6819      	ldr	r1, [r3, #0]
 800a2b4:	b151      	cbz	r1, 800a2cc <_dtoa_r+0x5c>
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	604a      	str	r2, [r1, #4]
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4093      	lsls	r3, r2
 800a2be:	608b      	str	r3, [r1, #8]
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 ff07 	bl	800b0d4 <_Bfree>
 800a2c6:	69e3      	ldr	r3, [r4, #28]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	1e3b      	subs	r3, r7, #0
 800a2ce:	bfbb      	ittet	lt
 800a2d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2d4:	9303      	strlt	r3, [sp, #12]
 800a2d6:	2300      	movge	r3, #0
 800a2d8:	2201      	movlt	r2, #1
 800a2da:	bfac      	ite	ge
 800a2dc:	f8c8 3000 	strge.w	r3, [r8]
 800a2e0:	f8c8 2000 	strlt.w	r2, [r8]
 800a2e4:	4b9e      	ldr	r3, [pc, #632]	; (800a560 <_dtoa_r+0x2f0>)
 800a2e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a2ea:	ea33 0308 	bics.w	r3, r3, r8
 800a2ee:	d11b      	bne.n	800a328 <_dtoa_r+0xb8>
 800a2f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a2fc:	4333      	orrs	r3, r6
 800a2fe:	f000 8593 	beq.w	800ae28 <_dtoa_r+0xbb8>
 800a302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a304:	b963      	cbnz	r3, 800a320 <_dtoa_r+0xb0>
 800a306:	4b97      	ldr	r3, [pc, #604]	; (800a564 <_dtoa_r+0x2f4>)
 800a308:	e027      	b.n	800a35a <_dtoa_r+0xea>
 800a30a:	4b97      	ldr	r3, [pc, #604]	; (800a568 <_dtoa_r+0x2f8>)
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	3308      	adds	r3, #8
 800a310:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	9800      	ldr	r0, [sp, #0]
 800a316:	b013      	add	sp, #76	; 0x4c
 800a318:	ecbd 8b04 	vpop	{d8-d9}
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	4b90      	ldr	r3, [pc, #576]	; (800a564 <_dtoa_r+0x2f4>)
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	3303      	adds	r3, #3
 800a326:	e7f3      	b.n	800a310 <_dtoa_r+0xa0>
 800a328:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a32c:	2200      	movs	r2, #0
 800a32e:	ec51 0b17 	vmov	r0, r1, d7
 800a332:	eeb0 8a47 	vmov.f32	s16, s14
 800a336:	eef0 8a67 	vmov.f32	s17, s15
 800a33a:	2300      	movs	r3, #0
 800a33c:	f7f6 fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a340:	4681      	mov	r9, r0
 800a342:	b160      	cbz	r0, 800a35e <_dtoa_r+0xee>
 800a344:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a346:	2301      	movs	r3, #1
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8568 	beq.w	800ae22 <_dtoa_r+0xbb2>
 800a352:	4b86      	ldr	r3, [pc, #536]	; (800a56c <_dtoa_r+0x2fc>)
 800a354:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	3b01      	subs	r3, #1
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	e7da      	b.n	800a314 <_dtoa_r+0xa4>
 800a35e:	aa10      	add	r2, sp, #64	; 0x40
 800a360:	a911      	add	r1, sp, #68	; 0x44
 800a362:	4620      	mov	r0, r4
 800a364:	eeb0 0a48 	vmov.f32	s0, s16
 800a368:	eef0 0a68 	vmov.f32	s1, s17
 800a36c:	f001 f994 	bl	800b698 <__d2b>
 800a370:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a374:	4682      	mov	sl, r0
 800a376:	2d00      	cmp	r5, #0
 800a378:	d07f      	beq.n	800a47a <_dtoa_r+0x20a>
 800a37a:	ee18 3a90 	vmov	r3, s17
 800a37e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a382:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a386:	ec51 0b18 	vmov	r0, r1, d8
 800a38a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a38e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a392:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a396:	4619      	mov	r1, r3
 800a398:	2200      	movs	r2, #0
 800a39a:	4b75      	ldr	r3, [pc, #468]	; (800a570 <_dtoa_r+0x300>)
 800a39c:	f7f5 ff74 	bl	8000288 <__aeabi_dsub>
 800a3a0:	a367      	add	r3, pc, #412	; (adr r3, 800a540 <_dtoa_r+0x2d0>)
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f7f6 f927 	bl	80005f8 <__aeabi_dmul>
 800a3aa:	a367      	add	r3, pc, #412	; (adr r3, 800a548 <_dtoa_r+0x2d8>)
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	f7f5 ff6c 	bl	800028c <__adddf3>
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	f7f6 f8b3 	bl	8000524 <__aeabi_i2d>
 800a3be:	a364      	add	r3, pc, #400	; (adr r3, 800a550 <_dtoa_r+0x2e0>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f7f6 f918 	bl	80005f8 <__aeabi_dmul>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f7f5 ff5c 	bl	800028c <__adddf3>
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	f7f6 fbbe 	bl	8000b58 <__aeabi_d2iz>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4683      	mov	fp, r0
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	f7f6 fb79 	bl	8000adc <__aeabi_dcmplt>
 800a3ea:	b148      	cbz	r0, 800a400 <_dtoa_r+0x190>
 800a3ec:	4658      	mov	r0, fp
 800a3ee:	f7f6 f899 	bl	8000524 <__aeabi_i2d>
 800a3f2:	4632      	mov	r2, r6
 800a3f4:	463b      	mov	r3, r7
 800a3f6:	f7f6 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3fa:	b908      	cbnz	r0, 800a400 <_dtoa_r+0x190>
 800a3fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a400:	f1bb 0f16 	cmp.w	fp, #22
 800a404:	d857      	bhi.n	800a4b6 <_dtoa_r+0x246>
 800a406:	4b5b      	ldr	r3, [pc, #364]	; (800a574 <_dtoa_r+0x304>)
 800a408:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	ec51 0b18 	vmov	r0, r1, d8
 800a414:	f7f6 fb62 	bl	8000adc <__aeabi_dcmplt>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d04e      	beq.n	800a4ba <_dtoa_r+0x24a>
 800a41c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a420:	2300      	movs	r3, #0
 800a422:	930c      	str	r3, [sp, #48]	; 0x30
 800a424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a426:	1b5b      	subs	r3, r3, r5
 800a428:	1e5a      	subs	r2, r3, #1
 800a42a:	bf45      	ittet	mi
 800a42c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a430:	9305      	strmi	r3, [sp, #20]
 800a432:	2300      	movpl	r3, #0
 800a434:	2300      	movmi	r3, #0
 800a436:	9206      	str	r2, [sp, #24]
 800a438:	bf54      	ite	pl
 800a43a:	9305      	strpl	r3, [sp, #20]
 800a43c:	9306      	strmi	r3, [sp, #24]
 800a43e:	f1bb 0f00 	cmp.w	fp, #0
 800a442:	db3c      	blt.n	800a4be <_dtoa_r+0x24e>
 800a444:	9b06      	ldr	r3, [sp, #24]
 800a446:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a44a:	445b      	add	r3, fp
 800a44c:	9306      	str	r3, [sp, #24]
 800a44e:	2300      	movs	r3, #0
 800a450:	9308      	str	r3, [sp, #32]
 800a452:	9b07      	ldr	r3, [sp, #28]
 800a454:	2b09      	cmp	r3, #9
 800a456:	d868      	bhi.n	800a52a <_dtoa_r+0x2ba>
 800a458:	2b05      	cmp	r3, #5
 800a45a:	bfc4      	itt	gt
 800a45c:	3b04      	subgt	r3, #4
 800a45e:	9307      	strgt	r3, [sp, #28]
 800a460:	9b07      	ldr	r3, [sp, #28]
 800a462:	f1a3 0302 	sub.w	r3, r3, #2
 800a466:	bfcc      	ite	gt
 800a468:	2500      	movgt	r5, #0
 800a46a:	2501      	movle	r5, #1
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	f200 8085 	bhi.w	800a57c <_dtoa_r+0x30c>
 800a472:	e8df f003 	tbb	[pc, r3]
 800a476:	3b2e      	.short	0x3b2e
 800a478:	5839      	.short	0x5839
 800a47a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a47e:	441d      	add	r5, r3
 800a480:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a484:	2b20      	cmp	r3, #32
 800a486:	bfc1      	itttt	gt
 800a488:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a48c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a490:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a494:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a498:	bfd6      	itet	le
 800a49a:	f1c3 0320 	rsble	r3, r3, #32
 800a49e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a4a2:	fa06 f003 	lslle.w	r0, r6, r3
 800a4a6:	f7f6 f82d 	bl	8000504 <__aeabi_ui2d>
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a4b0:	3d01      	subs	r5, #1
 800a4b2:	920e      	str	r2, [sp, #56]	; 0x38
 800a4b4:	e76f      	b.n	800a396 <_dtoa_r+0x126>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e7b3      	b.n	800a422 <_dtoa_r+0x1b2>
 800a4ba:	900c      	str	r0, [sp, #48]	; 0x30
 800a4bc:	e7b2      	b.n	800a424 <_dtoa_r+0x1b4>
 800a4be:	9b05      	ldr	r3, [sp, #20]
 800a4c0:	eba3 030b 	sub.w	r3, r3, fp
 800a4c4:	9305      	str	r3, [sp, #20]
 800a4c6:	f1cb 0300 	rsb	r3, fp, #0
 800a4ca:	9308      	str	r3, [sp, #32]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4d0:	e7bf      	b.n	800a452 <_dtoa_r+0x1e2>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dc52      	bgt.n	800a582 <_dtoa_r+0x312>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a4e6:	e00b      	b.n	800a500 <_dtoa_r+0x290>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e7f3      	b.n	800a4d4 <_dtoa_r+0x264>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f2:	445b      	add	r3, fp
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	bfb8      	it	lt
 800a4fe:	2301      	movlt	r3, #1
 800a500:	69e0      	ldr	r0, [r4, #28]
 800a502:	2100      	movs	r1, #0
 800a504:	2204      	movs	r2, #4
 800a506:	f102 0614 	add.w	r6, r2, #20
 800a50a:	429e      	cmp	r6, r3
 800a50c:	d93d      	bls.n	800a58a <_dtoa_r+0x31a>
 800a50e:	6041      	str	r1, [r0, #4]
 800a510:	4620      	mov	r0, r4
 800a512:	f000 fd9f 	bl	800b054 <_Balloc>
 800a516:	9000      	str	r0, [sp, #0]
 800a518:	2800      	cmp	r0, #0
 800a51a:	d139      	bne.n	800a590 <_dtoa_r+0x320>
 800a51c:	4b16      	ldr	r3, [pc, #88]	; (800a578 <_dtoa_r+0x308>)
 800a51e:	4602      	mov	r2, r0
 800a520:	f240 11af 	movw	r1, #431	; 0x1af
 800a524:	e6bd      	b.n	800a2a2 <_dtoa_r+0x32>
 800a526:	2301      	movs	r3, #1
 800a528:	e7e1      	b.n	800a4ee <_dtoa_r+0x27e>
 800a52a:	2501      	movs	r5, #1
 800a52c:	2300      	movs	r3, #0
 800a52e:	9307      	str	r3, [sp, #28]
 800a530:	9509      	str	r5, [sp, #36]	; 0x24
 800a532:	f04f 33ff 	mov.w	r3, #4294967295
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	9304      	str	r3, [sp, #16]
 800a53a:	2200      	movs	r2, #0
 800a53c:	2312      	movs	r3, #18
 800a53e:	e7d1      	b.n	800a4e4 <_dtoa_r+0x274>
 800a540:	636f4361 	.word	0x636f4361
 800a544:	3fd287a7 	.word	0x3fd287a7
 800a548:	8b60c8b3 	.word	0x8b60c8b3
 800a54c:	3fc68a28 	.word	0x3fc68a28
 800a550:	509f79fb 	.word	0x509f79fb
 800a554:	3fd34413 	.word	0x3fd34413
 800a558:	0800d1ad 	.word	0x0800d1ad
 800a55c:	0800d1c4 	.word	0x0800d1c4
 800a560:	7ff00000 	.word	0x7ff00000
 800a564:	0800d1a9 	.word	0x0800d1a9
 800a568:	0800d1a0 	.word	0x0800d1a0
 800a56c:	0800d17d 	.word	0x0800d17d
 800a570:	3ff80000 	.word	0x3ff80000
 800a574:	0800d2b0 	.word	0x0800d2b0
 800a578:	0800d21c 	.word	0x0800d21c
 800a57c:	2301      	movs	r3, #1
 800a57e:	9309      	str	r3, [sp, #36]	; 0x24
 800a580:	e7d7      	b.n	800a532 <_dtoa_r+0x2c2>
 800a582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a584:	9301      	str	r3, [sp, #4]
 800a586:	9304      	str	r3, [sp, #16]
 800a588:	e7ba      	b.n	800a500 <_dtoa_r+0x290>
 800a58a:	3101      	adds	r1, #1
 800a58c:	0052      	lsls	r2, r2, #1
 800a58e:	e7ba      	b.n	800a506 <_dtoa_r+0x296>
 800a590:	69e3      	ldr	r3, [r4, #28]
 800a592:	9a00      	ldr	r2, [sp, #0]
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	9b04      	ldr	r3, [sp, #16]
 800a598:	2b0e      	cmp	r3, #14
 800a59a:	f200 80a8 	bhi.w	800a6ee <_dtoa_r+0x47e>
 800a59e:	2d00      	cmp	r5, #0
 800a5a0:	f000 80a5 	beq.w	800a6ee <_dtoa_r+0x47e>
 800a5a4:	f1bb 0f00 	cmp.w	fp, #0
 800a5a8:	dd38      	ble.n	800a61c <_dtoa_r+0x3ac>
 800a5aa:	4bc0      	ldr	r3, [pc, #768]	; (800a8ac <_dtoa_r+0x63c>)
 800a5ac:	f00b 020f 	and.w	r2, fp, #15
 800a5b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a5b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a5bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a5c0:	d019      	beq.n	800a5f6 <_dtoa_r+0x386>
 800a5c2:	4bbb      	ldr	r3, [pc, #748]	; (800a8b0 <_dtoa_r+0x640>)
 800a5c4:	ec51 0b18 	vmov	r0, r1, d8
 800a5c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5cc:	f7f6 f93e 	bl	800084c <__aeabi_ddiv>
 800a5d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d4:	f008 080f 	and.w	r8, r8, #15
 800a5d8:	2503      	movs	r5, #3
 800a5da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a8b0 <_dtoa_r+0x640>
 800a5de:	f1b8 0f00 	cmp.w	r8, #0
 800a5e2:	d10a      	bne.n	800a5fa <_dtoa_r+0x38a>
 800a5e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e8:	4632      	mov	r2, r6
 800a5ea:	463b      	mov	r3, r7
 800a5ec:	f7f6 f92e 	bl	800084c <__aeabi_ddiv>
 800a5f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5f4:	e02b      	b.n	800a64e <_dtoa_r+0x3de>
 800a5f6:	2502      	movs	r5, #2
 800a5f8:	e7ef      	b.n	800a5da <_dtoa_r+0x36a>
 800a5fa:	f018 0f01 	tst.w	r8, #1
 800a5fe:	d008      	beq.n	800a612 <_dtoa_r+0x3a2>
 800a600:	4630      	mov	r0, r6
 800a602:	4639      	mov	r1, r7
 800a604:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a608:	f7f5 fff6 	bl	80005f8 <__aeabi_dmul>
 800a60c:	3501      	adds	r5, #1
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a616:	f109 0908 	add.w	r9, r9, #8
 800a61a:	e7e0      	b.n	800a5de <_dtoa_r+0x36e>
 800a61c:	f000 809f 	beq.w	800a75e <_dtoa_r+0x4ee>
 800a620:	f1cb 0600 	rsb	r6, fp, #0
 800a624:	4ba1      	ldr	r3, [pc, #644]	; (800a8ac <_dtoa_r+0x63c>)
 800a626:	4fa2      	ldr	r7, [pc, #648]	; (800a8b0 <_dtoa_r+0x640>)
 800a628:	f006 020f 	and.w	r2, r6, #15
 800a62c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	ec51 0b18 	vmov	r0, r1, d8
 800a638:	f7f5 ffde 	bl	80005f8 <__aeabi_dmul>
 800a63c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a640:	1136      	asrs	r6, r6, #4
 800a642:	2300      	movs	r3, #0
 800a644:	2502      	movs	r5, #2
 800a646:	2e00      	cmp	r6, #0
 800a648:	d17e      	bne.n	800a748 <_dtoa_r+0x4d8>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1d0      	bne.n	800a5f0 <_dtoa_r+0x380>
 800a64e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a650:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 8084 	beq.w	800a762 <_dtoa_r+0x4f2>
 800a65a:	4b96      	ldr	r3, [pc, #600]	; (800a8b4 <_dtoa_r+0x644>)
 800a65c:	2200      	movs	r2, #0
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	f7f6 fa3b 	bl	8000adc <__aeabi_dcmplt>
 800a666:	2800      	cmp	r0, #0
 800a668:	d07b      	beq.n	800a762 <_dtoa_r+0x4f2>
 800a66a:	9b04      	ldr	r3, [sp, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d078      	beq.n	800a762 <_dtoa_r+0x4f2>
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	dd39      	ble.n	800a6ea <_dtoa_r+0x47a>
 800a676:	4b90      	ldr	r3, [pc, #576]	; (800a8b8 <_dtoa_r+0x648>)
 800a678:	2200      	movs	r2, #0
 800a67a:	4640      	mov	r0, r8
 800a67c:	4649      	mov	r1, r9
 800a67e:	f7f5 ffbb 	bl	80005f8 <__aeabi_dmul>
 800a682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a686:	9e01      	ldr	r6, [sp, #4]
 800a688:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a68c:	3501      	adds	r5, #1
 800a68e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a692:	4628      	mov	r0, r5
 800a694:	f7f5 ff46 	bl	8000524 <__aeabi_i2d>
 800a698:	4642      	mov	r2, r8
 800a69a:	464b      	mov	r3, r9
 800a69c:	f7f5 ffac 	bl	80005f8 <__aeabi_dmul>
 800a6a0:	4b86      	ldr	r3, [pc, #536]	; (800a8bc <_dtoa_r+0x64c>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f7f5 fdf2 	bl	800028c <__adddf3>
 800a6a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b0:	9303      	str	r3, [sp, #12]
 800a6b2:	2e00      	cmp	r6, #0
 800a6b4:	d158      	bne.n	800a768 <_dtoa_r+0x4f8>
 800a6b6:	4b82      	ldr	r3, [pc, #520]	; (800a8c0 <_dtoa_r+0x650>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	4649      	mov	r1, r9
 800a6be:	f7f5 fde3 	bl	8000288 <__aeabi_dsub>
 800a6c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	4689      	mov	r9, r1
 800a6ca:	f7f6 fa25 	bl	8000b18 <__aeabi_dcmpgt>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f040 8296 	bne.w	800ac00 <_dtoa_r+0x990>
 800a6d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a6d8:	4640      	mov	r0, r8
 800a6da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6de:	4649      	mov	r1, r9
 800a6e0:	f7f6 f9fc 	bl	8000adc <__aeabi_dcmplt>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	f040 8289 	bne.w	800abfc <_dtoa_r+0x98c>
 800a6ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a6ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f2c0 814e 	blt.w	800a992 <_dtoa_r+0x722>
 800a6f6:	f1bb 0f0e 	cmp.w	fp, #14
 800a6fa:	f300 814a 	bgt.w	800a992 <_dtoa_r+0x722>
 800a6fe:	4b6b      	ldr	r3, [pc, #428]	; (800a8ac <_dtoa_r+0x63c>)
 800a700:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a704:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f280 80dc 	bge.w	800a8c8 <_dtoa_r+0x658>
 800a710:	9b04      	ldr	r3, [sp, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f300 80d8 	bgt.w	800a8c8 <_dtoa_r+0x658>
 800a718:	f040 826f 	bne.w	800abfa <_dtoa_r+0x98a>
 800a71c:	4b68      	ldr	r3, [pc, #416]	; (800a8c0 <_dtoa_r+0x650>)
 800a71e:	2200      	movs	r2, #0
 800a720:	4640      	mov	r0, r8
 800a722:	4649      	mov	r1, r9
 800a724:	f7f5 ff68 	bl	80005f8 <__aeabi_dmul>
 800a728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a72c:	f7f6 f9ea 	bl	8000b04 <__aeabi_dcmpge>
 800a730:	9e04      	ldr	r6, [sp, #16]
 800a732:	4637      	mov	r7, r6
 800a734:	2800      	cmp	r0, #0
 800a736:	f040 8245 	bne.w	800abc4 <_dtoa_r+0x954>
 800a73a:	9d00      	ldr	r5, [sp, #0]
 800a73c:	2331      	movs	r3, #49	; 0x31
 800a73e:	f805 3b01 	strb.w	r3, [r5], #1
 800a742:	f10b 0b01 	add.w	fp, fp, #1
 800a746:	e241      	b.n	800abcc <_dtoa_r+0x95c>
 800a748:	07f2      	lsls	r2, r6, #31
 800a74a:	d505      	bpl.n	800a758 <_dtoa_r+0x4e8>
 800a74c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a750:	f7f5 ff52 	bl	80005f8 <__aeabi_dmul>
 800a754:	3501      	adds	r5, #1
 800a756:	2301      	movs	r3, #1
 800a758:	1076      	asrs	r6, r6, #1
 800a75a:	3708      	adds	r7, #8
 800a75c:	e773      	b.n	800a646 <_dtoa_r+0x3d6>
 800a75e:	2502      	movs	r5, #2
 800a760:	e775      	b.n	800a64e <_dtoa_r+0x3de>
 800a762:	9e04      	ldr	r6, [sp, #16]
 800a764:	465f      	mov	r7, fp
 800a766:	e792      	b.n	800a68e <_dtoa_r+0x41e>
 800a768:	9900      	ldr	r1, [sp, #0]
 800a76a:	4b50      	ldr	r3, [pc, #320]	; (800a8ac <_dtoa_r+0x63c>)
 800a76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a770:	4431      	add	r1, r6
 800a772:	9102      	str	r1, [sp, #8]
 800a774:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a776:	eeb0 9a47 	vmov.f32	s18, s14
 800a77a:	eef0 9a67 	vmov.f32	s19, s15
 800a77e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a782:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a786:	2900      	cmp	r1, #0
 800a788:	d044      	beq.n	800a814 <_dtoa_r+0x5a4>
 800a78a:	494e      	ldr	r1, [pc, #312]	; (800a8c4 <_dtoa_r+0x654>)
 800a78c:	2000      	movs	r0, #0
 800a78e:	f7f6 f85d 	bl	800084c <__aeabi_ddiv>
 800a792:	ec53 2b19 	vmov	r2, r3, d9
 800a796:	f7f5 fd77 	bl	8000288 <__aeabi_dsub>
 800a79a:	9d00      	ldr	r5, [sp, #0]
 800a79c:	ec41 0b19 	vmov	d9, r0, r1
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	f7f6 f9d8 	bl	8000b58 <__aeabi_d2iz>
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	f7f5 febb 	bl	8000524 <__aeabi_i2d>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	f7f5 fd67 	bl	8000288 <__aeabi_dsub>
 800a7ba:	3630      	adds	r6, #48	; 0x30
 800a7bc:	f805 6b01 	strb.w	r6, [r5], #1
 800a7c0:	ec53 2b19 	vmov	r2, r3, d9
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	4689      	mov	r9, r1
 800a7c8:	f7f6 f988 	bl	8000adc <__aeabi_dcmplt>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d164      	bne.n	800a89a <_dtoa_r+0x62a>
 800a7d0:	4642      	mov	r2, r8
 800a7d2:	464b      	mov	r3, r9
 800a7d4:	4937      	ldr	r1, [pc, #220]	; (800a8b4 <_dtoa_r+0x644>)
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f7f5 fd56 	bl	8000288 <__aeabi_dsub>
 800a7dc:	ec53 2b19 	vmov	r2, r3, d9
 800a7e0:	f7f6 f97c 	bl	8000adc <__aeabi_dcmplt>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f040 80b6 	bne.w	800a956 <_dtoa_r+0x6e6>
 800a7ea:	9b02      	ldr	r3, [sp, #8]
 800a7ec:	429d      	cmp	r5, r3
 800a7ee:	f43f af7c 	beq.w	800a6ea <_dtoa_r+0x47a>
 800a7f2:	4b31      	ldr	r3, [pc, #196]	; (800a8b8 <_dtoa_r+0x648>)
 800a7f4:	ec51 0b19 	vmov	r0, r1, d9
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f7f5 fefd 	bl	80005f8 <__aeabi_dmul>
 800a7fe:	4b2e      	ldr	r3, [pc, #184]	; (800a8b8 <_dtoa_r+0x648>)
 800a800:	ec41 0b19 	vmov	d9, r0, r1
 800a804:	2200      	movs	r2, #0
 800a806:	4640      	mov	r0, r8
 800a808:	4649      	mov	r1, r9
 800a80a:	f7f5 fef5 	bl	80005f8 <__aeabi_dmul>
 800a80e:	4680      	mov	r8, r0
 800a810:	4689      	mov	r9, r1
 800a812:	e7c5      	b.n	800a7a0 <_dtoa_r+0x530>
 800a814:	ec51 0b17 	vmov	r0, r1, d7
 800a818:	f7f5 feee 	bl	80005f8 <__aeabi_dmul>
 800a81c:	9b02      	ldr	r3, [sp, #8]
 800a81e:	9d00      	ldr	r5, [sp, #0]
 800a820:	930f      	str	r3, [sp, #60]	; 0x3c
 800a822:	ec41 0b19 	vmov	d9, r0, r1
 800a826:	4649      	mov	r1, r9
 800a828:	4640      	mov	r0, r8
 800a82a:	f7f6 f995 	bl	8000b58 <__aeabi_d2iz>
 800a82e:	4606      	mov	r6, r0
 800a830:	f7f5 fe78 	bl	8000524 <__aeabi_i2d>
 800a834:	3630      	adds	r6, #48	; 0x30
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4640      	mov	r0, r8
 800a83c:	4649      	mov	r1, r9
 800a83e:	f7f5 fd23 	bl	8000288 <__aeabi_dsub>
 800a842:	f805 6b01 	strb.w	r6, [r5], #1
 800a846:	9b02      	ldr	r3, [sp, #8]
 800a848:	429d      	cmp	r5, r3
 800a84a:	4680      	mov	r8, r0
 800a84c:	4689      	mov	r9, r1
 800a84e:	f04f 0200 	mov.w	r2, #0
 800a852:	d124      	bne.n	800a89e <_dtoa_r+0x62e>
 800a854:	4b1b      	ldr	r3, [pc, #108]	; (800a8c4 <_dtoa_r+0x654>)
 800a856:	ec51 0b19 	vmov	r0, r1, d9
 800a85a:	f7f5 fd17 	bl	800028c <__adddf3>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f6 f957 	bl	8000b18 <__aeabi_dcmpgt>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d173      	bne.n	800a956 <_dtoa_r+0x6e6>
 800a86e:	ec53 2b19 	vmov	r2, r3, d9
 800a872:	4914      	ldr	r1, [pc, #80]	; (800a8c4 <_dtoa_r+0x654>)
 800a874:	2000      	movs	r0, #0
 800a876:	f7f5 fd07 	bl	8000288 <__aeabi_dsub>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4640      	mov	r0, r8
 800a880:	4649      	mov	r1, r9
 800a882:	f7f6 f92b 	bl	8000adc <__aeabi_dcmplt>
 800a886:	2800      	cmp	r0, #0
 800a888:	f43f af2f 	beq.w	800a6ea <_dtoa_r+0x47a>
 800a88c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a88e:	1e6b      	subs	r3, r5, #1
 800a890:	930f      	str	r3, [sp, #60]	; 0x3c
 800a892:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a896:	2b30      	cmp	r3, #48	; 0x30
 800a898:	d0f8      	beq.n	800a88c <_dtoa_r+0x61c>
 800a89a:	46bb      	mov	fp, r7
 800a89c:	e04a      	b.n	800a934 <_dtoa_r+0x6c4>
 800a89e:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <_dtoa_r+0x648>)
 800a8a0:	f7f5 feaa 	bl	80005f8 <__aeabi_dmul>
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	4689      	mov	r9, r1
 800a8a8:	e7bd      	b.n	800a826 <_dtoa_r+0x5b6>
 800a8aa:	bf00      	nop
 800a8ac:	0800d2b0 	.word	0x0800d2b0
 800a8b0:	0800d288 	.word	0x0800d288
 800a8b4:	3ff00000 	.word	0x3ff00000
 800a8b8:	40240000 	.word	0x40240000
 800a8bc:	401c0000 	.word	0x401c0000
 800a8c0:	40140000 	.word	0x40140000
 800a8c4:	3fe00000 	.word	0x3fe00000
 800a8c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8cc:	9d00      	ldr	r5, [sp, #0]
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	f7f5 ffb9 	bl	800084c <__aeabi_ddiv>
 800a8da:	f7f6 f93d 	bl	8000b58 <__aeabi_d2iz>
 800a8de:	9001      	str	r0, [sp, #4]
 800a8e0:	f7f5 fe20 	bl	8000524 <__aeabi_i2d>
 800a8e4:	4642      	mov	r2, r8
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	f7f5 fe86 	bl	80005f8 <__aeabi_dmul>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	4639      	mov	r1, r7
 800a8f4:	f7f5 fcc8 	bl	8000288 <__aeabi_dsub>
 800a8f8:	9e01      	ldr	r6, [sp, #4]
 800a8fa:	9f04      	ldr	r7, [sp, #16]
 800a8fc:	3630      	adds	r6, #48	; 0x30
 800a8fe:	f805 6b01 	strb.w	r6, [r5], #1
 800a902:	9e00      	ldr	r6, [sp, #0]
 800a904:	1bae      	subs	r6, r5, r6
 800a906:	42b7      	cmp	r7, r6
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	d134      	bne.n	800a978 <_dtoa_r+0x708>
 800a90e:	f7f5 fcbd 	bl	800028c <__adddf3>
 800a912:	4642      	mov	r2, r8
 800a914:	464b      	mov	r3, r9
 800a916:	4606      	mov	r6, r0
 800a918:	460f      	mov	r7, r1
 800a91a:	f7f6 f8fd 	bl	8000b18 <__aeabi_dcmpgt>
 800a91e:	b9c8      	cbnz	r0, 800a954 <_dtoa_r+0x6e4>
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	4630      	mov	r0, r6
 800a926:	4639      	mov	r1, r7
 800a928:	f7f6 f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800a92c:	b110      	cbz	r0, 800a934 <_dtoa_r+0x6c4>
 800a92e:	9b01      	ldr	r3, [sp, #4]
 800a930:	07db      	lsls	r3, r3, #31
 800a932:	d40f      	bmi.n	800a954 <_dtoa_r+0x6e4>
 800a934:	4651      	mov	r1, sl
 800a936:	4620      	mov	r0, r4
 800a938:	f000 fbcc 	bl	800b0d4 <_Bfree>
 800a93c:	2300      	movs	r3, #0
 800a93e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a940:	702b      	strb	r3, [r5, #0]
 800a942:	f10b 0301 	add.w	r3, fp, #1
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f43f ace2 	beq.w	800a314 <_dtoa_r+0xa4>
 800a950:	601d      	str	r5, [r3, #0]
 800a952:	e4df      	b.n	800a314 <_dtoa_r+0xa4>
 800a954:	465f      	mov	r7, fp
 800a956:	462b      	mov	r3, r5
 800a958:	461d      	mov	r5, r3
 800a95a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a95e:	2a39      	cmp	r2, #57	; 0x39
 800a960:	d106      	bne.n	800a970 <_dtoa_r+0x700>
 800a962:	9a00      	ldr	r2, [sp, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d1f7      	bne.n	800a958 <_dtoa_r+0x6e8>
 800a968:	9900      	ldr	r1, [sp, #0]
 800a96a:	2230      	movs	r2, #48	; 0x30
 800a96c:	3701      	adds	r7, #1
 800a96e:	700a      	strb	r2, [r1, #0]
 800a970:	781a      	ldrb	r2, [r3, #0]
 800a972:	3201      	adds	r2, #1
 800a974:	701a      	strb	r2, [r3, #0]
 800a976:	e790      	b.n	800a89a <_dtoa_r+0x62a>
 800a978:	4ba3      	ldr	r3, [pc, #652]	; (800ac08 <_dtoa_r+0x998>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	f7f5 fe3c 	bl	80005f8 <__aeabi_dmul>
 800a980:	2200      	movs	r2, #0
 800a982:	2300      	movs	r3, #0
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	f7f6 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d09e      	beq.n	800a8ce <_dtoa_r+0x65e>
 800a990:	e7d0      	b.n	800a934 <_dtoa_r+0x6c4>
 800a992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a994:	2a00      	cmp	r2, #0
 800a996:	f000 80ca 	beq.w	800ab2e <_dtoa_r+0x8be>
 800a99a:	9a07      	ldr	r2, [sp, #28]
 800a99c:	2a01      	cmp	r2, #1
 800a99e:	f300 80ad 	bgt.w	800aafc <_dtoa_r+0x88c>
 800a9a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	f000 80a5 	beq.w	800aaf4 <_dtoa_r+0x884>
 800a9aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9ae:	9e08      	ldr	r6, [sp, #32]
 800a9b0:	9d05      	ldr	r5, [sp, #20]
 800a9b2:	9a05      	ldr	r2, [sp, #20]
 800a9b4:	441a      	add	r2, r3
 800a9b6:	9205      	str	r2, [sp, #20]
 800a9b8:	9a06      	ldr	r2, [sp, #24]
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	441a      	add	r2, r3
 800a9be:	4620      	mov	r0, r4
 800a9c0:	9206      	str	r2, [sp, #24]
 800a9c2:	f000 fc3d 	bl	800b240 <__i2b>
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	b165      	cbz	r5, 800a9e4 <_dtoa_r+0x774>
 800a9ca:	9b06      	ldr	r3, [sp, #24]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	dd09      	ble.n	800a9e4 <_dtoa_r+0x774>
 800a9d0:	42ab      	cmp	r3, r5
 800a9d2:	9a05      	ldr	r2, [sp, #20]
 800a9d4:	bfa8      	it	ge
 800a9d6:	462b      	movge	r3, r5
 800a9d8:	1ad2      	subs	r2, r2, r3
 800a9da:	9205      	str	r2, [sp, #20]
 800a9dc:	9a06      	ldr	r2, [sp, #24]
 800a9de:	1aed      	subs	r5, r5, r3
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	9306      	str	r3, [sp, #24]
 800a9e4:	9b08      	ldr	r3, [sp, #32]
 800a9e6:	b1f3      	cbz	r3, 800aa26 <_dtoa_r+0x7b6>
 800a9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 80a3 	beq.w	800ab36 <_dtoa_r+0x8c6>
 800a9f0:	2e00      	cmp	r6, #0
 800a9f2:	dd10      	ble.n	800aa16 <_dtoa_r+0x7a6>
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	4632      	mov	r2, r6
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 fce1 	bl	800b3c0 <__pow5mult>
 800a9fe:	4652      	mov	r2, sl
 800aa00:	4601      	mov	r1, r0
 800aa02:	4607      	mov	r7, r0
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 fc31 	bl	800b26c <__multiply>
 800aa0a:	4651      	mov	r1, sl
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 fb60 	bl	800b0d4 <_Bfree>
 800aa14:	46c2      	mov	sl, r8
 800aa16:	9b08      	ldr	r3, [sp, #32]
 800aa18:	1b9a      	subs	r2, r3, r6
 800aa1a:	d004      	beq.n	800aa26 <_dtoa_r+0x7b6>
 800aa1c:	4651      	mov	r1, sl
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 fcce 	bl	800b3c0 <__pow5mult>
 800aa24:	4682      	mov	sl, r0
 800aa26:	2101      	movs	r1, #1
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 fc09 	bl	800b240 <__i2b>
 800aa2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	4606      	mov	r6, r0
 800aa34:	f340 8081 	ble.w	800ab3a <_dtoa_r+0x8ca>
 800aa38:	461a      	mov	r2, r3
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 fcbf 	bl	800b3c0 <__pow5mult>
 800aa42:	9b07      	ldr	r3, [sp, #28]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	4606      	mov	r6, r0
 800aa48:	dd7a      	ble.n	800ab40 <_dtoa_r+0x8d0>
 800aa4a:	f04f 0800 	mov.w	r8, #0
 800aa4e:	6933      	ldr	r3, [r6, #16]
 800aa50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa54:	6918      	ldr	r0, [r3, #16]
 800aa56:	f000 fba5 	bl	800b1a4 <__hi0bits>
 800aa5a:	f1c0 0020 	rsb	r0, r0, #32
 800aa5e:	9b06      	ldr	r3, [sp, #24]
 800aa60:	4418      	add	r0, r3
 800aa62:	f010 001f 	ands.w	r0, r0, #31
 800aa66:	f000 8094 	beq.w	800ab92 <_dtoa_r+0x922>
 800aa6a:	f1c0 0320 	rsb	r3, r0, #32
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	f340 8085 	ble.w	800ab7e <_dtoa_r+0x90e>
 800aa74:	9b05      	ldr	r3, [sp, #20]
 800aa76:	f1c0 001c 	rsb	r0, r0, #28
 800aa7a:	4403      	add	r3, r0
 800aa7c:	9305      	str	r3, [sp, #20]
 800aa7e:	9b06      	ldr	r3, [sp, #24]
 800aa80:	4403      	add	r3, r0
 800aa82:	4405      	add	r5, r0
 800aa84:	9306      	str	r3, [sp, #24]
 800aa86:	9b05      	ldr	r3, [sp, #20]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	dd05      	ble.n	800aa98 <_dtoa_r+0x828>
 800aa8c:	4651      	mov	r1, sl
 800aa8e:	461a      	mov	r2, r3
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fcef 	bl	800b474 <__lshift>
 800aa96:	4682      	mov	sl, r0
 800aa98:	9b06      	ldr	r3, [sp, #24]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	dd05      	ble.n	800aaaa <_dtoa_r+0x83a>
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 fce6 	bl	800b474 <__lshift>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d072      	beq.n	800ab96 <_dtoa_r+0x926>
 800aab0:	4631      	mov	r1, r6
 800aab2:	4650      	mov	r0, sl
 800aab4:	f000 fd4a 	bl	800b54c <__mcmp>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	da6c      	bge.n	800ab96 <_dtoa_r+0x926>
 800aabc:	2300      	movs	r3, #0
 800aabe:	4651      	mov	r1, sl
 800aac0:	220a      	movs	r2, #10
 800aac2:	4620      	mov	r0, r4
 800aac4:	f000 fb28 	bl	800b118 <__multadd>
 800aac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aace:	4682      	mov	sl, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 81b0 	beq.w	800ae36 <_dtoa_r+0xbc6>
 800aad6:	2300      	movs	r3, #0
 800aad8:	4639      	mov	r1, r7
 800aada:	220a      	movs	r2, #10
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 fb1b 	bl	800b118 <__multadd>
 800aae2:	9b01      	ldr	r3, [sp, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	4607      	mov	r7, r0
 800aae8:	f300 8096 	bgt.w	800ac18 <_dtoa_r+0x9a8>
 800aaec:	9b07      	ldr	r3, [sp, #28]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	dc59      	bgt.n	800aba6 <_dtoa_r+0x936>
 800aaf2:	e091      	b.n	800ac18 <_dtoa_r+0x9a8>
 800aaf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aafa:	e758      	b.n	800a9ae <_dtoa_r+0x73e>
 800aafc:	9b04      	ldr	r3, [sp, #16]
 800aafe:	1e5e      	subs	r6, r3, #1
 800ab00:	9b08      	ldr	r3, [sp, #32]
 800ab02:	42b3      	cmp	r3, r6
 800ab04:	bfbf      	itttt	lt
 800ab06:	9b08      	ldrlt	r3, [sp, #32]
 800ab08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ab0a:	9608      	strlt	r6, [sp, #32]
 800ab0c:	1af3      	sublt	r3, r6, r3
 800ab0e:	bfb4      	ite	lt
 800ab10:	18d2      	addlt	r2, r2, r3
 800ab12:	1b9e      	subge	r6, r3, r6
 800ab14:	9b04      	ldr	r3, [sp, #16]
 800ab16:	bfbc      	itt	lt
 800ab18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ab1a:	2600      	movlt	r6, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bfb7      	itett	lt
 800ab20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ab24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ab28:	1a9d      	sublt	r5, r3, r2
 800ab2a:	2300      	movlt	r3, #0
 800ab2c:	e741      	b.n	800a9b2 <_dtoa_r+0x742>
 800ab2e:	9e08      	ldr	r6, [sp, #32]
 800ab30:	9d05      	ldr	r5, [sp, #20]
 800ab32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab34:	e748      	b.n	800a9c8 <_dtoa_r+0x758>
 800ab36:	9a08      	ldr	r2, [sp, #32]
 800ab38:	e770      	b.n	800aa1c <_dtoa_r+0x7ac>
 800ab3a:	9b07      	ldr	r3, [sp, #28]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	dc19      	bgt.n	800ab74 <_dtoa_r+0x904>
 800ab40:	9b02      	ldr	r3, [sp, #8]
 800ab42:	b9bb      	cbnz	r3, 800ab74 <_dtoa_r+0x904>
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab4a:	b99b      	cbnz	r3, 800ab74 <_dtoa_r+0x904>
 800ab4c:	9b03      	ldr	r3, [sp, #12]
 800ab4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab52:	0d1b      	lsrs	r3, r3, #20
 800ab54:	051b      	lsls	r3, r3, #20
 800ab56:	b183      	cbz	r3, 800ab7a <_dtoa_r+0x90a>
 800ab58:	9b05      	ldr	r3, [sp, #20]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	9305      	str	r3, [sp, #20]
 800ab5e:	9b06      	ldr	r3, [sp, #24]
 800ab60:	3301      	adds	r3, #1
 800ab62:	9306      	str	r3, [sp, #24]
 800ab64:	f04f 0801 	mov.w	r8, #1
 800ab68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f47f af6f 	bne.w	800aa4e <_dtoa_r+0x7de>
 800ab70:	2001      	movs	r0, #1
 800ab72:	e774      	b.n	800aa5e <_dtoa_r+0x7ee>
 800ab74:	f04f 0800 	mov.w	r8, #0
 800ab78:	e7f6      	b.n	800ab68 <_dtoa_r+0x8f8>
 800ab7a:	4698      	mov	r8, r3
 800ab7c:	e7f4      	b.n	800ab68 <_dtoa_r+0x8f8>
 800ab7e:	d082      	beq.n	800aa86 <_dtoa_r+0x816>
 800ab80:	9a05      	ldr	r2, [sp, #20]
 800ab82:	331c      	adds	r3, #28
 800ab84:	441a      	add	r2, r3
 800ab86:	9205      	str	r2, [sp, #20]
 800ab88:	9a06      	ldr	r2, [sp, #24]
 800ab8a:	441a      	add	r2, r3
 800ab8c:	441d      	add	r5, r3
 800ab8e:	9206      	str	r2, [sp, #24]
 800ab90:	e779      	b.n	800aa86 <_dtoa_r+0x816>
 800ab92:	4603      	mov	r3, r0
 800ab94:	e7f4      	b.n	800ab80 <_dtoa_r+0x910>
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dc37      	bgt.n	800ac0c <_dtoa_r+0x99c>
 800ab9c:	9b07      	ldr	r3, [sp, #28]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	dd34      	ble.n	800ac0c <_dtoa_r+0x99c>
 800aba2:	9b04      	ldr	r3, [sp, #16]
 800aba4:	9301      	str	r3, [sp, #4]
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	b963      	cbnz	r3, 800abc4 <_dtoa_r+0x954>
 800abaa:	4631      	mov	r1, r6
 800abac:	2205      	movs	r2, #5
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 fab2 	bl	800b118 <__multadd>
 800abb4:	4601      	mov	r1, r0
 800abb6:	4606      	mov	r6, r0
 800abb8:	4650      	mov	r0, sl
 800abba:	f000 fcc7 	bl	800b54c <__mcmp>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f73f adbb 	bgt.w	800a73a <_dtoa_r+0x4ca>
 800abc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc6:	9d00      	ldr	r5, [sp, #0]
 800abc8:	ea6f 0b03 	mvn.w	fp, r3
 800abcc:	f04f 0800 	mov.w	r8, #0
 800abd0:	4631      	mov	r1, r6
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 fa7e 	bl	800b0d4 <_Bfree>
 800abd8:	2f00      	cmp	r7, #0
 800abda:	f43f aeab 	beq.w	800a934 <_dtoa_r+0x6c4>
 800abde:	f1b8 0f00 	cmp.w	r8, #0
 800abe2:	d005      	beq.n	800abf0 <_dtoa_r+0x980>
 800abe4:	45b8      	cmp	r8, r7
 800abe6:	d003      	beq.n	800abf0 <_dtoa_r+0x980>
 800abe8:	4641      	mov	r1, r8
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fa72 	bl	800b0d4 <_Bfree>
 800abf0:	4639      	mov	r1, r7
 800abf2:	4620      	mov	r0, r4
 800abf4:	f000 fa6e 	bl	800b0d4 <_Bfree>
 800abf8:	e69c      	b.n	800a934 <_dtoa_r+0x6c4>
 800abfa:	2600      	movs	r6, #0
 800abfc:	4637      	mov	r7, r6
 800abfe:	e7e1      	b.n	800abc4 <_dtoa_r+0x954>
 800ac00:	46bb      	mov	fp, r7
 800ac02:	4637      	mov	r7, r6
 800ac04:	e599      	b.n	800a73a <_dtoa_r+0x4ca>
 800ac06:	bf00      	nop
 800ac08:	40240000 	.word	0x40240000
 800ac0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 80c8 	beq.w	800ada4 <_dtoa_r+0xb34>
 800ac14:	9b04      	ldr	r3, [sp, #16]
 800ac16:	9301      	str	r3, [sp, #4]
 800ac18:	2d00      	cmp	r5, #0
 800ac1a:	dd05      	ble.n	800ac28 <_dtoa_r+0x9b8>
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	462a      	mov	r2, r5
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fc27 	bl	800b474 <__lshift>
 800ac26:	4607      	mov	r7, r0
 800ac28:	f1b8 0f00 	cmp.w	r8, #0
 800ac2c:	d05b      	beq.n	800ace6 <_dtoa_r+0xa76>
 800ac2e:	6879      	ldr	r1, [r7, #4]
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 fa0f 	bl	800b054 <_Balloc>
 800ac36:	4605      	mov	r5, r0
 800ac38:	b928      	cbnz	r0, 800ac46 <_dtoa_r+0x9d6>
 800ac3a:	4b83      	ldr	r3, [pc, #524]	; (800ae48 <_dtoa_r+0xbd8>)
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ac42:	f7ff bb2e 	b.w	800a2a2 <_dtoa_r+0x32>
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	3202      	adds	r2, #2
 800ac4a:	0092      	lsls	r2, r2, #2
 800ac4c:	f107 010c 	add.w	r1, r7, #12
 800ac50:	300c      	adds	r0, #12
 800ac52:	f000 ffab 	bl	800bbac <memcpy>
 800ac56:	2201      	movs	r2, #1
 800ac58:	4629      	mov	r1, r5
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f000 fc0a 	bl	800b474 <__lshift>
 800ac60:	9b00      	ldr	r3, [sp, #0]
 800ac62:	3301      	adds	r3, #1
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	9308      	str	r3, [sp, #32]
 800ac6e:	9b02      	ldr	r3, [sp, #8]
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	46b8      	mov	r8, r7
 800ac76:	9306      	str	r3, [sp, #24]
 800ac78:	4607      	mov	r7, r0
 800ac7a:	9b04      	ldr	r3, [sp, #16]
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	4650      	mov	r0, sl
 800ac82:	9301      	str	r3, [sp, #4]
 800ac84:	f7ff fa69 	bl	800a15a <quorem>
 800ac88:	4641      	mov	r1, r8
 800ac8a:	9002      	str	r0, [sp, #8]
 800ac8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ac90:	4650      	mov	r0, sl
 800ac92:	f000 fc5b 	bl	800b54c <__mcmp>
 800ac96:	463a      	mov	r2, r7
 800ac98:	9005      	str	r0, [sp, #20]
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 fc71 	bl	800b584 <__mdiff>
 800aca2:	68c2      	ldr	r2, [r0, #12]
 800aca4:	4605      	mov	r5, r0
 800aca6:	bb02      	cbnz	r2, 800acea <_dtoa_r+0xa7a>
 800aca8:	4601      	mov	r1, r0
 800acaa:	4650      	mov	r0, sl
 800acac:	f000 fc4e 	bl	800b54c <__mcmp>
 800acb0:	4602      	mov	r2, r0
 800acb2:	4629      	mov	r1, r5
 800acb4:	4620      	mov	r0, r4
 800acb6:	9209      	str	r2, [sp, #36]	; 0x24
 800acb8:	f000 fa0c 	bl	800b0d4 <_Bfree>
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acc0:	9d04      	ldr	r5, [sp, #16]
 800acc2:	ea43 0102 	orr.w	r1, r3, r2
 800acc6:	9b06      	ldr	r3, [sp, #24]
 800acc8:	4319      	orrs	r1, r3
 800acca:	d110      	bne.n	800acee <_dtoa_r+0xa7e>
 800accc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800acd0:	d029      	beq.n	800ad26 <_dtoa_r+0xab6>
 800acd2:	9b05      	ldr	r3, [sp, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	dd02      	ble.n	800acde <_dtoa_r+0xa6e>
 800acd8:	9b02      	ldr	r3, [sp, #8]
 800acda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800acde:	9b01      	ldr	r3, [sp, #4]
 800ace0:	f883 9000 	strb.w	r9, [r3]
 800ace4:	e774      	b.n	800abd0 <_dtoa_r+0x960>
 800ace6:	4638      	mov	r0, r7
 800ace8:	e7ba      	b.n	800ac60 <_dtoa_r+0x9f0>
 800acea:	2201      	movs	r2, #1
 800acec:	e7e1      	b.n	800acb2 <_dtoa_r+0xa42>
 800acee:	9b05      	ldr	r3, [sp, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	db04      	blt.n	800acfe <_dtoa_r+0xa8e>
 800acf4:	9907      	ldr	r1, [sp, #28]
 800acf6:	430b      	orrs	r3, r1
 800acf8:	9906      	ldr	r1, [sp, #24]
 800acfa:	430b      	orrs	r3, r1
 800acfc:	d120      	bne.n	800ad40 <_dtoa_r+0xad0>
 800acfe:	2a00      	cmp	r2, #0
 800ad00:	dded      	ble.n	800acde <_dtoa_r+0xa6e>
 800ad02:	4651      	mov	r1, sl
 800ad04:	2201      	movs	r2, #1
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 fbb4 	bl	800b474 <__lshift>
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	4682      	mov	sl, r0
 800ad10:	f000 fc1c 	bl	800b54c <__mcmp>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	dc03      	bgt.n	800ad20 <_dtoa_r+0xab0>
 800ad18:	d1e1      	bne.n	800acde <_dtoa_r+0xa6e>
 800ad1a:	f019 0f01 	tst.w	r9, #1
 800ad1e:	d0de      	beq.n	800acde <_dtoa_r+0xa6e>
 800ad20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad24:	d1d8      	bne.n	800acd8 <_dtoa_r+0xa68>
 800ad26:	9a01      	ldr	r2, [sp, #4]
 800ad28:	2339      	movs	r3, #57	; 0x39
 800ad2a:	7013      	strb	r3, [r2, #0]
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	461d      	mov	r5, r3
 800ad30:	3b01      	subs	r3, #1
 800ad32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad36:	2a39      	cmp	r2, #57	; 0x39
 800ad38:	d06c      	beq.n	800ae14 <_dtoa_r+0xba4>
 800ad3a:	3201      	adds	r2, #1
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	e747      	b.n	800abd0 <_dtoa_r+0x960>
 800ad40:	2a00      	cmp	r2, #0
 800ad42:	dd07      	ble.n	800ad54 <_dtoa_r+0xae4>
 800ad44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad48:	d0ed      	beq.n	800ad26 <_dtoa_r+0xab6>
 800ad4a:	9a01      	ldr	r2, [sp, #4]
 800ad4c:	f109 0301 	add.w	r3, r9, #1
 800ad50:	7013      	strb	r3, [r2, #0]
 800ad52:	e73d      	b.n	800abd0 <_dtoa_r+0x960>
 800ad54:	9b04      	ldr	r3, [sp, #16]
 800ad56:	9a08      	ldr	r2, [sp, #32]
 800ad58:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d043      	beq.n	800ade8 <_dtoa_r+0xb78>
 800ad60:	4651      	mov	r1, sl
 800ad62:	2300      	movs	r3, #0
 800ad64:	220a      	movs	r2, #10
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 f9d6 	bl	800b118 <__multadd>
 800ad6c:	45b8      	cmp	r8, r7
 800ad6e:	4682      	mov	sl, r0
 800ad70:	f04f 0300 	mov.w	r3, #0
 800ad74:	f04f 020a 	mov.w	r2, #10
 800ad78:	4641      	mov	r1, r8
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	d107      	bne.n	800ad8e <_dtoa_r+0xb1e>
 800ad7e:	f000 f9cb 	bl	800b118 <__multadd>
 800ad82:	4680      	mov	r8, r0
 800ad84:	4607      	mov	r7, r0
 800ad86:	9b04      	ldr	r3, [sp, #16]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	9304      	str	r3, [sp, #16]
 800ad8c:	e775      	b.n	800ac7a <_dtoa_r+0xa0a>
 800ad8e:	f000 f9c3 	bl	800b118 <__multadd>
 800ad92:	4639      	mov	r1, r7
 800ad94:	4680      	mov	r8, r0
 800ad96:	2300      	movs	r3, #0
 800ad98:	220a      	movs	r2, #10
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 f9bc 	bl	800b118 <__multadd>
 800ada0:	4607      	mov	r7, r0
 800ada2:	e7f0      	b.n	800ad86 <_dtoa_r+0xb16>
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	9d00      	ldr	r5, [sp, #0]
 800adaa:	4631      	mov	r1, r6
 800adac:	4650      	mov	r0, sl
 800adae:	f7ff f9d4 	bl	800a15a <quorem>
 800adb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800adb6:	9b00      	ldr	r3, [sp, #0]
 800adb8:	f805 9b01 	strb.w	r9, [r5], #1
 800adbc:	1aea      	subs	r2, r5, r3
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	4293      	cmp	r3, r2
 800adc2:	dd07      	ble.n	800add4 <_dtoa_r+0xb64>
 800adc4:	4651      	mov	r1, sl
 800adc6:	2300      	movs	r3, #0
 800adc8:	220a      	movs	r2, #10
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 f9a4 	bl	800b118 <__multadd>
 800add0:	4682      	mov	sl, r0
 800add2:	e7ea      	b.n	800adaa <_dtoa_r+0xb3a>
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfc8      	it	gt
 800adda:	461d      	movgt	r5, r3
 800addc:	9b00      	ldr	r3, [sp, #0]
 800adde:	bfd8      	it	le
 800ade0:	2501      	movle	r5, #1
 800ade2:	441d      	add	r5, r3
 800ade4:	f04f 0800 	mov.w	r8, #0
 800ade8:	4651      	mov	r1, sl
 800adea:	2201      	movs	r2, #1
 800adec:	4620      	mov	r0, r4
 800adee:	f000 fb41 	bl	800b474 <__lshift>
 800adf2:	4631      	mov	r1, r6
 800adf4:	4682      	mov	sl, r0
 800adf6:	f000 fba9 	bl	800b54c <__mcmp>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	dc96      	bgt.n	800ad2c <_dtoa_r+0xabc>
 800adfe:	d102      	bne.n	800ae06 <_dtoa_r+0xb96>
 800ae00:	f019 0f01 	tst.w	r9, #1
 800ae04:	d192      	bne.n	800ad2c <_dtoa_r+0xabc>
 800ae06:	462b      	mov	r3, r5
 800ae08:	461d      	mov	r5, r3
 800ae0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae0e:	2a30      	cmp	r2, #48	; 0x30
 800ae10:	d0fa      	beq.n	800ae08 <_dtoa_r+0xb98>
 800ae12:	e6dd      	b.n	800abd0 <_dtoa_r+0x960>
 800ae14:	9a00      	ldr	r2, [sp, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d189      	bne.n	800ad2e <_dtoa_r+0xabe>
 800ae1a:	f10b 0b01 	add.w	fp, fp, #1
 800ae1e:	2331      	movs	r3, #49	; 0x31
 800ae20:	e796      	b.n	800ad50 <_dtoa_r+0xae0>
 800ae22:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <_dtoa_r+0xbdc>)
 800ae24:	f7ff ba99 	b.w	800a35a <_dtoa_r+0xea>
 800ae28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f47f aa6d 	bne.w	800a30a <_dtoa_r+0x9a>
 800ae30:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <_dtoa_r+0xbe0>)
 800ae32:	f7ff ba92 	b.w	800a35a <_dtoa_r+0xea>
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dcb5      	bgt.n	800ada8 <_dtoa_r+0xb38>
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	f73f aeb1 	bgt.w	800aba6 <_dtoa_r+0x936>
 800ae44:	e7b0      	b.n	800ada8 <_dtoa_r+0xb38>
 800ae46:	bf00      	nop
 800ae48:	0800d21c 	.word	0x0800d21c
 800ae4c:	0800d17c 	.word	0x0800d17c
 800ae50:	0800d1a0 	.word	0x0800d1a0

0800ae54 <_free_r>:
 800ae54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d044      	beq.n	800aee4 <_free_r+0x90>
 800ae5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae5e:	9001      	str	r0, [sp, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f1a1 0404 	sub.w	r4, r1, #4
 800ae66:	bfb8      	it	lt
 800ae68:	18e4      	addlt	r4, r4, r3
 800ae6a:	f000 f8e7 	bl	800b03c <__malloc_lock>
 800ae6e:	4a1e      	ldr	r2, [pc, #120]	; (800aee8 <_free_r+0x94>)
 800ae70:	9801      	ldr	r0, [sp, #4]
 800ae72:	6813      	ldr	r3, [r2, #0]
 800ae74:	b933      	cbnz	r3, 800ae84 <_free_r+0x30>
 800ae76:	6063      	str	r3, [r4, #4]
 800ae78:	6014      	str	r4, [r2, #0]
 800ae7a:	b003      	add	sp, #12
 800ae7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae80:	f000 b8e2 	b.w	800b048 <__malloc_unlock>
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d908      	bls.n	800ae9a <_free_r+0x46>
 800ae88:	6825      	ldr	r5, [r4, #0]
 800ae8a:	1961      	adds	r1, r4, r5
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	bf01      	itttt	eq
 800ae90:	6819      	ldreq	r1, [r3, #0]
 800ae92:	685b      	ldreq	r3, [r3, #4]
 800ae94:	1949      	addeq	r1, r1, r5
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	e7ed      	b.n	800ae76 <_free_r+0x22>
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	b10b      	cbz	r3, 800aea4 <_free_r+0x50>
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d9fa      	bls.n	800ae9a <_free_r+0x46>
 800aea4:	6811      	ldr	r1, [r2, #0]
 800aea6:	1855      	adds	r5, r2, r1
 800aea8:	42a5      	cmp	r5, r4
 800aeaa:	d10b      	bne.n	800aec4 <_free_r+0x70>
 800aeac:	6824      	ldr	r4, [r4, #0]
 800aeae:	4421      	add	r1, r4
 800aeb0:	1854      	adds	r4, r2, r1
 800aeb2:	42a3      	cmp	r3, r4
 800aeb4:	6011      	str	r1, [r2, #0]
 800aeb6:	d1e0      	bne.n	800ae7a <_free_r+0x26>
 800aeb8:	681c      	ldr	r4, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	6053      	str	r3, [r2, #4]
 800aebe:	440c      	add	r4, r1
 800aec0:	6014      	str	r4, [r2, #0]
 800aec2:	e7da      	b.n	800ae7a <_free_r+0x26>
 800aec4:	d902      	bls.n	800aecc <_free_r+0x78>
 800aec6:	230c      	movs	r3, #12
 800aec8:	6003      	str	r3, [r0, #0]
 800aeca:	e7d6      	b.n	800ae7a <_free_r+0x26>
 800aecc:	6825      	ldr	r5, [r4, #0]
 800aece:	1961      	adds	r1, r4, r5
 800aed0:	428b      	cmp	r3, r1
 800aed2:	bf04      	itt	eq
 800aed4:	6819      	ldreq	r1, [r3, #0]
 800aed6:	685b      	ldreq	r3, [r3, #4]
 800aed8:	6063      	str	r3, [r4, #4]
 800aeda:	bf04      	itt	eq
 800aedc:	1949      	addeq	r1, r1, r5
 800aede:	6021      	streq	r1, [r4, #0]
 800aee0:	6054      	str	r4, [r2, #4]
 800aee2:	e7ca      	b.n	800ae7a <_free_r+0x26>
 800aee4:	b003      	add	sp, #12
 800aee6:	bd30      	pop	{r4, r5, pc}
 800aee8:	20002154 	.word	0x20002154

0800aeec <malloc>:
 800aeec:	4b02      	ldr	r3, [pc, #8]	; (800aef8 <malloc+0xc>)
 800aeee:	4601      	mov	r1, r0
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	f000 b823 	b.w	800af3c <_malloc_r>
 800aef6:	bf00      	nop
 800aef8:	20000154 	.word	0x20000154

0800aefc <sbrk_aligned>:
 800aefc:	b570      	push	{r4, r5, r6, lr}
 800aefe:	4e0e      	ldr	r6, [pc, #56]	; (800af38 <sbrk_aligned+0x3c>)
 800af00:	460c      	mov	r4, r1
 800af02:	6831      	ldr	r1, [r6, #0]
 800af04:	4605      	mov	r5, r0
 800af06:	b911      	cbnz	r1, 800af0e <sbrk_aligned+0x12>
 800af08:	f000 fe40 	bl	800bb8c <_sbrk_r>
 800af0c:	6030      	str	r0, [r6, #0]
 800af0e:	4621      	mov	r1, r4
 800af10:	4628      	mov	r0, r5
 800af12:	f000 fe3b 	bl	800bb8c <_sbrk_r>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	d00a      	beq.n	800af30 <sbrk_aligned+0x34>
 800af1a:	1cc4      	adds	r4, r0, #3
 800af1c:	f024 0403 	bic.w	r4, r4, #3
 800af20:	42a0      	cmp	r0, r4
 800af22:	d007      	beq.n	800af34 <sbrk_aligned+0x38>
 800af24:	1a21      	subs	r1, r4, r0
 800af26:	4628      	mov	r0, r5
 800af28:	f000 fe30 	bl	800bb8c <_sbrk_r>
 800af2c:	3001      	adds	r0, #1
 800af2e:	d101      	bne.n	800af34 <sbrk_aligned+0x38>
 800af30:	f04f 34ff 	mov.w	r4, #4294967295
 800af34:	4620      	mov	r0, r4
 800af36:	bd70      	pop	{r4, r5, r6, pc}
 800af38:	20002158 	.word	0x20002158

0800af3c <_malloc_r>:
 800af3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af40:	1ccd      	adds	r5, r1, #3
 800af42:	f025 0503 	bic.w	r5, r5, #3
 800af46:	3508      	adds	r5, #8
 800af48:	2d0c      	cmp	r5, #12
 800af4a:	bf38      	it	cc
 800af4c:	250c      	movcc	r5, #12
 800af4e:	2d00      	cmp	r5, #0
 800af50:	4607      	mov	r7, r0
 800af52:	db01      	blt.n	800af58 <_malloc_r+0x1c>
 800af54:	42a9      	cmp	r1, r5
 800af56:	d905      	bls.n	800af64 <_malloc_r+0x28>
 800af58:	230c      	movs	r3, #12
 800af5a:	603b      	str	r3, [r7, #0]
 800af5c:	2600      	movs	r6, #0
 800af5e:	4630      	mov	r0, r6
 800af60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b038 <_malloc_r+0xfc>
 800af68:	f000 f868 	bl	800b03c <__malloc_lock>
 800af6c:	f8d8 3000 	ldr.w	r3, [r8]
 800af70:	461c      	mov	r4, r3
 800af72:	bb5c      	cbnz	r4, 800afcc <_malloc_r+0x90>
 800af74:	4629      	mov	r1, r5
 800af76:	4638      	mov	r0, r7
 800af78:	f7ff ffc0 	bl	800aefc <sbrk_aligned>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	4604      	mov	r4, r0
 800af80:	d155      	bne.n	800b02e <_malloc_r+0xf2>
 800af82:	f8d8 4000 	ldr.w	r4, [r8]
 800af86:	4626      	mov	r6, r4
 800af88:	2e00      	cmp	r6, #0
 800af8a:	d145      	bne.n	800b018 <_malloc_r+0xdc>
 800af8c:	2c00      	cmp	r4, #0
 800af8e:	d048      	beq.n	800b022 <_malloc_r+0xe6>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	4631      	mov	r1, r6
 800af94:	4638      	mov	r0, r7
 800af96:	eb04 0903 	add.w	r9, r4, r3
 800af9a:	f000 fdf7 	bl	800bb8c <_sbrk_r>
 800af9e:	4581      	cmp	r9, r0
 800afa0:	d13f      	bne.n	800b022 <_malloc_r+0xe6>
 800afa2:	6821      	ldr	r1, [r4, #0]
 800afa4:	1a6d      	subs	r5, r5, r1
 800afa6:	4629      	mov	r1, r5
 800afa8:	4638      	mov	r0, r7
 800afaa:	f7ff ffa7 	bl	800aefc <sbrk_aligned>
 800afae:	3001      	adds	r0, #1
 800afb0:	d037      	beq.n	800b022 <_malloc_r+0xe6>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	442b      	add	r3, r5
 800afb6:	6023      	str	r3, [r4, #0]
 800afb8:	f8d8 3000 	ldr.w	r3, [r8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d038      	beq.n	800b032 <_malloc_r+0xf6>
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	42a2      	cmp	r2, r4
 800afc4:	d12b      	bne.n	800b01e <_malloc_r+0xe2>
 800afc6:	2200      	movs	r2, #0
 800afc8:	605a      	str	r2, [r3, #4]
 800afca:	e00f      	b.n	800afec <_malloc_r+0xb0>
 800afcc:	6822      	ldr	r2, [r4, #0]
 800afce:	1b52      	subs	r2, r2, r5
 800afd0:	d41f      	bmi.n	800b012 <_malloc_r+0xd6>
 800afd2:	2a0b      	cmp	r2, #11
 800afd4:	d917      	bls.n	800b006 <_malloc_r+0xca>
 800afd6:	1961      	adds	r1, r4, r5
 800afd8:	42a3      	cmp	r3, r4
 800afda:	6025      	str	r5, [r4, #0]
 800afdc:	bf18      	it	ne
 800afde:	6059      	strne	r1, [r3, #4]
 800afe0:	6863      	ldr	r3, [r4, #4]
 800afe2:	bf08      	it	eq
 800afe4:	f8c8 1000 	streq.w	r1, [r8]
 800afe8:	5162      	str	r2, [r4, r5]
 800afea:	604b      	str	r3, [r1, #4]
 800afec:	4638      	mov	r0, r7
 800afee:	f104 060b 	add.w	r6, r4, #11
 800aff2:	f000 f829 	bl	800b048 <__malloc_unlock>
 800aff6:	f026 0607 	bic.w	r6, r6, #7
 800affa:	1d23      	adds	r3, r4, #4
 800affc:	1af2      	subs	r2, r6, r3
 800affe:	d0ae      	beq.n	800af5e <_malloc_r+0x22>
 800b000:	1b9b      	subs	r3, r3, r6
 800b002:	50a3      	str	r3, [r4, r2]
 800b004:	e7ab      	b.n	800af5e <_malloc_r+0x22>
 800b006:	42a3      	cmp	r3, r4
 800b008:	6862      	ldr	r2, [r4, #4]
 800b00a:	d1dd      	bne.n	800afc8 <_malloc_r+0x8c>
 800b00c:	f8c8 2000 	str.w	r2, [r8]
 800b010:	e7ec      	b.n	800afec <_malloc_r+0xb0>
 800b012:	4623      	mov	r3, r4
 800b014:	6864      	ldr	r4, [r4, #4]
 800b016:	e7ac      	b.n	800af72 <_malloc_r+0x36>
 800b018:	4634      	mov	r4, r6
 800b01a:	6876      	ldr	r6, [r6, #4]
 800b01c:	e7b4      	b.n	800af88 <_malloc_r+0x4c>
 800b01e:	4613      	mov	r3, r2
 800b020:	e7cc      	b.n	800afbc <_malloc_r+0x80>
 800b022:	230c      	movs	r3, #12
 800b024:	603b      	str	r3, [r7, #0]
 800b026:	4638      	mov	r0, r7
 800b028:	f000 f80e 	bl	800b048 <__malloc_unlock>
 800b02c:	e797      	b.n	800af5e <_malloc_r+0x22>
 800b02e:	6025      	str	r5, [r4, #0]
 800b030:	e7dc      	b.n	800afec <_malloc_r+0xb0>
 800b032:	605b      	str	r3, [r3, #4]
 800b034:	deff      	udf	#255	; 0xff
 800b036:	bf00      	nop
 800b038:	20002154 	.word	0x20002154

0800b03c <__malloc_lock>:
 800b03c:	4801      	ldr	r0, [pc, #4]	; (800b044 <__malloc_lock+0x8>)
 800b03e:	f7ff b88a 	b.w	800a156 <__retarget_lock_acquire_recursive>
 800b042:	bf00      	nop
 800b044:	20002150 	.word	0x20002150

0800b048 <__malloc_unlock>:
 800b048:	4801      	ldr	r0, [pc, #4]	; (800b050 <__malloc_unlock+0x8>)
 800b04a:	f7ff b885 	b.w	800a158 <__retarget_lock_release_recursive>
 800b04e:	bf00      	nop
 800b050:	20002150 	.word	0x20002150

0800b054 <_Balloc>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	69c6      	ldr	r6, [r0, #28]
 800b058:	4604      	mov	r4, r0
 800b05a:	460d      	mov	r5, r1
 800b05c:	b976      	cbnz	r6, 800b07c <_Balloc+0x28>
 800b05e:	2010      	movs	r0, #16
 800b060:	f7ff ff44 	bl	800aeec <malloc>
 800b064:	4602      	mov	r2, r0
 800b066:	61e0      	str	r0, [r4, #28]
 800b068:	b920      	cbnz	r0, 800b074 <_Balloc+0x20>
 800b06a:	4b18      	ldr	r3, [pc, #96]	; (800b0cc <_Balloc+0x78>)
 800b06c:	4818      	ldr	r0, [pc, #96]	; (800b0d0 <_Balloc+0x7c>)
 800b06e:	216b      	movs	r1, #107	; 0x6b
 800b070:	f000 fdaa 	bl	800bbc8 <__assert_func>
 800b074:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b078:	6006      	str	r6, [r0, #0]
 800b07a:	60c6      	str	r6, [r0, #12]
 800b07c:	69e6      	ldr	r6, [r4, #28]
 800b07e:	68f3      	ldr	r3, [r6, #12]
 800b080:	b183      	cbz	r3, 800b0a4 <_Balloc+0x50>
 800b082:	69e3      	ldr	r3, [r4, #28]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b08a:	b9b8      	cbnz	r0, 800b0bc <_Balloc+0x68>
 800b08c:	2101      	movs	r1, #1
 800b08e:	fa01 f605 	lsl.w	r6, r1, r5
 800b092:	1d72      	adds	r2, r6, #5
 800b094:	0092      	lsls	r2, r2, #2
 800b096:	4620      	mov	r0, r4
 800b098:	f000 fdb4 	bl	800bc04 <_calloc_r>
 800b09c:	b160      	cbz	r0, 800b0b8 <_Balloc+0x64>
 800b09e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0a2:	e00e      	b.n	800b0c2 <_Balloc+0x6e>
 800b0a4:	2221      	movs	r2, #33	; 0x21
 800b0a6:	2104      	movs	r1, #4
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fdab 	bl	800bc04 <_calloc_r>
 800b0ae:	69e3      	ldr	r3, [r4, #28]
 800b0b0:	60f0      	str	r0, [r6, #12]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e4      	bne.n	800b082 <_Balloc+0x2e>
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}
 800b0bc:	6802      	ldr	r2, [r0, #0]
 800b0be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0c8:	e7f7      	b.n	800b0ba <_Balloc+0x66>
 800b0ca:	bf00      	nop
 800b0cc:	0800d1ad 	.word	0x0800d1ad
 800b0d0:	0800d22d 	.word	0x0800d22d

0800b0d4 <_Bfree>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	69c6      	ldr	r6, [r0, #28]
 800b0d8:	4605      	mov	r5, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	b976      	cbnz	r6, 800b0fc <_Bfree+0x28>
 800b0de:	2010      	movs	r0, #16
 800b0e0:	f7ff ff04 	bl	800aeec <malloc>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	61e8      	str	r0, [r5, #28]
 800b0e8:	b920      	cbnz	r0, 800b0f4 <_Bfree+0x20>
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <_Bfree+0x3c>)
 800b0ec:	4809      	ldr	r0, [pc, #36]	; (800b114 <_Bfree+0x40>)
 800b0ee:	218f      	movs	r1, #143	; 0x8f
 800b0f0:	f000 fd6a 	bl	800bbc8 <__assert_func>
 800b0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0f8:	6006      	str	r6, [r0, #0]
 800b0fa:	60c6      	str	r6, [r0, #12]
 800b0fc:	b13c      	cbz	r4, 800b10e <_Bfree+0x3a>
 800b0fe:	69eb      	ldr	r3, [r5, #28]
 800b100:	6862      	ldr	r2, [r4, #4]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b108:	6021      	str	r1, [r4, #0]
 800b10a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	0800d1ad 	.word	0x0800d1ad
 800b114:	0800d22d 	.word	0x0800d22d

0800b118 <__multadd>:
 800b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	690d      	ldr	r5, [r1, #16]
 800b11e:	4607      	mov	r7, r0
 800b120:	460c      	mov	r4, r1
 800b122:	461e      	mov	r6, r3
 800b124:	f101 0c14 	add.w	ip, r1, #20
 800b128:	2000      	movs	r0, #0
 800b12a:	f8dc 3000 	ldr.w	r3, [ip]
 800b12e:	b299      	uxth	r1, r3
 800b130:	fb02 6101 	mla	r1, r2, r1, r6
 800b134:	0c1e      	lsrs	r6, r3, #16
 800b136:	0c0b      	lsrs	r3, r1, #16
 800b138:	fb02 3306 	mla	r3, r2, r6, r3
 800b13c:	b289      	uxth	r1, r1
 800b13e:	3001      	adds	r0, #1
 800b140:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b144:	4285      	cmp	r5, r0
 800b146:	f84c 1b04 	str.w	r1, [ip], #4
 800b14a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b14e:	dcec      	bgt.n	800b12a <__multadd+0x12>
 800b150:	b30e      	cbz	r6, 800b196 <__multadd+0x7e>
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	42ab      	cmp	r3, r5
 800b156:	dc19      	bgt.n	800b18c <__multadd+0x74>
 800b158:	6861      	ldr	r1, [r4, #4]
 800b15a:	4638      	mov	r0, r7
 800b15c:	3101      	adds	r1, #1
 800b15e:	f7ff ff79 	bl	800b054 <_Balloc>
 800b162:	4680      	mov	r8, r0
 800b164:	b928      	cbnz	r0, 800b172 <__multadd+0x5a>
 800b166:	4602      	mov	r2, r0
 800b168:	4b0c      	ldr	r3, [pc, #48]	; (800b19c <__multadd+0x84>)
 800b16a:	480d      	ldr	r0, [pc, #52]	; (800b1a0 <__multadd+0x88>)
 800b16c:	21ba      	movs	r1, #186	; 0xba
 800b16e:	f000 fd2b 	bl	800bbc8 <__assert_func>
 800b172:	6922      	ldr	r2, [r4, #16]
 800b174:	3202      	adds	r2, #2
 800b176:	f104 010c 	add.w	r1, r4, #12
 800b17a:	0092      	lsls	r2, r2, #2
 800b17c:	300c      	adds	r0, #12
 800b17e:	f000 fd15 	bl	800bbac <memcpy>
 800b182:	4621      	mov	r1, r4
 800b184:	4638      	mov	r0, r7
 800b186:	f7ff ffa5 	bl	800b0d4 <_Bfree>
 800b18a:	4644      	mov	r4, r8
 800b18c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b190:	3501      	adds	r5, #1
 800b192:	615e      	str	r6, [r3, #20]
 800b194:	6125      	str	r5, [r4, #16]
 800b196:	4620      	mov	r0, r4
 800b198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b19c:	0800d21c 	.word	0x0800d21c
 800b1a0:	0800d22d 	.word	0x0800d22d

0800b1a4 <__hi0bits>:
 800b1a4:	0c03      	lsrs	r3, r0, #16
 800b1a6:	041b      	lsls	r3, r3, #16
 800b1a8:	b9d3      	cbnz	r3, 800b1e0 <__hi0bits+0x3c>
 800b1aa:	0400      	lsls	r0, r0, #16
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1b2:	bf04      	itt	eq
 800b1b4:	0200      	lsleq	r0, r0, #8
 800b1b6:	3308      	addeq	r3, #8
 800b1b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1bc:	bf04      	itt	eq
 800b1be:	0100      	lsleq	r0, r0, #4
 800b1c0:	3304      	addeq	r3, #4
 800b1c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1c6:	bf04      	itt	eq
 800b1c8:	0080      	lsleq	r0, r0, #2
 800b1ca:	3302      	addeq	r3, #2
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	db05      	blt.n	800b1dc <__hi0bits+0x38>
 800b1d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1d4:	f103 0301 	add.w	r3, r3, #1
 800b1d8:	bf08      	it	eq
 800b1da:	2320      	moveq	r3, #32
 800b1dc:	4618      	mov	r0, r3
 800b1de:	4770      	bx	lr
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	e7e4      	b.n	800b1ae <__hi0bits+0xa>

0800b1e4 <__lo0bits>:
 800b1e4:	6803      	ldr	r3, [r0, #0]
 800b1e6:	f013 0207 	ands.w	r2, r3, #7
 800b1ea:	d00c      	beq.n	800b206 <__lo0bits+0x22>
 800b1ec:	07d9      	lsls	r1, r3, #31
 800b1ee:	d422      	bmi.n	800b236 <__lo0bits+0x52>
 800b1f0:	079a      	lsls	r2, r3, #30
 800b1f2:	bf49      	itett	mi
 800b1f4:	085b      	lsrmi	r3, r3, #1
 800b1f6:	089b      	lsrpl	r3, r3, #2
 800b1f8:	6003      	strmi	r3, [r0, #0]
 800b1fa:	2201      	movmi	r2, #1
 800b1fc:	bf5c      	itt	pl
 800b1fe:	6003      	strpl	r3, [r0, #0]
 800b200:	2202      	movpl	r2, #2
 800b202:	4610      	mov	r0, r2
 800b204:	4770      	bx	lr
 800b206:	b299      	uxth	r1, r3
 800b208:	b909      	cbnz	r1, 800b20e <__lo0bits+0x2a>
 800b20a:	0c1b      	lsrs	r3, r3, #16
 800b20c:	2210      	movs	r2, #16
 800b20e:	b2d9      	uxtb	r1, r3
 800b210:	b909      	cbnz	r1, 800b216 <__lo0bits+0x32>
 800b212:	3208      	adds	r2, #8
 800b214:	0a1b      	lsrs	r3, r3, #8
 800b216:	0719      	lsls	r1, r3, #28
 800b218:	bf04      	itt	eq
 800b21a:	091b      	lsreq	r3, r3, #4
 800b21c:	3204      	addeq	r2, #4
 800b21e:	0799      	lsls	r1, r3, #30
 800b220:	bf04      	itt	eq
 800b222:	089b      	lsreq	r3, r3, #2
 800b224:	3202      	addeq	r2, #2
 800b226:	07d9      	lsls	r1, r3, #31
 800b228:	d403      	bmi.n	800b232 <__lo0bits+0x4e>
 800b22a:	085b      	lsrs	r3, r3, #1
 800b22c:	f102 0201 	add.w	r2, r2, #1
 800b230:	d003      	beq.n	800b23a <__lo0bits+0x56>
 800b232:	6003      	str	r3, [r0, #0]
 800b234:	e7e5      	b.n	800b202 <__lo0bits+0x1e>
 800b236:	2200      	movs	r2, #0
 800b238:	e7e3      	b.n	800b202 <__lo0bits+0x1e>
 800b23a:	2220      	movs	r2, #32
 800b23c:	e7e1      	b.n	800b202 <__lo0bits+0x1e>
	...

0800b240 <__i2b>:
 800b240:	b510      	push	{r4, lr}
 800b242:	460c      	mov	r4, r1
 800b244:	2101      	movs	r1, #1
 800b246:	f7ff ff05 	bl	800b054 <_Balloc>
 800b24a:	4602      	mov	r2, r0
 800b24c:	b928      	cbnz	r0, 800b25a <__i2b+0x1a>
 800b24e:	4b05      	ldr	r3, [pc, #20]	; (800b264 <__i2b+0x24>)
 800b250:	4805      	ldr	r0, [pc, #20]	; (800b268 <__i2b+0x28>)
 800b252:	f240 1145 	movw	r1, #325	; 0x145
 800b256:	f000 fcb7 	bl	800bbc8 <__assert_func>
 800b25a:	2301      	movs	r3, #1
 800b25c:	6144      	str	r4, [r0, #20]
 800b25e:	6103      	str	r3, [r0, #16]
 800b260:	bd10      	pop	{r4, pc}
 800b262:	bf00      	nop
 800b264:	0800d21c 	.word	0x0800d21c
 800b268:	0800d22d 	.word	0x0800d22d

0800b26c <__multiply>:
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	4691      	mov	r9, r2
 800b272:	690a      	ldr	r2, [r1, #16]
 800b274:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b278:	429a      	cmp	r2, r3
 800b27a:	bfb8      	it	lt
 800b27c:	460b      	movlt	r3, r1
 800b27e:	460c      	mov	r4, r1
 800b280:	bfbc      	itt	lt
 800b282:	464c      	movlt	r4, r9
 800b284:	4699      	movlt	r9, r3
 800b286:	6927      	ldr	r7, [r4, #16]
 800b288:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b28c:	68a3      	ldr	r3, [r4, #8]
 800b28e:	6861      	ldr	r1, [r4, #4]
 800b290:	eb07 060a 	add.w	r6, r7, sl
 800b294:	42b3      	cmp	r3, r6
 800b296:	b085      	sub	sp, #20
 800b298:	bfb8      	it	lt
 800b29a:	3101      	addlt	r1, #1
 800b29c:	f7ff feda 	bl	800b054 <_Balloc>
 800b2a0:	b930      	cbnz	r0, 800b2b0 <__multiply+0x44>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	4b44      	ldr	r3, [pc, #272]	; (800b3b8 <__multiply+0x14c>)
 800b2a6:	4845      	ldr	r0, [pc, #276]	; (800b3bc <__multiply+0x150>)
 800b2a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b2ac:	f000 fc8c 	bl	800bbc8 <__assert_func>
 800b2b0:	f100 0514 	add.w	r5, r0, #20
 800b2b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4543      	cmp	r3, r8
 800b2be:	d321      	bcc.n	800b304 <__multiply+0x98>
 800b2c0:	f104 0314 	add.w	r3, r4, #20
 800b2c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b2c8:	f109 0314 	add.w	r3, r9, #20
 800b2cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b2d0:	9202      	str	r2, [sp, #8]
 800b2d2:	1b3a      	subs	r2, r7, r4
 800b2d4:	3a15      	subs	r2, #21
 800b2d6:	f022 0203 	bic.w	r2, r2, #3
 800b2da:	3204      	adds	r2, #4
 800b2dc:	f104 0115 	add.w	r1, r4, #21
 800b2e0:	428f      	cmp	r7, r1
 800b2e2:	bf38      	it	cc
 800b2e4:	2204      	movcc	r2, #4
 800b2e6:	9201      	str	r2, [sp, #4]
 800b2e8:	9a02      	ldr	r2, [sp, #8]
 800b2ea:	9303      	str	r3, [sp, #12]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d80c      	bhi.n	800b30a <__multiply+0x9e>
 800b2f0:	2e00      	cmp	r6, #0
 800b2f2:	dd03      	ble.n	800b2fc <__multiply+0x90>
 800b2f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d05b      	beq.n	800b3b4 <__multiply+0x148>
 800b2fc:	6106      	str	r6, [r0, #16]
 800b2fe:	b005      	add	sp, #20
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	f843 2b04 	str.w	r2, [r3], #4
 800b308:	e7d8      	b.n	800b2bc <__multiply+0x50>
 800b30a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b30e:	f1ba 0f00 	cmp.w	sl, #0
 800b312:	d024      	beq.n	800b35e <__multiply+0xf2>
 800b314:	f104 0e14 	add.w	lr, r4, #20
 800b318:	46a9      	mov	r9, r5
 800b31a:	f04f 0c00 	mov.w	ip, #0
 800b31e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b322:	f8d9 1000 	ldr.w	r1, [r9]
 800b326:	fa1f fb82 	uxth.w	fp, r2
 800b32a:	b289      	uxth	r1, r1
 800b32c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b330:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b334:	f8d9 2000 	ldr.w	r2, [r9]
 800b338:	4461      	add	r1, ip
 800b33a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b33e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b342:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b346:	b289      	uxth	r1, r1
 800b348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b34c:	4577      	cmp	r7, lr
 800b34e:	f849 1b04 	str.w	r1, [r9], #4
 800b352:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b356:	d8e2      	bhi.n	800b31e <__multiply+0xb2>
 800b358:	9a01      	ldr	r2, [sp, #4]
 800b35a:	f845 c002 	str.w	ip, [r5, r2]
 800b35e:	9a03      	ldr	r2, [sp, #12]
 800b360:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b364:	3304      	adds	r3, #4
 800b366:	f1b9 0f00 	cmp.w	r9, #0
 800b36a:	d021      	beq.n	800b3b0 <__multiply+0x144>
 800b36c:	6829      	ldr	r1, [r5, #0]
 800b36e:	f104 0c14 	add.w	ip, r4, #20
 800b372:	46ae      	mov	lr, r5
 800b374:	f04f 0a00 	mov.w	sl, #0
 800b378:	f8bc b000 	ldrh.w	fp, [ip]
 800b37c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b380:	fb09 220b 	mla	r2, r9, fp, r2
 800b384:	4452      	add	r2, sl
 800b386:	b289      	uxth	r1, r1
 800b388:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b38c:	f84e 1b04 	str.w	r1, [lr], #4
 800b390:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b394:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b398:	f8be 1000 	ldrh.w	r1, [lr]
 800b39c:	fb09 110a 	mla	r1, r9, sl, r1
 800b3a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b3a4:	4567      	cmp	r7, ip
 800b3a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b3aa:	d8e5      	bhi.n	800b378 <__multiply+0x10c>
 800b3ac:	9a01      	ldr	r2, [sp, #4]
 800b3ae:	50a9      	str	r1, [r5, r2]
 800b3b0:	3504      	adds	r5, #4
 800b3b2:	e799      	b.n	800b2e8 <__multiply+0x7c>
 800b3b4:	3e01      	subs	r6, #1
 800b3b6:	e79b      	b.n	800b2f0 <__multiply+0x84>
 800b3b8:	0800d21c 	.word	0x0800d21c
 800b3bc:	0800d22d 	.word	0x0800d22d

0800b3c0 <__pow5mult>:
 800b3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c4:	4615      	mov	r5, r2
 800b3c6:	f012 0203 	ands.w	r2, r2, #3
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	460f      	mov	r7, r1
 800b3ce:	d007      	beq.n	800b3e0 <__pow5mult+0x20>
 800b3d0:	4c25      	ldr	r4, [pc, #148]	; (800b468 <__pow5mult+0xa8>)
 800b3d2:	3a01      	subs	r2, #1
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3da:	f7ff fe9d 	bl	800b118 <__multadd>
 800b3de:	4607      	mov	r7, r0
 800b3e0:	10ad      	asrs	r5, r5, #2
 800b3e2:	d03d      	beq.n	800b460 <__pow5mult+0xa0>
 800b3e4:	69f4      	ldr	r4, [r6, #28]
 800b3e6:	b97c      	cbnz	r4, 800b408 <__pow5mult+0x48>
 800b3e8:	2010      	movs	r0, #16
 800b3ea:	f7ff fd7f 	bl	800aeec <malloc>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	61f0      	str	r0, [r6, #28]
 800b3f2:	b928      	cbnz	r0, 800b400 <__pow5mult+0x40>
 800b3f4:	4b1d      	ldr	r3, [pc, #116]	; (800b46c <__pow5mult+0xac>)
 800b3f6:	481e      	ldr	r0, [pc, #120]	; (800b470 <__pow5mult+0xb0>)
 800b3f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b3fc:	f000 fbe4 	bl	800bbc8 <__assert_func>
 800b400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b404:	6004      	str	r4, [r0, #0]
 800b406:	60c4      	str	r4, [r0, #12]
 800b408:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b410:	b94c      	cbnz	r4, 800b426 <__pow5mult+0x66>
 800b412:	f240 2171 	movw	r1, #625	; 0x271
 800b416:	4630      	mov	r0, r6
 800b418:	f7ff ff12 	bl	800b240 <__i2b>
 800b41c:	2300      	movs	r3, #0
 800b41e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b422:	4604      	mov	r4, r0
 800b424:	6003      	str	r3, [r0, #0]
 800b426:	f04f 0900 	mov.w	r9, #0
 800b42a:	07eb      	lsls	r3, r5, #31
 800b42c:	d50a      	bpl.n	800b444 <__pow5mult+0x84>
 800b42e:	4639      	mov	r1, r7
 800b430:	4622      	mov	r2, r4
 800b432:	4630      	mov	r0, r6
 800b434:	f7ff ff1a 	bl	800b26c <__multiply>
 800b438:	4639      	mov	r1, r7
 800b43a:	4680      	mov	r8, r0
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7ff fe49 	bl	800b0d4 <_Bfree>
 800b442:	4647      	mov	r7, r8
 800b444:	106d      	asrs	r5, r5, #1
 800b446:	d00b      	beq.n	800b460 <__pow5mult+0xa0>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	b938      	cbnz	r0, 800b45c <__pow5mult+0x9c>
 800b44c:	4622      	mov	r2, r4
 800b44e:	4621      	mov	r1, r4
 800b450:	4630      	mov	r0, r6
 800b452:	f7ff ff0b 	bl	800b26c <__multiply>
 800b456:	6020      	str	r0, [r4, #0]
 800b458:	f8c0 9000 	str.w	r9, [r0]
 800b45c:	4604      	mov	r4, r0
 800b45e:	e7e4      	b.n	800b42a <__pow5mult+0x6a>
 800b460:	4638      	mov	r0, r7
 800b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b466:	bf00      	nop
 800b468:	0800d378 	.word	0x0800d378
 800b46c:	0800d1ad 	.word	0x0800d1ad
 800b470:	0800d22d 	.word	0x0800d22d

0800b474 <__lshift>:
 800b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	460c      	mov	r4, r1
 800b47a:	6849      	ldr	r1, [r1, #4]
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	4607      	mov	r7, r0
 800b486:	4691      	mov	r9, r2
 800b488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b48c:	f108 0601 	add.w	r6, r8, #1
 800b490:	42b3      	cmp	r3, r6
 800b492:	db0b      	blt.n	800b4ac <__lshift+0x38>
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff fddd 	bl	800b054 <_Balloc>
 800b49a:	4605      	mov	r5, r0
 800b49c:	b948      	cbnz	r0, 800b4b2 <__lshift+0x3e>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	4b28      	ldr	r3, [pc, #160]	; (800b544 <__lshift+0xd0>)
 800b4a2:	4829      	ldr	r0, [pc, #164]	; (800b548 <__lshift+0xd4>)
 800b4a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b4a8:	f000 fb8e 	bl	800bbc8 <__assert_func>
 800b4ac:	3101      	adds	r1, #1
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	e7ee      	b.n	800b490 <__lshift+0x1c>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f100 0114 	add.w	r1, r0, #20
 800b4b8:	f100 0210 	add.w	r2, r0, #16
 800b4bc:	4618      	mov	r0, r3
 800b4be:	4553      	cmp	r3, sl
 800b4c0:	db33      	blt.n	800b52a <__lshift+0xb6>
 800b4c2:	6920      	ldr	r0, [r4, #16]
 800b4c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4c8:	f104 0314 	add.w	r3, r4, #20
 800b4cc:	f019 091f 	ands.w	r9, r9, #31
 800b4d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4d8:	d02b      	beq.n	800b532 <__lshift+0xbe>
 800b4da:	f1c9 0e20 	rsb	lr, r9, #32
 800b4de:	468a      	mov	sl, r1
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	fa00 f009 	lsl.w	r0, r0, r9
 800b4e8:	4310      	orrs	r0, r2
 800b4ea:	f84a 0b04 	str.w	r0, [sl], #4
 800b4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f2:	459c      	cmp	ip, r3
 800b4f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4f8:	d8f3      	bhi.n	800b4e2 <__lshift+0x6e>
 800b4fa:	ebac 0304 	sub.w	r3, ip, r4
 800b4fe:	3b15      	subs	r3, #21
 800b500:	f023 0303 	bic.w	r3, r3, #3
 800b504:	3304      	adds	r3, #4
 800b506:	f104 0015 	add.w	r0, r4, #21
 800b50a:	4584      	cmp	ip, r0
 800b50c:	bf38      	it	cc
 800b50e:	2304      	movcc	r3, #4
 800b510:	50ca      	str	r2, [r1, r3]
 800b512:	b10a      	cbz	r2, 800b518 <__lshift+0xa4>
 800b514:	f108 0602 	add.w	r6, r8, #2
 800b518:	3e01      	subs	r6, #1
 800b51a:	4638      	mov	r0, r7
 800b51c:	612e      	str	r6, [r5, #16]
 800b51e:	4621      	mov	r1, r4
 800b520:	f7ff fdd8 	bl	800b0d4 <_Bfree>
 800b524:	4628      	mov	r0, r5
 800b526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b52e:	3301      	adds	r3, #1
 800b530:	e7c5      	b.n	800b4be <__lshift+0x4a>
 800b532:	3904      	subs	r1, #4
 800b534:	f853 2b04 	ldr.w	r2, [r3], #4
 800b538:	f841 2f04 	str.w	r2, [r1, #4]!
 800b53c:	459c      	cmp	ip, r3
 800b53e:	d8f9      	bhi.n	800b534 <__lshift+0xc0>
 800b540:	e7ea      	b.n	800b518 <__lshift+0xa4>
 800b542:	bf00      	nop
 800b544:	0800d21c 	.word	0x0800d21c
 800b548:	0800d22d 	.word	0x0800d22d

0800b54c <__mcmp>:
 800b54c:	b530      	push	{r4, r5, lr}
 800b54e:	6902      	ldr	r2, [r0, #16]
 800b550:	690c      	ldr	r4, [r1, #16]
 800b552:	1b12      	subs	r2, r2, r4
 800b554:	d10e      	bne.n	800b574 <__mcmp+0x28>
 800b556:	f100 0314 	add.w	r3, r0, #20
 800b55a:	3114      	adds	r1, #20
 800b55c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b560:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b564:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b568:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b56c:	42a5      	cmp	r5, r4
 800b56e:	d003      	beq.n	800b578 <__mcmp+0x2c>
 800b570:	d305      	bcc.n	800b57e <__mcmp+0x32>
 800b572:	2201      	movs	r2, #1
 800b574:	4610      	mov	r0, r2
 800b576:	bd30      	pop	{r4, r5, pc}
 800b578:	4283      	cmp	r3, r0
 800b57a:	d3f3      	bcc.n	800b564 <__mcmp+0x18>
 800b57c:	e7fa      	b.n	800b574 <__mcmp+0x28>
 800b57e:	f04f 32ff 	mov.w	r2, #4294967295
 800b582:	e7f7      	b.n	800b574 <__mcmp+0x28>

0800b584 <__mdiff>:
 800b584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	460c      	mov	r4, r1
 800b58a:	4606      	mov	r6, r0
 800b58c:	4611      	mov	r1, r2
 800b58e:	4620      	mov	r0, r4
 800b590:	4690      	mov	r8, r2
 800b592:	f7ff ffdb 	bl	800b54c <__mcmp>
 800b596:	1e05      	subs	r5, r0, #0
 800b598:	d110      	bne.n	800b5bc <__mdiff+0x38>
 800b59a:	4629      	mov	r1, r5
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff fd59 	bl	800b054 <_Balloc>
 800b5a2:	b930      	cbnz	r0, 800b5b2 <__mdiff+0x2e>
 800b5a4:	4b3a      	ldr	r3, [pc, #232]	; (800b690 <__mdiff+0x10c>)
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	f240 2137 	movw	r1, #567	; 0x237
 800b5ac:	4839      	ldr	r0, [pc, #228]	; (800b694 <__mdiff+0x110>)
 800b5ae:	f000 fb0b 	bl	800bbc8 <__assert_func>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5bc:	bfa4      	itt	ge
 800b5be:	4643      	movge	r3, r8
 800b5c0:	46a0      	movge	r8, r4
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5c8:	bfa6      	itte	ge
 800b5ca:	461c      	movge	r4, r3
 800b5cc:	2500      	movge	r5, #0
 800b5ce:	2501      	movlt	r5, #1
 800b5d0:	f7ff fd40 	bl	800b054 <_Balloc>
 800b5d4:	b920      	cbnz	r0, 800b5e0 <__mdiff+0x5c>
 800b5d6:	4b2e      	ldr	r3, [pc, #184]	; (800b690 <__mdiff+0x10c>)
 800b5d8:	4602      	mov	r2, r0
 800b5da:	f240 2145 	movw	r1, #581	; 0x245
 800b5de:	e7e5      	b.n	800b5ac <__mdiff+0x28>
 800b5e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5e4:	6926      	ldr	r6, [r4, #16]
 800b5e6:	60c5      	str	r5, [r0, #12]
 800b5e8:	f104 0914 	add.w	r9, r4, #20
 800b5ec:	f108 0514 	add.w	r5, r8, #20
 800b5f0:	f100 0e14 	add.w	lr, r0, #20
 800b5f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5fc:	f108 0210 	add.w	r2, r8, #16
 800b600:	46f2      	mov	sl, lr
 800b602:	2100      	movs	r1, #0
 800b604:	f859 3b04 	ldr.w	r3, [r9], #4
 800b608:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b60c:	fa11 f88b 	uxtah	r8, r1, fp
 800b610:	b299      	uxth	r1, r3
 800b612:	0c1b      	lsrs	r3, r3, #16
 800b614:	eba8 0801 	sub.w	r8, r8, r1
 800b618:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b61c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b620:	fa1f f888 	uxth.w	r8, r8
 800b624:	1419      	asrs	r1, r3, #16
 800b626:	454e      	cmp	r6, r9
 800b628:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b62c:	f84a 3b04 	str.w	r3, [sl], #4
 800b630:	d8e8      	bhi.n	800b604 <__mdiff+0x80>
 800b632:	1b33      	subs	r3, r6, r4
 800b634:	3b15      	subs	r3, #21
 800b636:	f023 0303 	bic.w	r3, r3, #3
 800b63a:	3304      	adds	r3, #4
 800b63c:	3415      	adds	r4, #21
 800b63e:	42a6      	cmp	r6, r4
 800b640:	bf38      	it	cc
 800b642:	2304      	movcc	r3, #4
 800b644:	441d      	add	r5, r3
 800b646:	4473      	add	r3, lr
 800b648:	469e      	mov	lr, r3
 800b64a:	462e      	mov	r6, r5
 800b64c:	4566      	cmp	r6, ip
 800b64e:	d30e      	bcc.n	800b66e <__mdiff+0xea>
 800b650:	f10c 0203 	add.w	r2, ip, #3
 800b654:	1b52      	subs	r2, r2, r5
 800b656:	f022 0203 	bic.w	r2, r2, #3
 800b65a:	3d03      	subs	r5, #3
 800b65c:	45ac      	cmp	ip, r5
 800b65e:	bf38      	it	cc
 800b660:	2200      	movcc	r2, #0
 800b662:	4413      	add	r3, r2
 800b664:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b668:	b17a      	cbz	r2, 800b68a <__mdiff+0x106>
 800b66a:	6107      	str	r7, [r0, #16]
 800b66c:	e7a4      	b.n	800b5b8 <__mdiff+0x34>
 800b66e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b672:	fa11 f288 	uxtah	r2, r1, r8
 800b676:	1414      	asrs	r4, r2, #16
 800b678:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b67c:	b292      	uxth	r2, r2
 800b67e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b682:	f84e 2b04 	str.w	r2, [lr], #4
 800b686:	1421      	asrs	r1, r4, #16
 800b688:	e7e0      	b.n	800b64c <__mdiff+0xc8>
 800b68a:	3f01      	subs	r7, #1
 800b68c:	e7ea      	b.n	800b664 <__mdiff+0xe0>
 800b68e:	bf00      	nop
 800b690:	0800d21c 	.word	0x0800d21c
 800b694:	0800d22d 	.word	0x0800d22d

0800b698 <__d2b>:
 800b698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b69c:	460f      	mov	r7, r1
 800b69e:	2101      	movs	r1, #1
 800b6a0:	ec59 8b10 	vmov	r8, r9, d0
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	f7ff fcd5 	bl	800b054 <_Balloc>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	b930      	cbnz	r0, 800b6bc <__d2b+0x24>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	4b24      	ldr	r3, [pc, #144]	; (800b744 <__d2b+0xac>)
 800b6b2:	4825      	ldr	r0, [pc, #148]	; (800b748 <__d2b+0xb0>)
 800b6b4:	f240 310f 	movw	r1, #783	; 0x30f
 800b6b8:	f000 fa86 	bl	800bbc8 <__assert_func>
 800b6bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6c4:	bb2d      	cbnz	r5, 800b712 <__d2b+0x7a>
 800b6c6:	9301      	str	r3, [sp, #4]
 800b6c8:	f1b8 0300 	subs.w	r3, r8, #0
 800b6cc:	d026      	beq.n	800b71c <__d2b+0x84>
 800b6ce:	4668      	mov	r0, sp
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	f7ff fd87 	bl	800b1e4 <__lo0bits>
 800b6d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6da:	b1e8      	cbz	r0, 800b718 <__d2b+0x80>
 800b6dc:	f1c0 0320 	rsb	r3, r0, #32
 800b6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	40c2      	lsrs	r2, r0
 800b6e8:	6163      	str	r3, [r4, #20]
 800b6ea:	9201      	str	r2, [sp, #4]
 800b6ec:	9b01      	ldr	r3, [sp, #4]
 800b6ee:	61a3      	str	r3, [r4, #24]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	bf14      	ite	ne
 800b6f4:	2202      	movne	r2, #2
 800b6f6:	2201      	moveq	r2, #1
 800b6f8:	6122      	str	r2, [r4, #16]
 800b6fa:	b1bd      	cbz	r5, 800b72c <__d2b+0x94>
 800b6fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b700:	4405      	add	r5, r0
 800b702:	603d      	str	r5, [r7, #0]
 800b704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b708:	6030      	str	r0, [r6, #0]
 800b70a:	4620      	mov	r0, r4
 800b70c:	b003      	add	sp, #12
 800b70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b716:	e7d6      	b.n	800b6c6 <__d2b+0x2e>
 800b718:	6161      	str	r1, [r4, #20]
 800b71a:	e7e7      	b.n	800b6ec <__d2b+0x54>
 800b71c:	a801      	add	r0, sp, #4
 800b71e:	f7ff fd61 	bl	800b1e4 <__lo0bits>
 800b722:	9b01      	ldr	r3, [sp, #4]
 800b724:	6163      	str	r3, [r4, #20]
 800b726:	3020      	adds	r0, #32
 800b728:	2201      	movs	r2, #1
 800b72a:	e7e5      	b.n	800b6f8 <__d2b+0x60>
 800b72c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b730:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b734:	6038      	str	r0, [r7, #0]
 800b736:	6918      	ldr	r0, [r3, #16]
 800b738:	f7ff fd34 	bl	800b1a4 <__hi0bits>
 800b73c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b740:	e7e2      	b.n	800b708 <__d2b+0x70>
 800b742:	bf00      	nop
 800b744:	0800d21c 	.word	0x0800d21c
 800b748:	0800d22d 	.word	0x0800d22d

0800b74c <__ssputs_r>:
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	688e      	ldr	r6, [r1, #8]
 800b752:	461f      	mov	r7, r3
 800b754:	42be      	cmp	r6, r7
 800b756:	680b      	ldr	r3, [r1, #0]
 800b758:	4682      	mov	sl, r0
 800b75a:	460c      	mov	r4, r1
 800b75c:	4690      	mov	r8, r2
 800b75e:	d82c      	bhi.n	800b7ba <__ssputs_r+0x6e>
 800b760:	898a      	ldrh	r2, [r1, #12]
 800b762:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b766:	d026      	beq.n	800b7b6 <__ssputs_r+0x6a>
 800b768:	6965      	ldr	r5, [r4, #20]
 800b76a:	6909      	ldr	r1, [r1, #16]
 800b76c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b770:	eba3 0901 	sub.w	r9, r3, r1
 800b774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b778:	1c7b      	adds	r3, r7, #1
 800b77a:	444b      	add	r3, r9
 800b77c:	106d      	asrs	r5, r5, #1
 800b77e:	429d      	cmp	r5, r3
 800b780:	bf38      	it	cc
 800b782:	461d      	movcc	r5, r3
 800b784:	0553      	lsls	r3, r2, #21
 800b786:	d527      	bpl.n	800b7d8 <__ssputs_r+0x8c>
 800b788:	4629      	mov	r1, r5
 800b78a:	f7ff fbd7 	bl	800af3c <_malloc_r>
 800b78e:	4606      	mov	r6, r0
 800b790:	b360      	cbz	r0, 800b7ec <__ssputs_r+0xa0>
 800b792:	6921      	ldr	r1, [r4, #16]
 800b794:	464a      	mov	r2, r9
 800b796:	f000 fa09 	bl	800bbac <memcpy>
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a4:	81a3      	strh	r3, [r4, #12]
 800b7a6:	6126      	str	r6, [r4, #16]
 800b7a8:	6165      	str	r5, [r4, #20]
 800b7aa:	444e      	add	r6, r9
 800b7ac:	eba5 0509 	sub.w	r5, r5, r9
 800b7b0:	6026      	str	r6, [r4, #0]
 800b7b2:	60a5      	str	r5, [r4, #8]
 800b7b4:	463e      	mov	r6, r7
 800b7b6:	42be      	cmp	r6, r7
 800b7b8:	d900      	bls.n	800b7bc <__ssputs_r+0x70>
 800b7ba:	463e      	mov	r6, r7
 800b7bc:	6820      	ldr	r0, [r4, #0]
 800b7be:	4632      	mov	r2, r6
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	f000 f9c9 	bl	800bb58 <memmove>
 800b7c6:	68a3      	ldr	r3, [r4, #8]
 800b7c8:	1b9b      	subs	r3, r3, r6
 800b7ca:	60a3      	str	r3, [r4, #8]
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	4433      	add	r3, r6
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d8:	462a      	mov	r2, r5
 800b7da:	f000 fa3b 	bl	800bc54 <_realloc_r>
 800b7de:	4606      	mov	r6, r0
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d1e0      	bne.n	800b7a6 <__ssputs_r+0x5a>
 800b7e4:	6921      	ldr	r1, [r4, #16]
 800b7e6:	4650      	mov	r0, sl
 800b7e8:	f7ff fb34 	bl	800ae54 <_free_r>
 800b7ec:	230c      	movs	r3, #12
 800b7ee:	f8ca 3000 	str.w	r3, [sl]
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fe:	e7e9      	b.n	800b7d4 <__ssputs_r+0x88>

0800b800 <_svfiprintf_r>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	4698      	mov	r8, r3
 800b806:	898b      	ldrh	r3, [r1, #12]
 800b808:	061b      	lsls	r3, r3, #24
 800b80a:	b09d      	sub	sp, #116	; 0x74
 800b80c:	4607      	mov	r7, r0
 800b80e:	460d      	mov	r5, r1
 800b810:	4614      	mov	r4, r2
 800b812:	d50e      	bpl.n	800b832 <_svfiprintf_r+0x32>
 800b814:	690b      	ldr	r3, [r1, #16]
 800b816:	b963      	cbnz	r3, 800b832 <_svfiprintf_r+0x32>
 800b818:	2140      	movs	r1, #64	; 0x40
 800b81a:	f7ff fb8f 	bl	800af3c <_malloc_r>
 800b81e:	6028      	str	r0, [r5, #0]
 800b820:	6128      	str	r0, [r5, #16]
 800b822:	b920      	cbnz	r0, 800b82e <_svfiprintf_r+0x2e>
 800b824:	230c      	movs	r3, #12
 800b826:	603b      	str	r3, [r7, #0]
 800b828:	f04f 30ff 	mov.w	r0, #4294967295
 800b82c:	e0d0      	b.n	800b9d0 <_svfiprintf_r+0x1d0>
 800b82e:	2340      	movs	r3, #64	; 0x40
 800b830:	616b      	str	r3, [r5, #20]
 800b832:	2300      	movs	r3, #0
 800b834:	9309      	str	r3, [sp, #36]	; 0x24
 800b836:	2320      	movs	r3, #32
 800b838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b840:	2330      	movs	r3, #48	; 0x30
 800b842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b9e8 <_svfiprintf_r+0x1e8>
 800b846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b84a:	f04f 0901 	mov.w	r9, #1
 800b84e:	4623      	mov	r3, r4
 800b850:	469a      	mov	sl, r3
 800b852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b856:	b10a      	cbz	r2, 800b85c <_svfiprintf_r+0x5c>
 800b858:	2a25      	cmp	r2, #37	; 0x25
 800b85a:	d1f9      	bne.n	800b850 <_svfiprintf_r+0x50>
 800b85c:	ebba 0b04 	subs.w	fp, sl, r4
 800b860:	d00b      	beq.n	800b87a <_svfiprintf_r+0x7a>
 800b862:	465b      	mov	r3, fp
 800b864:	4622      	mov	r2, r4
 800b866:	4629      	mov	r1, r5
 800b868:	4638      	mov	r0, r7
 800b86a:	f7ff ff6f 	bl	800b74c <__ssputs_r>
 800b86e:	3001      	adds	r0, #1
 800b870:	f000 80a9 	beq.w	800b9c6 <_svfiprintf_r+0x1c6>
 800b874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b876:	445a      	add	r2, fp
 800b878:	9209      	str	r2, [sp, #36]	; 0x24
 800b87a:	f89a 3000 	ldrb.w	r3, [sl]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 80a1 	beq.w	800b9c6 <_svfiprintf_r+0x1c6>
 800b884:	2300      	movs	r3, #0
 800b886:	f04f 32ff 	mov.w	r2, #4294967295
 800b88a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88e:	f10a 0a01 	add.w	sl, sl, #1
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	9307      	str	r3, [sp, #28]
 800b896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b89a:	931a      	str	r3, [sp, #104]	; 0x68
 800b89c:	4654      	mov	r4, sl
 800b89e:	2205      	movs	r2, #5
 800b8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a4:	4850      	ldr	r0, [pc, #320]	; (800b9e8 <_svfiprintf_r+0x1e8>)
 800b8a6:	f7f4 fc93 	bl	80001d0 <memchr>
 800b8aa:	9a04      	ldr	r2, [sp, #16]
 800b8ac:	b9d8      	cbnz	r0, 800b8e6 <_svfiprintf_r+0xe6>
 800b8ae:	06d0      	lsls	r0, r2, #27
 800b8b0:	bf44      	itt	mi
 800b8b2:	2320      	movmi	r3, #32
 800b8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b8:	0711      	lsls	r1, r2, #28
 800b8ba:	bf44      	itt	mi
 800b8bc:	232b      	movmi	r3, #43	; 0x2b
 800b8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c8:	d015      	beq.n	800b8f6 <_svfiprintf_r+0xf6>
 800b8ca:	9a07      	ldr	r2, [sp, #28]
 800b8cc:	4654      	mov	r4, sl
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f04f 0c0a 	mov.w	ip, #10
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8da:	3b30      	subs	r3, #48	; 0x30
 800b8dc:	2b09      	cmp	r3, #9
 800b8de:	d94d      	bls.n	800b97c <_svfiprintf_r+0x17c>
 800b8e0:	b1b0      	cbz	r0, 800b910 <_svfiprintf_r+0x110>
 800b8e2:	9207      	str	r2, [sp, #28]
 800b8e4:	e014      	b.n	800b910 <_svfiprintf_r+0x110>
 800b8e6:	eba0 0308 	sub.w	r3, r0, r8
 800b8ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	46a2      	mov	sl, r4
 800b8f4:	e7d2      	b.n	800b89c <_svfiprintf_r+0x9c>
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	1d19      	adds	r1, r3, #4
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	9103      	str	r1, [sp, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bfbb      	ittet	lt
 800b902:	425b      	neglt	r3, r3
 800b904:	f042 0202 	orrlt.w	r2, r2, #2
 800b908:	9307      	strge	r3, [sp, #28]
 800b90a:	9307      	strlt	r3, [sp, #28]
 800b90c:	bfb8      	it	lt
 800b90e:	9204      	strlt	r2, [sp, #16]
 800b910:	7823      	ldrb	r3, [r4, #0]
 800b912:	2b2e      	cmp	r3, #46	; 0x2e
 800b914:	d10c      	bne.n	800b930 <_svfiprintf_r+0x130>
 800b916:	7863      	ldrb	r3, [r4, #1]
 800b918:	2b2a      	cmp	r3, #42	; 0x2a
 800b91a:	d134      	bne.n	800b986 <_svfiprintf_r+0x186>
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	1d1a      	adds	r2, r3, #4
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	9203      	str	r2, [sp, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	bfb8      	it	lt
 800b928:	f04f 33ff 	movlt.w	r3, #4294967295
 800b92c:	3402      	adds	r4, #2
 800b92e:	9305      	str	r3, [sp, #20]
 800b930:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b9f8 <_svfiprintf_r+0x1f8>
 800b934:	7821      	ldrb	r1, [r4, #0]
 800b936:	2203      	movs	r2, #3
 800b938:	4650      	mov	r0, sl
 800b93a:	f7f4 fc49 	bl	80001d0 <memchr>
 800b93e:	b138      	cbz	r0, 800b950 <_svfiprintf_r+0x150>
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	eba0 000a 	sub.w	r0, r0, sl
 800b946:	2240      	movs	r2, #64	; 0x40
 800b948:	4082      	lsls	r2, r0
 800b94a:	4313      	orrs	r3, r2
 800b94c:	3401      	adds	r4, #1
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b954:	4825      	ldr	r0, [pc, #148]	; (800b9ec <_svfiprintf_r+0x1ec>)
 800b956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b95a:	2206      	movs	r2, #6
 800b95c:	f7f4 fc38 	bl	80001d0 <memchr>
 800b960:	2800      	cmp	r0, #0
 800b962:	d038      	beq.n	800b9d6 <_svfiprintf_r+0x1d6>
 800b964:	4b22      	ldr	r3, [pc, #136]	; (800b9f0 <_svfiprintf_r+0x1f0>)
 800b966:	bb1b      	cbnz	r3, 800b9b0 <_svfiprintf_r+0x1b0>
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	3307      	adds	r3, #7
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	9303      	str	r3, [sp, #12]
 800b974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b976:	4433      	add	r3, r6
 800b978:	9309      	str	r3, [sp, #36]	; 0x24
 800b97a:	e768      	b.n	800b84e <_svfiprintf_r+0x4e>
 800b97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b980:	460c      	mov	r4, r1
 800b982:	2001      	movs	r0, #1
 800b984:	e7a6      	b.n	800b8d4 <_svfiprintf_r+0xd4>
 800b986:	2300      	movs	r3, #0
 800b988:	3401      	adds	r4, #1
 800b98a:	9305      	str	r3, [sp, #20]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	4620      	mov	r0, r4
 800b994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b998:	3a30      	subs	r2, #48	; 0x30
 800b99a:	2a09      	cmp	r2, #9
 800b99c:	d903      	bls.n	800b9a6 <_svfiprintf_r+0x1a6>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d0c6      	beq.n	800b930 <_svfiprintf_r+0x130>
 800b9a2:	9105      	str	r1, [sp, #20]
 800b9a4:	e7c4      	b.n	800b930 <_svfiprintf_r+0x130>
 800b9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e7f0      	b.n	800b992 <_svfiprintf_r+0x192>
 800b9b0:	ab03      	add	r3, sp, #12
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <_svfiprintf_r+0x1f4>)
 800b9b8:	a904      	add	r1, sp, #16
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	f7fd fe4e 	bl	800965c <_printf_float>
 800b9c0:	1c42      	adds	r2, r0, #1
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	d1d6      	bne.n	800b974 <_svfiprintf_r+0x174>
 800b9c6:	89ab      	ldrh	r3, [r5, #12]
 800b9c8:	065b      	lsls	r3, r3, #25
 800b9ca:	f53f af2d 	bmi.w	800b828 <_svfiprintf_r+0x28>
 800b9ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9d0:	b01d      	add	sp, #116	; 0x74
 800b9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d6:	ab03      	add	r3, sp, #12
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	462a      	mov	r2, r5
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <_svfiprintf_r+0x1f4>)
 800b9de:	a904      	add	r1, sp, #16
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7fe f8df 	bl	8009ba4 <_printf_i>
 800b9e6:	e7eb      	b.n	800b9c0 <_svfiprintf_r+0x1c0>
 800b9e8:	0800d384 	.word	0x0800d384
 800b9ec:	0800d38e 	.word	0x0800d38e
 800b9f0:	0800965d 	.word	0x0800965d
 800b9f4:	0800b74d 	.word	0x0800b74d
 800b9f8:	0800d38a 	.word	0x0800d38a

0800b9fc <__sflush_r>:
 800b9fc:	898a      	ldrh	r2, [r1, #12]
 800b9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba02:	4605      	mov	r5, r0
 800ba04:	0710      	lsls	r0, r2, #28
 800ba06:	460c      	mov	r4, r1
 800ba08:	d458      	bmi.n	800babc <__sflush_r+0xc0>
 800ba0a:	684b      	ldr	r3, [r1, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dc05      	bgt.n	800ba1c <__sflush_r+0x20>
 800ba10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	dc02      	bgt.n	800ba1c <__sflush_r+0x20>
 800ba16:	2000      	movs	r0, #0
 800ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba1e:	2e00      	cmp	r6, #0
 800ba20:	d0f9      	beq.n	800ba16 <__sflush_r+0x1a>
 800ba22:	2300      	movs	r3, #0
 800ba24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba28:	682f      	ldr	r7, [r5, #0]
 800ba2a:	6a21      	ldr	r1, [r4, #32]
 800ba2c:	602b      	str	r3, [r5, #0]
 800ba2e:	d032      	beq.n	800ba96 <__sflush_r+0x9a>
 800ba30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	075a      	lsls	r2, r3, #29
 800ba36:	d505      	bpl.n	800ba44 <__sflush_r+0x48>
 800ba38:	6863      	ldr	r3, [r4, #4]
 800ba3a:	1ac0      	subs	r0, r0, r3
 800ba3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba3e:	b10b      	cbz	r3, 800ba44 <__sflush_r+0x48>
 800ba40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba42:	1ac0      	subs	r0, r0, r3
 800ba44:	2300      	movs	r3, #0
 800ba46:	4602      	mov	r2, r0
 800ba48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba4a:	6a21      	ldr	r1, [r4, #32]
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	47b0      	blx	r6
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	89a3      	ldrh	r3, [r4, #12]
 800ba54:	d106      	bne.n	800ba64 <__sflush_r+0x68>
 800ba56:	6829      	ldr	r1, [r5, #0]
 800ba58:	291d      	cmp	r1, #29
 800ba5a:	d82b      	bhi.n	800bab4 <__sflush_r+0xb8>
 800ba5c:	4a29      	ldr	r2, [pc, #164]	; (800bb04 <__sflush_r+0x108>)
 800ba5e:	410a      	asrs	r2, r1
 800ba60:	07d6      	lsls	r6, r2, #31
 800ba62:	d427      	bmi.n	800bab4 <__sflush_r+0xb8>
 800ba64:	2200      	movs	r2, #0
 800ba66:	6062      	str	r2, [r4, #4]
 800ba68:	04d9      	lsls	r1, r3, #19
 800ba6a:	6922      	ldr	r2, [r4, #16]
 800ba6c:	6022      	str	r2, [r4, #0]
 800ba6e:	d504      	bpl.n	800ba7a <__sflush_r+0x7e>
 800ba70:	1c42      	adds	r2, r0, #1
 800ba72:	d101      	bne.n	800ba78 <__sflush_r+0x7c>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	b903      	cbnz	r3, 800ba7a <__sflush_r+0x7e>
 800ba78:	6560      	str	r0, [r4, #84]	; 0x54
 800ba7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba7c:	602f      	str	r7, [r5, #0]
 800ba7e:	2900      	cmp	r1, #0
 800ba80:	d0c9      	beq.n	800ba16 <__sflush_r+0x1a>
 800ba82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba86:	4299      	cmp	r1, r3
 800ba88:	d002      	beq.n	800ba90 <__sflush_r+0x94>
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f7ff f9e2 	bl	800ae54 <_free_r>
 800ba90:	2000      	movs	r0, #0
 800ba92:	6360      	str	r0, [r4, #52]	; 0x34
 800ba94:	e7c0      	b.n	800ba18 <__sflush_r+0x1c>
 800ba96:	2301      	movs	r3, #1
 800ba98:	4628      	mov	r0, r5
 800ba9a:	47b0      	blx	r6
 800ba9c:	1c41      	adds	r1, r0, #1
 800ba9e:	d1c8      	bne.n	800ba32 <__sflush_r+0x36>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0c5      	beq.n	800ba32 <__sflush_r+0x36>
 800baa6:	2b1d      	cmp	r3, #29
 800baa8:	d001      	beq.n	800baae <__sflush_r+0xb2>
 800baaa:	2b16      	cmp	r3, #22
 800baac:	d101      	bne.n	800bab2 <__sflush_r+0xb6>
 800baae:	602f      	str	r7, [r5, #0]
 800bab0:	e7b1      	b.n	800ba16 <__sflush_r+0x1a>
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab8:	81a3      	strh	r3, [r4, #12]
 800baba:	e7ad      	b.n	800ba18 <__sflush_r+0x1c>
 800babc:	690f      	ldr	r7, [r1, #16]
 800babe:	2f00      	cmp	r7, #0
 800bac0:	d0a9      	beq.n	800ba16 <__sflush_r+0x1a>
 800bac2:	0793      	lsls	r3, r2, #30
 800bac4:	680e      	ldr	r6, [r1, #0]
 800bac6:	bf08      	it	eq
 800bac8:	694b      	ldreq	r3, [r1, #20]
 800baca:	600f      	str	r7, [r1, #0]
 800bacc:	bf18      	it	ne
 800bace:	2300      	movne	r3, #0
 800bad0:	eba6 0807 	sub.w	r8, r6, r7
 800bad4:	608b      	str	r3, [r1, #8]
 800bad6:	f1b8 0f00 	cmp.w	r8, #0
 800bada:	dd9c      	ble.n	800ba16 <__sflush_r+0x1a>
 800badc:	6a21      	ldr	r1, [r4, #32]
 800bade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bae0:	4643      	mov	r3, r8
 800bae2:	463a      	mov	r2, r7
 800bae4:	4628      	mov	r0, r5
 800bae6:	47b0      	blx	r6
 800bae8:	2800      	cmp	r0, #0
 800baea:	dc06      	bgt.n	800bafa <__sflush_r+0xfe>
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf2:	81a3      	strh	r3, [r4, #12]
 800baf4:	f04f 30ff 	mov.w	r0, #4294967295
 800baf8:	e78e      	b.n	800ba18 <__sflush_r+0x1c>
 800bafa:	4407      	add	r7, r0
 800bafc:	eba8 0800 	sub.w	r8, r8, r0
 800bb00:	e7e9      	b.n	800bad6 <__sflush_r+0xda>
 800bb02:	bf00      	nop
 800bb04:	dfbffffe 	.word	0xdfbffffe

0800bb08 <_fflush_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	690b      	ldr	r3, [r1, #16]
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	460c      	mov	r4, r1
 800bb10:	b913      	cbnz	r3, 800bb18 <_fflush_r+0x10>
 800bb12:	2500      	movs	r5, #0
 800bb14:	4628      	mov	r0, r5
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	b118      	cbz	r0, 800bb22 <_fflush_r+0x1a>
 800bb1a:	6a03      	ldr	r3, [r0, #32]
 800bb1c:	b90b      	cbnz	r3, 800bb22 <_fflush_r+0x1a>
 800bb1e:	f7fe f9ef 	bl	8009f00 <__sinit>
 800bb22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0f3      	beq.n	800bb12 <_fflush_r+0xa>
 800bb2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb2c:	07d0      	lsls	r0, r2, #31
 800bb2e:	d404      	bmi.n	800bb3a <_fflush_r+0x32>
 800bb30:	0599      	lsls	r1, r3, #22
 800bb32:	d402      	bmi.n	800bb3a <_fflush_r+0x32>
 800bb34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb36:	f7fe fb0e 	bl	800a156 <__retarget_lock_acquire_recursive>
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	f7ff ff5d 	bl	800b9fc <__sflush_r>
 800bb42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb44:	07da      	lsls	r2, r3, #31
 800bb46:	4605      	mov	r5, r0
 800bb48:	d4e4      	bmi.n	800bb14 <_fflush_r+0xc>
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	059b      	lsls	r3, r3, #22
 800bb4e:	d4e1      	bmi.n	800bb14 <_fflush_r+0xc>
 800bb50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb52:	f7fe fb01 	bl	800a158 <__retarget_lock_release_recursive>
 800bb56:	e7dd      	b.n	800bb14 <_fflush_r+0xc>

0800bb58 <memmove>:
 800bb58:	4288      	cmp	r0, r1
 800bb5a:	b510      	push	{r4, lr}
 800bb5c:	eb01 0402 	add.w	r4, r1, r2
 800bb60:	d902      	bls.n	800bb68 <memmove+0x10>
 800bb62:	4284      	cmp	r4, r0
 800bb64:	4623      	mov	r3, r4
 800bb66:	d807      	bhi.n	800bb78 <memmove+0x20>
 800bb68:	1e43      	subs	r3, r0, #1
 800bb6a:	42a1      	cmp	r1, r4
 800bb6c:	d008      	beq.n	800bb80 <memmove+0x28>
 800bb6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb76:	e7f8      	b.n	800bb6a <memmove+0x12>
 800bb78:	4402      	add	r2, r0
 800bb7a:	4601      	mov	r1, r0
 800bb7c:	428a      	cmp	r2, r1
 800bb7e:	d100      	bne.n	800bb82 <memmove+0x2a>
 800bb80:	bd10      	pop	{r4, pc}
 800bb82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb8a:	e7f7      	b.n	800bb7c <memmove+0x24>

0800bb8c <_sbrk_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d06      	ldr	r5, [pc, #24]	; (800bba8 <_sbrk_r+0x1c>)
 800bb90:	2300      	movs	r3, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	602b      	str	r3, [r5, #0]
 800bb98:	f7f6 f900 	bl	8001d9c <_sbrk>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_sbrk_r+0x1a>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_sbrk_r+0x1a>
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	2000214c 	.word	0x2000214c

0800bbac <memcpy>:
 800bbac:	440a      	add	r2, r1
 800bbae:	4291      	cmp	r1, r2
 800bbb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbb4:	d100      	bne.n	800bbb8 <memcpy+0xc>
 800bbb6:	4770      	bx	lr
 800bbb8:	b510      	push	{r4, lr}
 800bbba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbc2:	4291      	cmp	r1, r2
 800bbc4:	d1f9      	bne.n	800bbba <memcpy+0xe>
 800bbc6:	bd10      	pop	{r4, pc}

0800bbc8 <__assert_func>:
 800bbc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbca:	4614      	mov	r4, r2
 800bbcc:	461a      	mov	r2, r3
 800bbce:	4b09      	ldr	r3, [pc, #36]	; (800bbf4 <__assert_func+0x2c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	68d8      	ldr	r0, [r3, #12]
 800bbd6:	b14c      	cbz	r4, 800bbec <__assert_func+0x24>
 800bbd8:	4b07      	ldr	r3, [pc, #28]	; (800bbf8 <__assert_func+0x30>)
 800bbda:	9100      	str	r1, [sp, #0]
 800bbdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbe0:	4906      	ldr	r1, [pc, #24]	; (800bbfc <__assert_func+0x34>)
 800bbe2:	462b      	mov	r3, r5
 800bbe4:	f000 f872 	bl	800bccc <fiprintf>
 800bbe8:	f000 f882 	bl	800bcf0 <abort>
 800bbec:	4b04      	ldr	r3, [pc, #16]	; (800bc00 <__assert_func+0x38>)
 800bbee:	461c      	mov	r4, r3
 800bbf0:	e7f3      	b.n	800bbda <__assert_func+0x12>
 800bbf2:	bf00      	nop
 800bbf4:	20000154 	.word	0x20000154
 800bbf8:	0800d39f 	.word	0x0800d39f
 800bbfc:	0800d3ac 	.word	0x0800d3ac
 800bc00:	0800d3da 	.word	0x0800d3da

0800bc04 <_calloc_r>:
 800bc04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc06:	fba1 2402 	umull	r2, r4, r1, r2
 800bc0a:	b94c      	cbnz	r4, 800bc20 <_calloc_r+0x1c>
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	9201      	str	r2, [sp, #4]
 800bc10:	f7ff f994 	bl	800af3c <_malloc_r>
 800bc14:	9a01      	ldr	r2, [sp, #4]
 800bc16:	4605      	mov	r5, r0
 800bc18:	b930      	cbnz	r0, 800bc28 <_calloc_r+0x24>
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	b003      	add	sp, #12
 800bc1e:	bd30      	pop	{r4, r5, pc}
 800bc20:	220c      	movs	r2, #12
 800bc22:	6002      	str	r2, [r0, #0]
 800bc24:	2500      	movs	r5, #0
 800bc26:	e7f8      	b.n	800bc1a <_calloc_r+0x16>
 800bc28:	4621      	mov	r1, r4
 800bc2a:	f7fe fa16 	bl	800a05a <memset>
 800bc2e:	e7f4      	b.n	800bc1a <_calloc_r+0x16>

0800bc30 <__ascii_mbtowc>:
 800bc30:	b082      	sub	sp, #8
 800bc32:	b901      	cbnz	r1, 800bc36 <__ascii_mbtowc+0x6>
 800bc34:	a901      	add	r1, sp, #4
 800bc36:	b142      	cbz	r2, 800bc4a <__ascii_mbtowc+0x1a>
 800bc38:	b14b      	cbz	r3, 800bc4e <__ascii_mbtowc+0x1e>
 800bc3a:	7813      	ldrb	r3, [r2, #0]
 800bc3c:	600b      	str	r3, [r1, #0]
 800bc3e:	7812      	ldrb	r2, [r2, #0]
 800bc40:	1e10      	subs	r0, r2, #0
 800bc42:	bf18      	it	ne
 800bc44:	2001      	movne	r0, #1
 800bc46:	b002      	add	sp, #8
 800bc48:	4770      	bx	lr
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	e7fb      	b.n	800bc46 <__ascii_mbtowc+0x16>
 800bc4e:	f06f 0001 	mvn.w	r0, #1
 800bc52:	e7f8      	b.n	800bc46 <__ascii_mbtowc+0x16>

0800bc54 <_realloc_r>:
 800bc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc58:	4680      	mov	r8, r0
 800bc5a:	4614      	mov	r4, r2
 800bc5c:	460e      	mov	r6, r1
 800bc5e:	b921      	cbnz	r1, 800bc6a <_realloc_r+0x16>
 800bc60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc64:	4611      	mov	r1, r2
 800bc66:	f7ff b969 	b.w	800af3c <_malloc_r>
 800bc6a:	b92a      	cbnz	r2, 800bc78 <_realloc_r+0x24>
 800bc6c:	f7ff f8f2 	bl	800ae54 <_free_r>
 800bc70:	4625      	mov	r5, r4
 800bc72:	4628      	mov	r0, r5
 800bc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc78:	f000 f841 	bl	800bcfe <_malloc_usable_size_r>
 800bc7c:	4284      	cmp	r4, r0
 800bc7e:	4607      	mov	r7, r0
 800bc80:	d802      	bhi.n	800bc88 <_realloc_r+0x34>
 800bc82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc86:	d812      	bhi.n	800bcae <_realloc_r+0x5a>
 800bc88:	4621      	mov	r1, r4
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	f7ff f956 	bl	800af3c <_malloc_r>
 800bc90:	4605      	mov	r5, r0
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d0ed      	beq.n	800bc72 <_realloc_r+0x1e>
 800bc96:	42bc      	cmp	r4, r7
 800bc98:	4622      	mov	r2, r4
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	bf28      	it	cs
 800bc9e:	463a      	movcs	r2, r7
 800bca0:	f7ff ff84 	bl	800bbac <memcpy>
 800bca4:	4631      	mov	r1, r6
 800bca6:	4640      	mov	r0, r8
 800bca8:	f7ff f8d4 	bl	800ae54 <_free_r>
 800bcac:	e7e1      	b.n	800bc72 <_realloc_r+0x1e>
 800bcae:	4635      	mov	r5, r6
 800bcb0:	e7df      	b.n	800bc72 <_realloc_r+0x1e>

0800bcb2 <__ascii_wctomb>:
 800bcb2:	b149      	cbz	r1, 800bcc8 <__ascii_wctomb+0x16>
 800bcb4:	2aff      	cmp	r2, #255	; 0xff
 800bcb6:	bf85      	ittet	hi
 800bcb8:	238a      	movhi	r3, #138	; 0x8a
 800bcba:	6003      	strhi	r3, [r0, #0]
 800bcbc:	700a      	strbls	r2, [r1, #0]
 800bcbe:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcc2:	bf98      	it	ls
 800bcc4:	2001      	movls	r0, #1
 800bcc6:	4770      	bx	lr
 800bcc8:	4608      	mov	r0, r1
 800bcca:	4770      	bx	lr

0800bccc <fiprintf>:
 800bccc:	b40e      	push	{r1, r2, r3}
 800bcce:	b503      	push	{r0, r1, lr}
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	ab03      	add	r3, sp, #12
 800bcd4:	4805      	ldr	r0, [pc, #20]	; (800bcec <fiprintf+0x20>)
 800bcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcda:	6800      	ldr	r0, [r0, #0]
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	f000 f83f 	bl	800bd60 <_vfiprintf_r>
 800bce2:	b002      	add	sp, #8
 800bce4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bce8:	b003      	add	sp, #12
 800bcea:	4770      	bx	lr
 800bcec:	20000154 	.word	0x20000154

0800bcf0 <abort>:
 800bcf0:	b508      	push	{r3, lr}
 800bcf2:	2006      	movs	r0, #6
 800bcf4:	f000 fa0c 	bl	800c110 <raise>
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	f7f5 ffd7 	bl	8001cac <_exit>

0800bcfe <_malloc_usable_size_r>:
 800bcfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd02:	1f18      	subs	r0, r3, #4
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bfbc      	itt	lt
 800bd08:	580b      	ldrlt	r3, [r1, r0]
 800bd0a:	18c0      	addlt	r0, r0, r3
 800bd0c:	4770      	bx	lr

0800bd0e <__sfputc_r>:
 800bd0e:	6893      	ldr	r3, [r2, #8]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	b410      	push	{r4}
 800bd16:	6093      	str	r3, [r2, #8]
 800bd18:	da08      	bge.n	800bd2c <__sfputc_r+0x1e>
 800bd1a:	6994      	ldr	r4, [r2, #24]
 800bd1c:	42a3      	cmp	r3, r4
 800bd1e:	db01      	blt.n	800bd24 <__sfputc_r+0x16>
 800bd20:	290a      	cmp	r1, #10
 800bd22:	d103      	bne.n	800bd2c <__sfputc_r+0x1e>
 800bd24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd28:	f000 b934 	b.w	800bf94 <__swbuf_r>
 800bd2c:	6813      	ldr	r3, [r2, #0]
 800bd2e:	1c58      	adds	r0, r3, #1
 800bd30:	6010      	str	r0, [r2, #0]
 800bd32:	7019      	strb	r1, [r3, #0]
 800bd34:	4608      	mov	r0, r1
 800bd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <__sfputs_r>:
 800bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3e:	4606      	mov	r6, r0
 800bd40:	460f      	mov	r7, r1
 800bd42:	4614      	mov	r4, r2
 800bd44:	18d5      	adds	r5, r2, r3
 800bd46:	42ac      	cmp	r4, r5
 800bd48:	d101      	bne.n	800bd4e <__sfputs_r+0x12>
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	e007      	b.n	800bd5e <__sfputs_r+0x22>
 800bd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd52:	463a      	mov	r2, r7
 800bd54:	4630      	mov	r0, r6
 800bd56:	f7ff ffda 	bl	800bd0e <__sfputc_r>
 800bd5a:	1c43      	adds	r3, r0, #1
 800bd5c:	d1f3      	bne.n	800bd46 <__sfputs_r+0xa>
 800bd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd60 <_vfiprintf_r>:
 800bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	460d      	mov	r5, r1
 800bd66:	b09d      	sub	sp, #116	; 0x74
 800bd68:	4614      	mov	r4, r2
 800bd6a:	4698      	mov	r8, r3
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	b118      	cbz	r0, 800bd78 <_vfiprintf_r+0x18>
 800bd70:	6a03      	ldr	r3, [r0, #32]
 800bd72:	b90b      	cbnz	r3, 800bd78 <_vfiprintf_r+0x18>
 800bd74:	f7fe f8c4 	bl	8009f00 <__sinit>
 800bd78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd7a:	07d9      	lsls	r1, r3, #31
 800bd7c:	d405      	bmi.n	800bd8a <_vfiprintf_r+0x2a>
 800bd7e:	89ab      	ldrh	r3, [r5, #12]
 800bd80:	059a      	lsls	r2, r3, #22
 800bd82:	d402      	bmi.n	800bd8a <_vfiprintf_r+0x2a>
 800bd84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd86:	f7fe f9e6 	bl	800a156 <__retarget_lock_acquire_recursive>
 800bd8a:	89ab      	ldrh	r3, [r5, #12]
 800bd8c:	071b      	lsls	r3, r3, #28
 800bd8e:	d501      	bpl.n	800bd94 <_vfiprintf_r+0x34>
 800bd90:	692b      	ldr	r3, [r5, #16]
 800bd92:	b99b      	cbnz	r3, 800bdbc <_vfiprintf_r+0x5c>
 800bd94:	4629      	mov	r1, r5
 800bd96:	4630      	mov	r0, r6
 800bd98:	f000 f93a 	bl	800c010 <__swsetup_r>
 800bd9c:	b170      	cbz	r0, 800bdbc <_vfiprintf_r+0x5c>
 800bd9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bda0:	07dc      	lsls	r4, r3, #31
 800bda2:	d504      	bpl.n	800bdae <_vfiprintf_r+0x4e>
 800bda4:	f04f 30ff 	mov.w	r0, #4294967295
 800bda8:	b01d      	add	sp, #116	; 0x74
 800bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	0598      	lsls	r0, r3, #22
 800bdb2:	d4f7      	bmi.n	800bda4 <_vfiprintf_r+0x44>
 800bdb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdb6:	f7fe f9cf 	bl	800a158 <__retarget_lock_release_recursive>
 800bdba:	e7f3      	b.n	800bda4 <_vfiprintf_r+0x44>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc0:	2320      	movs	r3, #32
 800bdc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdca:	2330      	movs	r3, #48	; 0x30
 800bdcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bf80 <_vfiprintf_r+0x220>
 800bdd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdd4:	f04f 0901 	mov.w	r9, #1
 800bdd8:	4623      	mov	r3, r4
 800bdda:	469a      	mov	sl, r3
 800bddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bde0:	b10a      	cbz	r2, 800bde6 <_vfiprintf_r+0x86>
 800bde2:	2a25      	cmp	r2, #37	; 0x25
 800bde4:	d1f9      	bne.n	800bdda <_vfiprintf_r+0x7a>
 800bde6:	ebba 0b04 	subs.w	fp, sl, r4
 800bdea:	d00b      	beq.n	800be04 <_vfiprintf_r+0xa4>
 800bdec:	465b      	mov	r3, fp
 800bdee:	4622      	mov	r2, r4
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f7ff ffa2 	bl	800bd3c <__sfputs_r>
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	f000 80a9 	beq.w	800bf50 <_vfiprintf_r+0x1f0>
 800bdfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be00:	445a      	add	r2, fp
 800be02:	9209      	str	r2, [sp, #36]	; 0x24
 800be04:	f89a 3000 	ldrb.w	r3, [sl]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f000 80a1 	beq.w	800bf50 <_vfiprintf_r+0x1f0>
 800be0e:	2300      	movs	r3, #0
 800be10:	f04f 32ff 	mov.w	r2, #4294967295
 800be14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be18:	f10a 0a01 	add.w	sl, sl, #1
 800be1c:	9304      	str	r3, [sp, #16]
 800be1e:	9307      	str	r3, [sp, #28]
 800be20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be24:	931a      	str	r3, [sp, #104]	; 0x68
 800be26:	4654      	mov	r4, sl
 800be28:	2205      	movs	r2, #5
 800be2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be2e:	4854      	ldr	r0, [pc, #336]	; (800bf80 <_vfiprintf_r+0x220>)
 800be30:	f7f4 f9ce 	bl	80001d0 <memchr>
 800be34:	9a04      	ldr	r2, [sp, #16]
 800be36:	b9d8      	cbnz	r0, 800be70 <_vfiprintf_r+0x110>
 800be38:	06d1      	lsls	r1, r2, #27
 800be3a:	bf44      	itt	mi
 800be3c:	2320      	movmi	r3, #32
 800be3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be42:	0713      	lsls	r3, r2, #28
 800be44:	bf44      	itt	mi
 800be46:	232b      	movmi	r3, #43	; 0x2b
 800be48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be4c:	f89a 3000 	ldrb.w	r3, [sl]
 800be50:	2b2a      	cmp	r3, #42	; 0x2a
 800be52:	d015      	beq.n	800be80 <_vfiprintf_r+0x120>
 800be54:	9a07      	ldr	r2, [sp, #28]
 800be56:	4654      	mov	r4, sl
 800be58:	2000      	movs	r0, #0
 800be5a:	f04f 0c0a 	mov.w	ip, #10
 800be5e:	4621      	mov	r1, r4
 800be60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be64:	3b30      	subs	r3, #48	; 0x30
 800be66:	2b09      	cmp	r3, #9
 800be68:	d94d      	bls.n	800bf06 <_vfiprintf_r+0x1a6>
 800be6a:	b1b0      	cbz	r0, 800be9a <_vfiprintf_r+0x13a>
 800be6c:	9207      	str	r2, [sp, #28]
 800be6e:	e014      	b.n	800be9a <_vfiprintf_r+0x13a>
 800be70:	eba0 0308 	sub.w	r3, r0, r8
 800be74:	fa09 f303 	lsl.w	r3, r9, r3
 800be78:	4313      	orrs	r3, r2
 800be7a:	9304      	str	r3, [sp, #16]
 800be7c:	46a2      	mov	sl, r4
 800be7e:	e7d2      	b.n	800be26 <_vfiprintf_r+0xc6>
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	1d19      	adds	r1, r3, #4
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	9103      	str	r1, [sp, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	bfbb      	ittet	lt
 800be8c:	425b      	neglt	r3, r3
 800be8e:	f042 0202 	orrlt.w	r2, r2, #2
 800be92:	9307      	strge	r3, [sp, #28]
 800be94:	9307      	strlt	r3, [sp, #28]
 800be96:	bfb8      	it	lt
 800be98:	9204      	strlt	r2, [sp, #16]
 800be9a:	7823      	ldrb	r3, [r4, #0]
 800be9c:	2b2e      	cmp	r3, #46	; 0x2e
 800be9e:	d10c      	bne.n	800beba <_vfiprintf_r+0x15a>
 800bea0:	7863      	ldrb	r3, [r4, #1]
 800bea2:	2b2a      	cmp	r3, #42	; 0x2a
 800bea4:	d134      	bne.n	800bf10 <_vfiprintf_r+0x1b0>
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	1d1a      	adds	r2, r3, #4
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	9203      	str	r2, [sp, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	bfb8      	it	lt
 800beb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800beb6:	3402      	adds	r4, #2
 800beb8:	9305      	str	r3, [sp, #20]
 800beba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bf90 <_vfiprintf_r+0x230>
 800bebe:	7821      	ldrb	r1, [r4, #0]
 800bec0:	2203      	movs	r2, #3
 800bec2:	4650      	mov	r0, sl
 800bec4:	f7f4 f984 	bl	80001d0 <memchr>
 800bec8:	b138      	cbz	r0, 800beda <_vfiprintf_r+0x17a>
 800beca:	9b04      	ldr	r3, [sp, #16]
 800becc:	eba0 000a 	sub.w	r0, r0, sl
 800bed0:	2240      	movs	r2, #64	; 0x40
 800bed2:	4082      	lsls	r2, r0
 800bed4:	4313      	orrs	r3, r2
 800bed6:	3401      	adds	r4, #1
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bede:	4829      	ldr	r0, [pc, #164]	; (800bf84 <_vfiprintf_r+0x224>)
 800bee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bee4:	2206      	movs	r2, #6
 800bee6:	f7f4 f973 	bl	80001d0 <memchr>
 800beea:	2800      	cmp	r0, #0
 800beec:	d03f      	beq.n	800bf6e <_vfiprintf_r+0x20e>
 800beee:	4b26      	ldr	r3, [pc, #152]	; (800bf88 <_vfiprintf_r+0x228>)
 800bef0:	bb1b      	cbnz	r3, 800bf3a <_vfiprintf_r+0x1da>
 800bef2:	9b03      	ldr	r3, [sp, #12]
 800bef4:	3307      	adds	r3, #7
 800bef6:	f023 0307 	bic.w	r3, r3, #7
 800befa:	3308      	adds	r3, #8
 800befc:	9303      	str	r3, [sp, #12]
 800befe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf00:	443b      	add	r3, r7
 800bf02:	9309      	str	r3, [sp, #36]	; 0x24
 800bf04:	e768      	b.n	800bdd8 <_vfiprintf_r+0x78>
 800bf06:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	e7a6      	b.n	800be5e <_vfiprintf_r+0xfe>
 800bf10:	2300      	movs	r3, #0
 800bf12:	3401      	adds	r4, #1
 800bf14:	9305      	str	r3, [sp, #20]
 800bf16:	4619      	mov	r1, r3
 800bf18:	f04f 0c0a 	mov.w	ip, #10
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf22:	3a30      	subs	r2, #48	; 0x30
 800bf24:	2a09      	cmp	r2, #9
 800bf26:	d903      	bls.n	800bf30 <_vfiprintf_r+0x1d0>
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d0c6      	beq.n	800beba <_vfiprintf_r+0x15a>
 800bf2c:	9105      	str	r1, [sp, #20]
 800bf2e:	e7c4      	b.n	800beba <_vfiprintf_r+0x15a>
 800bf30:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf34:	4604      	mov	r4, r0
 800bf36:	2301      	movs	r3, #1
 800bf38:	e7f0      	b.n	800bf1c <_vfiprintf_r+0x1bc>
 800bf3a:	ab03      	add	r3, sp, #12
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	462a      	mov	r2, r5
 800bf40:	4b12      	ldr	r3, [pc, #72]	; (800bf8c <_vfiprintf_r+0x22c>)
 800bf42:	a904      	add	r1, sp, #16
 800bf44:	4630      	mov	r0, r6
 800bf46:	f7fd fb89 	bl	800965c <_printf_float>
 800bf4a:	4607      	mov	r7, r0
 800bf4c:	1c78      	adds	r0, r7, #1
 800bf4e:	d1d6      	bne.n	800befe <_vfiprintf_r+0x19e>
 800bf50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf52:	07d9      	lsls	r1, r3, #31
 800bf54:	d405      	bmi.n	800bf62 <_vfiprintf_r+0x202>
 800bf56:	89ab      	ldrh	r3, [r5, #12]
 800bf58:	059a      	lsls	r2, r3, #22
 800bf5a:	d402      	bmi.n	800bf62 <_vfiprintf_r+0x202>
 800bf5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf5e:	f7fe f8fb 	bl	800a158 <__retarget_lock_release_recursive>
 800bf62:	89ab      	ldrh	r3, [r5, #12]
 800bf64:	065b      	lsls	r3, r3, #25
 800bf66:	f53f af1d 	bmi.w	800bda4 <_vfiprintf_r+0x44>
 800bf6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf6c:	e71c      	b.n	800bda8 <_vfiprintf_r+0x48>
 800bf6e:	ab03      	add	r3, sp, #12
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	462a      	mov	r2, r5
 800bf74:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <_vfiprintf_r+0x22c>)
 800bf76:	a904      	add	r1, sp, #16
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f7fd fe13 	bl	8009ba4 <_printf_i>
 800bf7e:	e7e4      	b.n	800bf4a <_vfiprintf_r+0x1ea>
 800bf80:	0800d384 	.word	0x0800d384
 800bf84:	0800d38e 	.word	0x0800d38e
 800bf88:	0800965d 	.word	0x0800965d
 800bf8c:	0800bd3d 	.word	0x0800bd3d
 800bf90:	0800d38a 	.word	0x0800d38a

0800bf94 <__swbuf_r>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	460e      	mov	r6, r1
 800bf98:	4614      	mov	r4, r2
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	b118      	cbz	r0, 800bfa6 <__swbuf_r+0x12>
 800bf9e:	6a03      	ldr	r3, [r0, #32]
 800bfa0:	b90b      	cbnz	r3, 800bfa6 <__swbuf_r+0x12>
 800bfa2:	f7fd ffad 	bl	8009f00 <__sinit>
 800bfa6:	69a3      	ldr	r3, [r4, #24]
 800bfa8:	60a3      	str	r3, [r4, #8]
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	071a      	lsls	r2, r3, #28
 800bfae:	d525      	bpl.n	800bffc <__swbuf_r+0x68>
 800bfb0:	6923      	ldr	r3, [r4, #16]
 800bfb2:	b31b      	cbz	r3, 800bffc <__swbuf_r+0x68>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	6922      	ldr	r2, [r4, #16]
 800bfb8:	1a98      	subs	r0, r3, r2
 800bfba:	6963      	ldr	r3, [r4, #20]
 800bfbc:	b2f6      	uxtb	r6, r6
 800bfbe:	4283      	cmp	r3, r0
 800bfc0:	4637      	mov	r7, r6
 800bfc2:	dc04      	bgt.n	800bfce <__swbuf_r+0x3a>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f7ff fd9e 	bl	800bb08 <_fflush_r>
 800bfcc:	b9e0      	cbnz	r0, 800c008 <__swbuf_r+0x74>
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	60a3      	str	r3, [r4, #8]
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	6022      	str	r2, [r4, #0]
 800bfda:	701e      	strb	r6, [r3, #0]
 800bfdc:	6962      	ldr	r2, [r4, #20]
 800bfde:	1c43      	adds	r3, r0, #1
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d004      	beq.n	800bfee <__swbuf_r+0x5a>
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	07db      	lsls	r3, r3, #31
 800bfe8:	d506      	bpl.n	800bff8 <__swbuf_r+0x64>
 800bfea:	2e0a      	cmp	r6, #10
 800bfec:	d104      	bne.n	800bff8 <__swbuf_r+0x64>
 800bfee:	4621      	mov	r1, r4
 800bff0:	4628      	mov	r0, r5
 800bff2:	f7ff fd89 	bl	800bb08 <_fflush_r>
 800bff6:	b938      	cbnz	r0, 800c008 <__swbuf_r+0x74>
 800bff8:	4638      	mov	r0, r7
 800bffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bffc:	4621      	mov	r1, r4
 800bffe:	4628      	mov	r0, r5
 800c000:	f000 f806 	bl	800c010 <__swsetup_r>
 800c004:	2800      	cmp	r0, #0
 800c006:	d0d5      	beq.n	800bfb4 <__swbuf_r+0x20>
 800c008:	f04f 37ff 	mov.w	r7, #4294967295
 800c00c:	e7f4      	b.n	800bff8 <__swbuf_r+0x64>
	...

0800c010 <__swsetup_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4b2a      	ldr	r3, [pc, #168]	; (800c0bc <__swsetup_r+0xac>)
 800c014:	4605      	mov	r5, r0
 800c016:	6818      	ldr	r0, [r3, #0]
 800c018:	460c      	mov	r4, r1
 800c01a:	b118      	cbz	r0, 800c024 <__swsetup_r+0x14>
 800c01c:	6a03      	ldr	r3, [r0, #32]
 800c01e:	b90b      	cbnz	r3, 800c024 <__swsetup_r+0x14>
 800c020:	f7fd ff6e 	bl	8009f00 <__sinit>
 800c024:	89a3      	ldrh	r3, [r4, #12]
 800c026:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c02a:	0718      	lsls	r0, r3, #28
 800c02c:	d422      	bmi.n	800c074 <__swsetup_r+0x64>
 800c02e:	06d9      	lsls	r1, r3, #27
 800c030:	d407      	bmi.n	800c042 <__swsetup_r+0x32>
 800c032:	2309      	movs	r3, #9
 800c034:	602b      	str	r3, [r5, #0]
 800c036:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	e034      	b.n	800c0ac <__swsetup_r+0x9c>
 800c042:	0758      	lsls	r0, r3, #29
 800c044:	d512      	bpl.n	800c06c <__swsetup_r+0x5c>
 800c046:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c048:	b141      	cbz	r1, 800c05c <__swsetup_r+0x4c>
 800c04a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c04e:	4299      	cmp	r1, r3
 800c050:	d002      	beq.n	800c058 <__swsetup_r+0x48>
 800c052:	4628      	mov	r0, r5
 800c054:	f7fe fefe 	bl	800ae54 <_free_r>
 800c058:	2300      	movs	r3, #0
 800c05a:	6363      	str	r3, [r4, #52]	; 0x34
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c062:	81a3      	strh	r3, [r4, #12]
 800c064:	2300      	movs	r3, #0
 800c066:	6063      	str	r3, [r4, #4]
 800c068:	6923      	ldr	r3, [r4, #16]
 800c06a:	6023      	str	r3, [r4, #0]
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f043 0308 	orr.w	r3, r3, #8
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	6923      	ldr	r3, [r4, #16]
 800c076:	b94b      	cbnz	r3, 800c08c <__swsetup_r+0x7c>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c07e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c082:	d003      	beq.n	800c08c <__swsetup_r+0x7c>
 800c084:	4621      	mov	r1, r4
 800c086:	4628      	mov	r0, r5
 800c088:	f000 f884 	bl	800c194 <__smakebuf_r>
 800c08c:	89a0      	ldrh	r0, [r4, #12]
 800c08e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c092:	f010 0301 	ands.w	r3, r0, #1
 800c096:	d00a      	beq.n	800c0ae <__swsetup_r+0x9e>
 800c098:	2300      	movs	r3, #0
 800c09a:	60a3      	str	r3, [r4, #8]
 800c09c:	6963      	ldr	r3, [r4, #20]
 800c09e:	425b      	negs	r3, r3
 800c0a0:	61a3      	str	r3, [r4, #24]
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	b943      	cbnz	r3, 800c0b8 <__swsetup_r+0xa8>
 800c0a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0aa:	d1c4      	bne.n	800c036 <__swsetup_r+0x26>
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
 800c0ae:	0781      	lsls	r1, r0, #30
 800c0b0:	bf58      	it	pl
 800c0b2:	6963      	ldrpl	r3, [r4, #20]
 800c0b4:	60a3      	str	r3, [r4, #8]
 800c0b6:	e7f4      	b.n	800c0a2 <__swsetup_r+0x92>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	e7f7      	b.n	800c0ac <__swsetup_r+0x9c>
 800c0bc:	20000154 	.word	0x20000154

0800c0c0 <_raise_r>:
 800c0c0:	291f      	cmp	r1, #31
 800c0c2:	b538      	push	{r3, r4, r5, lr}
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	d904      	bls.n	800c0d4 <_raise_r+0x14>
 800c0ca:	2316      	movs	r3, #22
 800c0cc:	6003      	str	r3, [r0, #0]
 800c0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c0d6:	b112      	cbz	r2, 800c0de <_raise_r+0x1e>
 800c0d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0dc:	b94b      	cbnz	r3, 800c0f2 <_raise_r+0x32>
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 f830 	bl	800c144 <_getpid_r>
 800c0e4:	462a      	mov	r2, r5
 800c0e6:	4601      	mov	r1, r0
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ee:	f000 b817 	b.w	800c120 <_kill_r>
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d00a      	beq.n	800c10c <_raise_r+0x4c>
 800c0f6:	1c59      	adds	r1, r3, #1
 800c0f8:	d103      	bne.n	800c102 <_raise_r+0x42>
 800c0fa:	2316      	movs	r3, #22
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	2001      	movs	r0, #1
 800c100:	e7e7      	b.n	800c0d2 <_raise_r+0x12>
 800c102:	2400      	movs	r4, #0
 800c104:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c108:	4628      	mov	r0, r5
 800c10a:	4798      	blx	r3
 800c10c:	2000      	movs	r0, #0
 800c10e:	e7e0      	b.n	800c0d2 <_raise_r+0x12>

0800c110 <raise>:
 800c110:	4b02      	ldr	r3, [pc, #8]	; (800c11c <raise+0xc>)
 800c112:	4601      	mov	r1, r0
 800c114:	6818      	ldr	r0, [r3, #0]
 800c116:	f7ff bfd3 	b.w	800c0c0 <_raise_r>
 800c11a:	bf00      	nop
 800c11c:	20000154 	.word	0x20000154

0800c120 <_kill_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4d07      	ldr	r5, [pc, #28]	; (800c140 <_kill_r+0x20>)
 800c124:	2300      	movs	r3, #0
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	4611      	mov	r1, r2
 800c12c:	602b      	str	r3, [r5, #0]
 800c12e:	f7f5 fdad 	bl	8001c8c <_kill>
 800c132:	1c43      	adds	r3, r0, #1
 800c134:	d102      	bne.n	800c13c <_kill_r+0x1c>
 800c136:	682b      	ldr	r3, [r5, #0]
 800c138:	b103      	cbz	r3, 800c13c <_kill_r+0x1c>
 800c13a:	6023      	str	r3, [r4, #0]
 800c13c:	bd38      	pop	{r3, r4, r5, pc}
 800c13e:	bf00      	nop
 800c140:	2000214c 	.word	0x2000214c

0800c144 <_getpid_r>:
 800c144:	f7f5 bd9a 	b.w	8001c7c <_getpid>

0800c148 <__swhatbuf_r>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	460c      	mov	r4, r1
 800c14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c150:	2900      	cmp	r1, #0
 800c152:	b096      	sub	sp, #88	; 0x58
 800c154:	4615      	mov	r5, r2
 800c156:	461e      	mov	r6, r3
 800c158:	da0d      	bge.n	800c176 <__swhatbuf_r+0x2e>
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c160:	f04f 0100 	mov.w	r1, #0
 800c164:	bf0c      	ite	eq
 800c166:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c16a:	2340      	movne	r3, #64	; 0x40
 800c16c:	2000      	movs	r0, #0
 800c16e:	6031      	str	r1, [r6, #0]
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	b016      	add	sp, #88	; 0x58
 800c174:	bd70      	pop	{r4, r5, r6, pc}
 800c176:	466a      	mov	r2, sp
 800c178:	f000 f848 	bl	800c20c <_fstat_r>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	dbec      	blt.n	800c15a <__swhatbuf_r+0x12>
 800c180:	9901      	ldr	r1, [sp, #4]
 800c182:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c186:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c18a:	4259      	negs	r1, r3
 800c18c:	4159      	adcs	r1, r3
 800c18e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c192:	e7eb      	b.n	800c16c <__swhatbuf_r+0x24>

0800c194 <__smakebuf_r>:
 800c194:	898b      	ldrh	r3, [r1, #12]
 800c196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c198:	079d      	lsls	r5, r3, #30
 800c19a:	4606      	mov	r6, r0
 800c19c:	460c      	mov	r4, r1
 800c19e:	d507      	bpl.n	800c1b0 <__smakebuf_r+0x1c>
 800c1a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	6163      	str	r3, [r4, #20]
 800c1ac:	b002      	add	sp, #8
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	ab01      	add	r3, sp, #4
 800c1b2:	466a      	mov	r2, sp
 800c1b4:	f7ff ffc8 	bl	800c148 <__swhatbuf_r>
 800c1b8:	9900      	ldr	r1, [sp, #0]
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7fe febd 	bl	800af3c <_malloc_r>
 800c1c2:	b948      	cbnz	r0, 800c1d8 <__smakebuf_r+0x44>
 800c1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c8:	059a      	lsls	r2, r3, #22
 800c1ca:	d4ef      	bmi.n	800c1ac <__smakebuf_r+0x18>
 800c1cc:	f023 0303 	bic.w	r3, r3, #3
 800c1d0:	f043 0302 	orr.w	r3, r3, #2
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	e7e3      	b.n	800c1a0 <__smakebuf_r+0xc>
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	6020      	str	r0, [r4, #0]
 800c1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	9b00      	ldr	r3, [sp, #0]
 800c1e4:	6163      	str	r3, [r4, #20]
 800c1e6:	9b01      	ldr	r3, [sp, #4]
 800c1e8:	6120      	str	r0, [r4, #16]
 800c1ea:	b15b      	cbz	r3, 800c204 <__smakebuf_r+0x70>
 800c1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f000 f81d 	bl	800c230 <_isatty_r>
 800c1f6:	b128      	cbz	r0, 800c204 <__smakebuf_r+0x70>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	f043 0301 	orr.w	r3, r3, #1
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	431d      	orrs	r5, r3
 800c208:	81a5      	strh	r5, [r4, #12]
 800c20a:	e7cf      	b.n	800c1ac <__smakebuf_r+0x18>

0800c20c <_fstat_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d07      	ldr	r5, [pc, #28]	; (800c22c <_fstat_r+0x20>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	4611      	mov	r1, r2
 800c218:	602b      	str	r3, [r5, #0]
 800c21a:	f7f5 fd96 	bl	8001d4a <_fstat>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	d102      	bne.n	800c228 <_fstat_r+0x1c>
 800c222:	682b      	ldr	r3, [r5, #0]
 800c224:	b103      	cbz	r3, 800c228 <_fstat_r+0x1c>
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	bd38      	pop	{r3, r4, r5, pc}
 800c22a:	bf00      	nop
 800c22c:	2000214c 	.word	0x2000214c

0800c230 <_isatty_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d06      	ldr	r5, [pc, #24]	; (800c24c <_isatty_r+0x1c>)
 800c234:	2300      	movs	r3, #0
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	f7f5 fd95 	bl	8001d6a <_isatty>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_isatty_r+0x1a>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_isatty_r+0x1a>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	2000214c 	.word	0x2000214c

0800c250 <pow>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	ed2d 8b02 	vpush	{d8}
 800c256:	eeb0 8a40 	vmov.f32	s16, s0
 800c25a:	eef0 8a60 	vmov.f32	s17, s1
 800c25e:	ec55 4b11 	vmov	r4, r5, d1
 800c262:	f000 f871 	bl	800c348 <__ieee754_pow>
 800c266:	4622      	mov	r2, r4
 800c268:	462b      	mov	r3, r5
 800c26a:	4620      	mov	r0, r4
 800c26c:	4629      	mov	r1, r5
 800c26e:	ec57 6b10 	vmov	r6, r7, d0
 800c272:	f7f4 fc5b 	bl	8000b2c <__aeabi_dcmpun>
 800c276:	2800      	cmp	r0, #0
 800c278:	d13b      	bne.n	800c2f2 <pow+0xa2>
 800c27a:	ec51 0b18 	vmov	r0, r1, d8
 800c27e:	2200      	movs	r2, #0
 800c280:	2300      	movs	r3, #0
 800c282:	f7f4 fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 800c286:	b1b8      	cbz	r0, 800c2b8 <pow+0x68>
 800c288:	2200      	movs	r2, #0
 800c28a:	2300      	movs	r3, #0
 800c28c:	4620      	mov	r0, r4
 800c28e:	4629      	mov	r1, r5
 800c290:	f7f4 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c294:	2800      	cmp	r0, #0
 800c296:	d146      	bne.n	800c326 <pow+0xd6>
 800c298:	ec45 4b10 	vmov	d0, r4, r5
 800c29c:	f000 f848 	bl	800c330 <finite>
 800c2a0:	b338      	cbz	r0, 800c2f2 <pow+0xa2>
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f7f4 fc17 	bl	8000adc <__aeabi_dcmplt>
 800c2ae:	b300      	cbz	r0, 800c2f2 <pow+0xa2>
 800c2b0:	f7fd ff26 	bl	800a100 <__errno>
 800c2b4:	2322      	movs	r3, #34	; 0x22
 800c2b6:	e01b      	b.n	800c2f0 <pow+0xa0>
 800c2b8:	ec47 6b10 	vmov	d0, r6, r7
 800c2bc:	f000 f838 	bl	800c330 <finite>
 800c2c0:	b9e0      	cbnz	r0, 800c2fc <pow+0xac>
 800c2c2:	eeb0 0a48 	vmov.f32	s0, s16
 800c2c6:	eef0 0a68 	vmov.f32	s1, s17
 800c2ca:	f000 f831 	bl	800c330 <finite>
 800c2ce:	b1a8      	cbz	r0, 800c2fc <pow+0xac>
 800c2d0:	ec45 4b10 	vmov	d0, r4, r5
 800c2d4:	f000 f82c 	bl	800c330 <finite>
 800c2d8:	b180      	cbz	r0, 800c2fc <pow+0xac>
 800c2da:	4632      	mov	r2, r6
 800c2dc:	463b      	mov	r3, r7
 800c2de:	4630      	mov	r0, r6
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	f7f4 fc23 	bl	8000b2c <__aeabi_dcmpun>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d0e2      	beq.n	800c2b0 <pow+0x60>
 800c2ea:	f7fd ff09 	bl	800a100 <__errno>
 800c2ee:	2321      	movs	r3, #33	; 0x21
 800c2f0:	6003      	str	r3, [r0, #0]
 800c2f2:	ecbd 8b02 	vpop	{d8}
 800c2f6:	ec47 6b10 	vmov	d0, r6, r7
 800c2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2300      	movs	r3, #0
 800c300:	4630      	mov	r0, r6
 800c302:	4639      	mov	r1, r7
 800c304:	f7f4 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d0f2      	beq.n	800c2f2 <pow+0xa2>
 800c30c:	eeb0 0a48 	vmov.f32	s0, s16
 800c310:	eef0 0a68 	vmov.f32	s1, s17
 800c314:	f000 f80c 	bl	800c330 <finite>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d0ea      	beq.n	800c2f2 <pow+0xa2>
 800c31c:	ec45 4b10 	vmov	d0, r4, r5
 800c320:	f000 f806 	bl	800c330 <finite>
 800c324:	e7c3      	b.n	800c2ae <pow+0x5e>
 800c326:	4f01      	ldr	r7, [pc, #4]	; (800c32c <pow+0xdc>)
 800c328:	2600      	movs	r6, #0
 800c32a:	e7e2      	b.n	800c2f2 <pow+0xa2>
 800c32c:	3ff00000 	.word	0x3ff00000

0800c330 <finite>:
 800c330:	b082      	sub	sp, #8
 800c332:	ed8d 0b00 	vstr	d0, [sp]
 800c336:	9801      	ldr	r0, [sp, #4]
 800c338:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c33c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c340:	0fc0      	lsrs	r0, r0, #31
 800c342:	b002      	add	sp, #8
 800c344:	4770      	bx	lr
	...

0800c348 <__ieee754_pow>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	ed2d 8b06 	vpush	{d8-d10}
 800c350:	b089      	sub	sp, #36	; 0x24
 800c352:	ed8d 1b00 	vstr	d1, [sp]
 800c356:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c35a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c35e:	ea58 0102 	orrs.w	r1, r8, r2
 800c362:	ec57 6b10 	vmov	r6, r7, d0
 800c366:	d115      	bne.n	800c394 <__ieee754_pow+0x4c>
 800c368:	19b3      	adds	r3, r6, r6
 800c36a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c36e:	4152      	adcs	r2, r2
 800c370:	4299      	cmp	r1, r3
 800c372:	4b89      	ldr	r3, [pc, #548]	; (800c598 <__ieee754_pow+0x250>)
 800c374:	4193      	sbcs	r3, r2
 800c376:	f080 84d1 	bcs.w	800cd1c <__ieee754_pow+0x9d4>
 800c37a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c37e:	4630      	mov	r0, r6
 800c380:	4639      	mov	r1, r7
 800c382:	f7f3 ff83 	bl	800028c <__adddf3>
 800c386:	ec41 0b10 	vmov	d0, r0, r1
 800c38a:	b009      	add	sp, #36	; 0x24
 800c38c:	ecbd 8b06 	vpop	{d8-d10}
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	4b81      	ldr	r3, [pc, #516]	; (800c59c <__ieee754_pow+0x254>)
 800c396:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c39a:	429c      	cmp	r4, r3
 800c39c:	ee10 aa10 	vmov	sl, s0
 800c3a0:	463d      	mov	r5, r7
 800c3a2:	dc06      	bgt.n	800c3b2 <__ieee754_pow+0x6a>
 800c3a4:	d101      	bne.n	800c3aa <__ieee754_pow+0x62>
 800c3a6:	2e00      	cmp	r6, #0
 800c3a8:	d1e7      	bne.n	800c37a <__ieee754_pow+0x32>
 800c3aa:	4598      	cmp	r8, r3
 800c3ac:	dc01      	bgt.n	800c3b2 <__ieee754_pow+0x6a>
 800c3ae:	d10f      	bne.n	800c3d0 <__ieee754_pow+0x88>
 800c3b0:	b172      	cbz	r2, 800c3d0 <__ieee754_pow+0x88>
 800c3b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c3b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c3ba:	ea55 050a 	orrs.w	r5, r5, sl
 800c3be:	d1dc      	bne.n	800c37a <__ieee754_pow+0x32>
 800c3c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c3c4:	18db      	adds	r3, r3, r3
 800c3c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c3ca:	4152      	adcs	r2, r2
 800c3cc:	429d      	cmp	r5, r3
 800c3ce:	e7d0      	b.n	800c372 <__ieee754_pow+0x2a>
 800c3d0:	2d00      	cmp	r5, #0
 800c3d2:	da3b      	bge.n	800c44c <__ieee754_pow+0x104>
 800c3d4:	4b72      	ldr	r3, [pc, #456]	; (800c5a0 <__ieee754_pow+0x258>)
 800c3d6:	4598      	cmp	r8, r3
 800c3d8:	dc51      	bgt.n	800c47e <__ieee754_pow+0x136>
 800c3da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c3de:	4598      	cmp	r8, r3
 800c3e0:	f340 84ab 	ble.w	800cd3a <__ieee754_pow+0x9f2>
 800c3e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c3e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c3ec:	2b14      	cmp	r3, #20
 800c3ee:	dd0f      	ble.n	800c410 <__ieee754_pow+0xc8>
 800c3f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c3f4:	fa22 f103 	lsr.w	r1, r2, r3
 800c3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	f040 849c 	bne.w	800cd3a <__ieee754_pow+0x9f2>
 800c402:	f001 0101 	and.w	r1, r1, #1
 800c406:	f1c1 0302 	rsb	r3, r1, #2
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	b182      	cbz	r2, 800c430 <__ieee754_pow+0xe8>
 800c40e:	e05f      	b.n	800c4d0 <__ieee754_pow+0x188>
 800c410:	2a00      	cmp	r2, #0
 800c412:	d15b      	bne.n	800c4cc <__ieee754_pow+0x184>
 800c414:	f1c3 0314 	rsb	r3, r3, #20
 800c418:	fa48 f103 	asr.w	r1, r8, r3
 800c41c:	fa01 f303 	lsl.w	r3, r1, r3
 800c420:	4543      	cmp	r3, r8
 800c422:	f040 8487 	bne.w	800cd34 <__ieee754_pow+0x9ec>
 800c426:	f001 0101 	and.w	r1, r1, #1
 800c42a:	f1c1 0302 	rsb	r3, r1, #2
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	4b5c      	ldr	r3, [pc, #368]	; (800c5a4 <__ieee754_pow+0x25c>)
 800c432:	4598      	cmp	r8, r3
 800c434:	d132      	bne.n	800c49c <__ieee754_pow+0x154>
 800c436:	f1b9 0f00 	cmp.w	r9, #0
 800c43a:	f280 8477 	bge.w	800cd2c <__ieee754_pow+0x9e4>
 800c43e:	4959      	ldr	r1, [pc, #356]	; (800c5a4 <__ieee754_pow+0x25c>)
 800c440:	4632      	mov	r2, r6
 800c442:	463b      	mov	r3, r7
 800c444:	2000      	movs	r0, #0
 800c446:	f7f4 fa01 	bl	800084c <__aeabi_ddiv>
 800c44a:	e79c      	b.n	800c386 <__ieee754_pow+0x3e>
 800c44c:	2300      	movs	r3, #0
 800c44e:	9304      	str	r3, [sp, #16]
 800c450:	2a00      	cmp	r2, #0
 800c452:	d13d      	bne.n	800c4d0 <__ieee754_pow+0x188>
 800c454:	4b51      	ldr	r3, [pc, #324]	; (800c59c <__ieee754_pow+0x254>)
 800c456:	4598      	cmp	r8, r3
 800c458:	d1ea      	bne.n	800c430 <__ieee754_pow+0xe8>
 800c45a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c45e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c462:	ea53 030a 	orrs.w	r3, r3, sl
 800c466:	f000 8459 	beq.w	800cd1c <__ieee754_pow+0x9d4>
 800c46a:	4b4f      	ldr	r3, [pc, #316]	; (800c5a8 <__ieee754_pow+0x260>)
 800c46c:	429c      	cmp	r4, r3
 800c46e:	dd08      	ble.n	800c482 <__ieee754_pow+0x13a>
 800c470:	f1b9 0f00 	cmp.w	r9, #0
 800c474:	f2c0 8456 	blt.w	800cd24 <__ieee754_pow+0x9dc>
 800c478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c47c:	e783      	b.n	800c386 <__ieee754_pow+0x3e>
 800c47e:	2302      	movs	r3, #2
 800c480:	e7e5      	b.n	800c44e <__ieee754_pow+0x106>
 800c482:	f1b9 0f00 	cmp.w	r9, #0
 800c486:	f04f 0000 	mov.w	r0, #0
 800c48a:	f04f 0100 	mov.w	r1, #0
 800c48e:	f6bf af7a 	bge.w	800c386 <__ieee754_pow+0x3e>
 800c492:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c496:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c49a:	e774      	b.n	800c386 <__ieee754_pow+0x3e>
 800c49c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c4a0:	d106      	bne.n	800c4b0 <__ieee754_pow+0x168>
 800c4a2:	4632      	mov	r2, r6
 800c4a4:	463b      	mov	r3, r7
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	f7f4 f8a5 	bl	80005f8 <__aeabi_dmul>
 800c4ae:	e76a      	b.n	800c386 <__ieee754_pow+0x3e>
 800c4b0:	4b3e      	ldr	r3, [pc, #248]	; (800c5ac <__ieee754_pow+0x264>)
 800c4b2:	4599      	cmp	r9, r3
 800c4b4:	d10c      	bne.n	800c4d0 <__ieee754_pow+0x188>
 800c4b6:	2d00      	cmp	r5, #0
 800c4b8:	db0a      	blt.n	800c4d0 <__ieee754_pow+0x188>
 800c4ba:	ec47 6b10 	vmov	d0, r6, r7
 800c4be:	b009      	add	sp, #36	; 0x24
 800c4c0:	ecbd 8b06 	vpop	{d8-d10}
 800c4c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c8:	f000 bd20 	b.w	800cf0c <__ieee754_sqrt>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	9304      	str	r3, [sp, #16]
 800c4d0:	ec47 6b10 	vmov	d0, r6, r7
 800c4d4:	f000 fc62 	bl	800cd9c <fabs>
 800c4d8:	ec51 0b10 	vmov	r0, r1, d0
 800c4dc:	f1ba 0f00 	cmp.w	sl, #0
 800c4e0:	d129      	bne.n	800c536 <__ieee754_pow+0x1ee>
 800c4e2:	b124      	cbz	r4, 800c4ee <__ieee754_pow+0x1a6>
 800c4e4:	4b2f      	ldr	r3, [pc, #188]	; (800c5a4 <__ieee754_pow+0x25c>)
 800c4e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d123      	bne.n	800c536 <__ieee754_pow+0x1ee>
 800c4ee:	f1b9 0f00 	cmp.w	r9, #0
 800c4f2:	da05      	bge.n	800c500 <__ieee754_pow+0x1b8>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	492a      	ldr	r1, [pc, #168]	; (800c5a4 <__ieee754_pow+0x25c>)
 800c4fc:	f7f4 f9a6 	bl	800084c <__aeabi_ddiv>
 800c500:	2d00      	cmp	r5, #0
 800c502:	f6bf af40 	bge.w	800c386 <__ieee754_pow+0x3e>
 800c506:	9b04      	ldr	r3, [sp, #16]
 800c508:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c50c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c510:	431c      	orrs	r4, r3
 800c512:	d108      	bne.n	800c526 <__ieee754_pow+0x1de>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	4610      	mov	r0, r2
 800c51a:	4619      	mov	r1, r3
 800c51c:	f7f3 feb4 	bl	8000288 <__aeabi_dsub>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	e78f      	b.n	800c446 <__ieee754_pow+0xfe>
 800c526:	9b04      	ldr	r3, [sp, #16]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	f47f af2c 	bne.w	800c386 <__ieee754_pow+0x3e>
 800c52e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c532:	4619      	mov	r1, r3
 800c534:	e727      	b.n	800c386 <__ieee754_pow+0x3e>
 800c536:	0feb      	lsrs	r3, r5, #31
 800c538:	3b01      	subs	r3, #1
 800c53a:	9306      	str	r3, [sp, #24]
 800c53c:	9a06      	ldr	r2, [sp, #24]
 800c53e:	9b04      	ldr	r3, [sp, #16]
 800c540:	4313      	orrs	r3, r2
 800c542:	d102      	bne.n	800c54a <__ieee754_pow+0x202>
 800c544:	4632      	mov	r2, r6
 800c546:	463b      	mov	r3, r7
 800c548:	e7e6      	b.n	800c518 <__ieee754_pow+0x1d0>
 800c54a:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <__ieee754_pow+0x268>)
 800c54c:	4598      	cmp	r8, r3
 800c54e:	f340 80fb 	ble.w	800c748 <__ieee754_pow+0x400>
 800c552:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c556:	4598      	cmp	r8, r3
 800c558:	4b13      	ldr	r3, [pc, #76]	; (800c5a8 <__ieee754_pow+0x260>)
 800c55a:	dd0c      	ble.n	800c576 <__ieee754_pow+0x22e>
 800c55c:	429c      	cmp	r4, r3
 800c55e:	dc0f      	bgt.n	800c580 <__ieee754_pow+0x238>
 800c560:	f1b9 0f00 	cmp.w	r9, #0
 800c564:	da0f      	bge.n	800c586 <__ieee754_pow+0x23e>
 800c566:	2000      	movs	r0, #0
 800c568:	b009      	add	sp, #36	; 0x24
 800c56a:	ecbd 8b06 	vpop	{d8-d10}
 800c56e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c572:	f000 bcc2 	b.w	800cefa <__math_oflow>
 800c576:	429c      	cmp	r4, r3
 800c578:	dbf2      	blt.n	800c560 <__ieee754_pow+0x218>
 800c57a:	4b0a      	ldr	r3, [pc, #40]	; (800c5a4 <__ieee754_pow+0x25c>)
 800c57c:	429c      	cmp	r4, r3
 800c57e:	dd19      	ble.n	800c5b4 <__ieee754_pow+0x26c>
 800c580:	f1b9 0f00 	cmp.w	r9, #0
 800c584:	dcef      	bgt.n	800c566 <__ieee754_pow+0x21e>
 800c586:	2000      	movs	r0, #0
 800c588:	b009      	add	sp, #36	; 0x24
 800c58a:	ecbd 8b06 	vpop	{d8-d10}
 800c58e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c592:	f000 bca9 	b.w	800cee8 <__math_uflow>
 800c596:	bf00      	nop
 800c598:	fff00000 	.word	0xfff00000
 800c59c:	7ff00000 	.word	0x7ff00000
 800c5a0:	433fffff 	.word	0x433fffff
 800c5a4:	3ff00000 	.word	0x3ff00000
 800c5a8:	3fefffff 	.word	0x3fefffff
 800c5ac:	3fe00000 	.word	0x3fe00000
 800c5b0:	41e00000 	.word	0x41e00000
 800c5b4:	4b60      	ldr	r3, [pc, #384]	; (800c738 <__ieee754_pow+0x3f0>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f7f3 fe66 	bl	8000288 <__aeabi_dsub>
 800c5bc:	a354      	add	r3, pc, #336	; (adr r3, 800c710 <__ieee754_pow+0x3c8>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	460d      	mov	r5, r1
 800c5c6:	f7f4 f817 	bl	80005f8 <__aeabi_dmul>
 800c5ca:	a353      	add	r3, pc, #332	; (adr r3, 800c718 <__ieee754_pow+0x3d0>)
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	460f      	mov	r7, r1
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7f4 f80e 	bl	80005f8 <__aeabi_dmul>
 800c5dc:	4b57      	ldr	r3, [pc, #348]	; (800c73c <__ieee754_pow+0x3f4>)
 800c5de:	4682      	mov	sl, r0
 800c5e0:	468b      	mov	fp, r1
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f7f4 f806 	bl	80005f8 <__aeabi_dmul>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	a14b      	add	r1, pc, #300	; (adr r1, 800c720 <__ieee754_pow+0x3d8>)
 800c5f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5f6:	f7f3 fe47 	bl	8000288 <__aeabi_dsub>
 800c5fa:	4622      	mov	r2, r4
 800c5fc:	462b      	mov	r3, r5
 800c5fe:	f7f3 fffb 	bl	80005f8 <__aeabi_dmul>
 800c602:	4602      	mov	r2, r0
 800c604:	460b      	mov	r3, r1
 800c606:	2000      	movs	r0, #0
 800c608:	494d      	ldr	r1, [pc, #308]	; (800c740 <__ieee754_pow+0x3f8>)
 800c60a:	f7f3 fe3d 	bl	8000288 <__aeabi_dsub>
 800c60e:	4622      	mov	r2, r4
 800c610:	4680      	mov	r8, r0
 800c612:	4689      	mov	r9, r1
 800c614:	462b      	mov	r3, r5
 800c616:	4620      	mov	r0, r4
 800c618:	4629      	mov	r1, r5
 800c61a:	f7f3 ffed 	bl	80005f8 <__aeabi_dmul>
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	4640      	mov	r0, r8
 800c624:	4649      	mov	r1, r9
 800c626:	f7f3 ffe7 	bl	80005f8 <__aeabi_dmul>
 800c62a:	a33f      	add	r3, pc, #252	; (adr r3, 800c728 <__ieee754_pow+0x3e0>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	4602      	mov	r2, r0
 800c636:	460b      	mov	r3, r1
 800c638:	4650      	mov	r0, sl
 800c63a:	4659      	mov	r1, fp
 800c63c:	f7f3 fe24 	bl	8000288 <__aeabi_dsub>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4680      	mov	r8, r0
 800c646:	4689      	mov	r9, r1
 800c648:	4630      	mov	r0, r6
 800c64a:	4639      	mov	r1, r7
 800c64c:	f7f3 fe1e 	bl	800028c <__adddf3>
 800c650:	2000      	movs	r0, #0
 800c652:	4632      	mov	r2, r6
 800c654:	463b      	mov	r3, r7
 800c656:	4604      	mov	r4, r0
 800c658:	460d      	mov	r5, r1
 800c65a:	f7f3 fe15 	bl	8000288 <__aeabi_dsub>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	4640      	mov	r0, r8
 800c664:	4649      	mov	r1, r9
 800c666:	f7f3 fe0f 	bl	8000288 <__aeabi_dsub>
 800c66a:	9b04      	ldr	r3, [sp, #16]
 800c66c:	9a06      	ldr	r2, [sp, #24]
 800c66e:	3b01      	subs	r3, #1
 800c670:	4313      	orrs	r3, r2
 800c672:	4682      	mov	sl, r0
 800c674:	468b      	mov	fp, r1
 800c676:	f040 81e7 	bne.w	800ca48 <__ieee754_pow+0x700>
 800c67a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c730 <__ieee754_pow+0x3e8>
 800c67e:	eeb0 8a47 	vmov.f32	s16, s14
 800c682:	eef0 8a67 	vmov.f32	s17, s15
 800c686:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c68a:	2600      	movs	r6, #0
 800c68c:	4632      	mov	r2, r6
 800c68e:	463b      	mov	r3, r7
 800c690:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c694:	f7f3 fdf8 	bl	8000288 <__aeabi_dsub>
 800c698:	4622      	mov	r2, r4
 800c69a:	462b      	mov	r3, r5
 800c69c:	f7f3 ffac 	bl	80005f8 <__aeabi_dmul>
 800c6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6a4:	4680      	mov	r8, r0
 800c6a6:	4689      	mov	r9, r1
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	4659      	mov	r1, fp
 800c6ac:	f7f3 ffa4 	bl	80005f8 <__aeabi_dmul>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4640      	mov	r0, r8
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	f7f3 fde8 	bl	800028c <__adddf3>
 800c6bc:	4632      	mov	r2, r6
 800c6be:	463b      	mov	r3, r7
 800c6c0:	4680      	mov	r8, r0
 800c6c2:	4689      	mov	r9, r1
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	f7f3 ff96 	bl	80005f8 <__aeabi_dmul>
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	f7f3 fdd8 	bl	800028c <__adddf3>
 800c6dc:	4b19      	ldr	r3, [pc, #100]	; (800c744 <__ieee754_pow+0x3fc>)
 800c6de:	4299      	cmp	r1, r3
 800c6e0:	ec45 4b19 	vmov	d9, r4, r5
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	460f      	mov	r7, r1
 800c6e8:	468b      	mov	fp, r1
 800c6ea:	f340 82f0 	ble.w	800ccce <__ieee754_pow+0x986>
 800c6ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c6f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c6f6:	4303      	orrs	r3, r0
 800c6f8:	f000 81e4 	beq.w	800cac4 <__ieee754_pow+0x77c>
 800c6fc:	ec51 0b18 	vmov	r0, r1, d8
 800c700:	2200      	movs	r2, #0
 800c702:	2300      	movs	r3, #0
 800c704:	f7f4 f9ea 	bl	8000adc <__aeabi_dcmplt>
 800c708:	3800      	subs	r0, #0
 800c70a:	bf18      	it	ne
 800c70c:	2001      	movne	r0, #1
 800c70e:	e72b      	b.n	800c568 <__ieee754_pow+0x220>
 800c710:	60000000 	.word	0x60000000
 800c714:	3ff71547 	.word	0x3ff71547
 800c718:	f85ddf44 	.word	0xf85ddf44
 800c71c:	3e54ae0b 	.word	0x3e54ae0b
 800c720:	55555555 	.word	0x55555555
 800c724:	3fd55555 	.word	0x3fd55555
 800c728:	652b82fe 	.word	0x652b82fe
 800c72c:	3ff71547 	.word	0x3ff71547
 800c730:	00000000 	.word	0x00000000
 800c734:	bff00000 	.word	0xbff00000
 800c738:	3ff00000 	.word	0x3ff00000
 800c73c:	3fd00000 	.word	0x3fd00000
 800c740:	3fe00000 	.word	0x3fe00000
 800c744:	408fffff 	.word	0x408fffff
 800c748:	4bd5      	ldr	r3, [pc, #852]	; (800caa0 <__ieee754_pow+0x758>)
 800c74a:	402b      	ands	r3, r5
 800c74c:	2200      	movs	r2, #0
 800c74e:	b92b      	cbnz	r3, 800c75c <__ieee754_pow+0x414>
 800c750:	4bd4      	ldr	r3, [pc, #848]	; (800caa4 <__ieee754_pow+0x75c>)
 800c752:	f7f3 ff51 	bl	80005f8 <__aeabi_dmul>
 800c756:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c75a:	460c      	mov	r4, r1
 800c75c:	1523      	asrs	r3, r4, #20
 800c75e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c762:	4413      	add	r3, r2
 800c764:	9305      	str	r3, [sp, #20]
 800c766:	4bd0      	ldr	r3, [pc, #832]	; (800caa8 <__ieee754_pow+0x760>)
 800c768:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c76c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c770:	429c      	cmp	r4, r3
 800c772:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c776:	dd08      	ble.n	800c78a <__ieee754_pow+0x442>
 800c778:	4bcc      	ldr	r3, [pc, #816]	; (800caac <__ieee754_pow+0x764>)
 800c77a:	429c      	cmp	r4, r3
 800c77c:	f340 8162 	ble.w	800ca44 <__ieee754_pow+0x6fc>
 800c780:	9b05      	ldr	r3, [sp, #20]
 800c782:	3301      	adds	r3, #1
 800c784:	9305      	str	r3, [sp, #20]
 800c786:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c78a:	2400      	movs	r4, #0
 800c78c:	00e3      	lsls	r3, r4, #3
 800c78e:	9307      	str	r3, [sp, #28]
 800c790:	4bc7      	ldr	r3, [pc, #796]	; (800cab0 <__ieee754_pow+0x768>)
 800c792:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c796:	ed93 7b00 	vldr	d7, [r3]
 800c79a:	4629      	mov	r1, r5
 800c79c:	ec53 2b17 	vmov	r2, r3, d7
 800c7a0:	eeb0 9a47 	vmov.f32	s18, s14
 800c7a4:	eef0 9a67 	vmov.f32	s19, s15
 800c7a8:	4682      	mov	sl, r0
 800c7aa:	f7f3 fd6d 	bl	8000288 <__aeabi_dsub>
 800c7ae:	4652      	mov	r2, sl
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	460f      	mov	r7, r1
 800c7b4:	462b      	mov	r3, r5
 800c7b6:	ec51 0b19 	vmov	r0, r1, d9
 800c7ba:	f7f3 fd67 	bl	800028c <__adddf3>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	49bb      	ldr	r1, [pc, #748]	; (800cab4 <__ieee754_pow+0x76c>)
 800c7c6:	f7f4 f841 	bl	800084c <__aeabi_ddiv>
 800c7ca:	ec41 0b1a 	vmov	d10, r0, r1
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	4639      	mov	r1, r7
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e0:	9302      	str	r3, [sp, #8]
 800c7e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7e6:	46ab      	mov	fp, r5
 800c7e8:	106d      	asrs	r5, r5, #1
 800c7ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c7ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c7f2:	ec41 0b18 	vmov	d8, r0, r1
 800c7f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	4640      	mov	r0, r8
 800c7fe:	4649      	mov	r1, r9
 800c800:	4614      	mov	r4, r2
 800c802:	461d      	mov	r5, r3
 800c804:	f7f3 fef8 	bl	80005f8 <__aeabi_dmul>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4630      	mov	r0, r6
 800c80e:	4639      	mov	r1, r7
 800c810:	f7f3 fd3a 	bl	8000288 <__aeabi_dsub>
 800c814:	ec53 2b19 	vmov	r2, r3, d9
 800c818:	4606      	mov	r6, r0
 800c81a:	460f      	mov	r7, r1
 800c81c:	4620      	mov	r0, r4
 800c81e:	4629      	mov	r1, r5
 800c820:	f7f3 fd32 	bl	8000288 <__aeabi_dsub>
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	4650      	mov	r0, sl
 800c82a:	4659      	mov	r1, fp
 800c82c:	f7f3 fd2c 	bl	8000288 <__aeabi_dsub>
 800c830:	4642      	mov	r2, r8
 800c832:	464b      	mov	r3, r9
 800c834:	f7f3 fee0 	bl	80005f8 <__aeabi_dmul>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	4630      	mov	r0, r6
 800c83e:	4639      	mov	r1, r7
 800c840:	f7f3 fd22 	bl	8000288 <__aeabi_dsub>
 800c844:	ec53 2b1a 	vmov	r2, r3, d10
 800c848:	f7f3 fed6 	bl	80005f8 <__aeabi_dmul>
 800c84c:	ec53 2b18 	vmov	r2, r3, d8
 800c850:	ec41 0b19 	vmov	d9, r0, r1
 800c854:	ec51 0b18 	vmov	r0, r1, d8
 800c858:	f7f3 fece 	bl	80005f8 <__aeabi_dmul>
 800c85c:	a37c      	add	r3, pc, #496	; (adr r3, 800ca50 <__ieee754_pow+0x708>)
 800c85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c862:	4604      	mov	r4, r0
 800c864:	460d      	mov	r5, r1
 800c866:	f7f3 fec7 	bl	80005f8 <__aeabi_dmul>
 800c86a:	a37b      	add	r3, pc, #492	; (adr r3, 800ca58 <__ieee754_pow+0x710>)
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	f7f3 fd0c 	bl	800028c <__adddf3>
 800c874:	4622      	mov	r2, r4
 800c876:	462b      	mov	r3, r5
 800c878:	f7f3 febe 	bl	80005f8 <__aeabi_dmul>
 800c87c:	a378      	add	r3, pc, #480	; (adr r3, 800ca60 <__ieee754_pow+0x718>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	f7f3 fd03 	bl	800028c <__adddf3>
 800c886:	4622      	mov	r2, r4
 800c888:	462b      	mov	r3, r5
 800c88a:	f7f3 feb5 	bl	80005f8 <__aeabi_dmul>
 800c88e:	a376      	add	r3, pc, #472	; (adr r3, 800ca68 <__ieee754_pow+0x720>)
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	f7f3 fcfa 	bl	800028c <__adddf3>
 800c898:	4622      	mov	r2, r4
 800c89a:	462b      	mov	r3, r5
 800c89c:	f7f3 feac 	bl	80005f8 <__aeabi_dmul>
 800c8a0:	a373      	add	r3, pc, #460	; (adr r3, 800ca70 <__ieee754_pow+0x728>)
 800c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a6:	f7f3 fcf1 	bl	800028c <__adddf3>
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	f7f3 fea3 	bl	80005f8 <__aeabi_dmul>
 800c8b2:	a371      	add	r3, pc, #452	; (adr r3, 800ca78 <__ieee754_pow+0x730>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 fce8 	bl	800028c <__adddf3>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	462b      	mov	r3, r5
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	f7f3 fe96 	bl	80005f8 <__aeabi_dmul>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	4639      	mov	r1, r7
 800c8d4:	f7f3 fe90 	bl	80005f8 <__aeabi_dmul>
 800c8d8:	4642      	mov	r2, r8
 800c8da:	4604      	mov	r4, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	464b      	mov	r3, r9
 800c8e0:	ec51 0b18 	vmov	r0, r1, d8
 800c8e4:	f7f3 fcd2 	bl	800028c <__adddf3>
 800c8e8:	ec53 2b19 	vmov	r2, r3, d9
 800c8ec:	f7f3 fe84 	bl	80005f8 <__aeabi_dmul>
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	462b      	mov	r3, r5
 800c8f4:	f7f3 fcca 	bl	800028c <__adddf3>
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	4682      	mov	sl, r0
 800c8fc:	468b      	mov	fp, r1
 800c8fe:	464b      	mov	r3, r9
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	f7f3 fe78 	bl	80005f8 <__aeabi_dmul>
 800c908:	4b6b      	ldr	r3, [pc, #428]	; (800cab8 <__ieee754_pow+0x770>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	4606      	mov	r6, r0
 800c90e:	460f      	mov	r7, r1
 800c910:	f7f3 fcbc 	bl	800028c <__adddf3>
 800c914:	4652      	mov	r2, sl
 800c916:	465b      	mov	r3, fp
 800c918:	f7f3 fcb8 	bl	800028c <__adddf3>
 800c91c:	2000      	movs	r0, #0
 800c91e:	4604      	mov	r4, r0
 800c920:	460d      	mov	r5, r1
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	4640      	mov	r0, r8
 800c928:	4649      	mov	r1, r9
 800c92a:	f7f3 fe65 	bl	80005f8 <__aeabi_dmul>
 800c92e:	4b62      	ldr	r3, [pc, #392]	; (800cab8 <__ieee754_pow+0x770>)
 800c930:	4680      	mov	r8, r0
 800c932:	4689      	mov	r9, r1
 800c934:	2200      	movs	r2, #0
 800c936:	4620      	mov	r0, r4
 800c938:	4629      	mov	r1, r5
 800c93a:	f7f3 fca5 	bl	8000288 <__aeabi_dsub>
 800c93e:	4632      	mov	r2, r6
 800c940:	463b      	mov	r3, r7
 800c942:	f7f3 fca1 	bl	8000288 <__aeabi_dsub>
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	4650      	mov	r0, sl
 800c94c:	4659      	mov	r1, fp
 800c94e:	f7f3 fc9b 	bl	8000288 <__aeabi_dsub>
 800c952:	ec53 2b18 	vmov	r2, r3, d8
 800c956:	f7f3 fe4f 	bl	80005f8 <__aeabi_dmul>
 800c95a:	4622      	mov	r2, r4
 800c95c:	4606      	mov	r6, r0
 800c95e:	460f      	mov	r7, r1
 800c960:	462b      	mov	r3, r5
 800c962:	ec51 0b19 	vmov	r0, r1, d9
 800c966:	f7f3 fe47 	bl	80005f8 <__aeabi_dmul>
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	4630      	mov	r0, r6
 800c970:	4639      	mov	r1, r7
 800c972:	f7f3 fc8b 	bl	800028c <__adddf3>
 800c976:	4606      	mov	r6, r0
 800c978:	460f      	mov	r7, r1
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4640      	mov	r0, r8
 800c980:	4649      	mov	r1, r9
 800c982:	f7f3 fc83 	bl	800028c <__adddf3>
 800c986:	a33e      	add	r3, pc, #248	; (adr r3, 800ca80 <__ieee754_pow+0x738>)
 800c988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98c:	2000      	movs	r0, #0
 800c98e:	4604      	mov	r4, r0
 800c990:	460d      	mov	r5, r1
 800c992:	f7f3 fe31 	bl	80005f8 <__aeabi_dmul>
 800c996:	4642      	mov	r2, r8
 800c998:	ec41 0b18 	vmov	d8, r0, r1
 800c99c:	464b      	mov	r3, r9
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	f7f3 fc71 	bl	8000288 <__aeabi_dsub>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	4639      	mov	r1, r7
 800c9ae:	f7f3 fc6b 	bl	8000288 <__aeabi_dsub>
 800c9b2:	a335      	add	r3, pc, #212	; (adr r3, 800ca88 <__ieee754_pow+0x740>)
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	f7f3 fe1e 	bl	80005f8 <__aeabi_dmul>
 800c9bc:	a334      	add	r3, pc, #208	; (adr r3, 800ca90 <__ieee754_pow+0x748>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	460f      	mov	r7, r1
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	f7f3 fe15 	bl	80005f8 <__aeabi_dmul>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	4639      	mov	r1, r7
 800c9d6:	f7f3 fc59 	bl	800028c <__adddf3>
 800c9da:	9a07      	ldr	r2, [sp, #28]
 800c9dc:	4b37      	ldr	r3, [pc, #220]	; (800cabc <__ieee754_pow+0x774>)
 800c9de:	4413      	add	r3, r2
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	f7f3 fc52 	bl	800028c <__adddf3>
 800c9e8:	4682      	mov	sl, r0
 800c9ea:	9805      	ldr	r0, [sp, #20]
 800c9ec:	468b      	mov	fp, r1
 800c9ee:	f7f3 fd99 	bl	8000524 <__aeabi_i2d>
 800c9f2:	9a07      	ldr	r2, [sp, #28]
 800c9f4:	4b32      	ldr	r3, [pc, #200]	; (800cac0 <__ieee754_pow+0x778>)
 800c9f6:	4413      	add	r3, r2
 800c9f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	460f      	mov	r7, r1
 800ca00:	4652      	mov	r2, sl
 800ca02:	465b      	mov	r3, fp
 800ca04:	ec51 0b18 	vmov	r0, r1, d8
 800ca08:	f7f3 fc40 	bl	800028c <__adddf3>
 800ca0c:	4642      	mov	r2, r8
 800ca0e:	464b      	mov	r3, r9
 800ca10:	f7f3 fc3c 	bl	800028c <__adddf3>
 800ca14:	4632      	mov	r2, r6
 800ca16:	463b      	mov	r3, r7
 800ca18:	f7f3 fc38 	bl	800028c <__adddf3>
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	4632      	mov	r2, r6
 800ca20:	463b      	mov	r3, r7
 800ca22:	4604      	mov	r4, r0
 800ca24:	460d      	mov	r5, r1
 800ca26:	f7f3 fc2f 	bl	8000288 <__aeabi_dsub>
 800ca2a:	4642      	mov	r2, r8
 800ca2c:	464b      	mov	r3, r9
 800ca2e:	f7f3 fc2b 	bl	8000288 <__aeabi_dsub>
 800ca32:	ec53 2b18 	vmov	r2, r3, d8
 800ca36:	f7f3 fc27 	bl	8000288 <__aeabi_dsub>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4650      	mov	r0, sl
 800ca40:	4659      	mov	r1, fp
 800ca42:	e610      	b.n	800c666 <__ieee754_pow+0x31e>
 800ca44:	2401      	movs	r4, #1
 800ca46:	e6a1      	b.n	800c78c <__ieee754_pow+0x444>
 800ca48:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ca98 <__ieee754_pow+0x750>
 800ca4c:	e617      	b.n	800c67e <__ieee754_pow+0x336>
 800ca4e:	bf00      	nop
 800ca50:	4a454eef 	.word	0x4a454eef
 800ca54:	3fca7e28 	.word	0x3fca7e28
 800ca58:	93c9db65 	.word	0x93c9db65
 800ca5c:	3fcd864a 	.word	0x3fcd864a
 800ca60:	a91d4101 	.word	0xa91d4101
 800ca64:	3fd17460 	.word	0x3fd17460
 800ca68:	518f264d 	.word	0x518f264d
 800ca6c:	3fd55555 	.word	0x3fd55555
 800ca70:	db6fabff 	.word	0xdb6fabff
 800ca74:	3fdb6db6 	.word	0x3fdb6db6
 800ca78:	33333303 	.word	0x33333303
 800ca7c:	3fe33333 	.word	0x3fe33333
 800ca80:	e0000000 	.word	0xe0000000
 800ca84:	3feec709 	.word	0x3feec709
 800ca88:	dc3a03fd 	.word	0xdc3a03fd
 800ca8c:	3feec709 	.word	0x3feec709
 800ca90:	145b01f5 	.word	0x145b01f5
 800ca94:	be3e2fe0 	.word	0xbe3e2fe0
 800ca98:	00000000 	.word	0x00000000
 800ca9c:	3ff00000 	.word	0x3ff00000
 800caa0:	7ff00000 	.word	0x7ff00000
 800caa4:	43400000 	.word	0x43400000
 800caa8:	0003988e 	.word	0x0003988e
 800caac:	000bb679 	.word	0x000bb679
 800cab0:	0800d4e0 	.word	0x0800d4e0
 800cab4:	3ff00000 	.word	0x3ff00000
 800cab8:	40080000 	.word	0x40080000
 800cabc:	0800d500 	.word	0x0800d500
 800cac0:	0800d4f0 	.word	0x0800d4f0
 800cac4:	a3b3      	add	r3, pc, #716	; (adr r3, 800cd94 <__ieee754_pow+0xa4c>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	4640      	mov	r0, r8
 800cacc:	4649      	mov	r1, r9
 800cace:	f7f3 fbdd 	bl	800028c <__adddf3>
 800cad2:	4622      	mov	r2, r4
 800cad4:	ec41 0b1a 	vmov	d10, r0, r1
 800cad8:	462b      	mov	r3, r5
 800cada:	4630      	mov	r0, r6
 800cadc:	4639      	mov	r1, r7
 800cade:	f7f3 fbd3 	bl	8000288 <__aeabi_dsub>
 800cae2:	4602      	mov	r2, r0
 800cae4:	460b      	mov	r3, r1
 800cae6:	ec51 0b1a 	vmov	r0, r1, d10
 800caea:	f7f4 f815 	bl	8000b18 <__aeabi_dcmpgt>
 800caee:	2800      	cmp	r0, #0
 800caf0:	f47f ae04 	bne.w	800c6fc <__ieee754_pow+0x3b4>
 800caf4:	4aa2      	ldr	r2, [pc, #648]	; (800cd80 <__ieee754_pow+0xa38>)
 800caf6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cafa:	4293      	cmp	r3, r2
 800cafc:	f340 8107 	ble.w	800cd0e <__ieee754_pow+0x9c6>
 800cb00:	151b      	asrs	r3, r3, #20
 800cb02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cb06:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cb0a:	fa4a fa03 	asr.w	sl, sl, r3
 800cb0e:	44da      	add	sl, fp
 800cb10:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cb14:	489b      	ldr	r0, [pc, #620]	; (800cd84 <__ieee754_pow+0xa3c>)
 800cb16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cb1a:	4108      	asrs	r0, r1
 800cb1c:	ea00 030a 	and.w	r3, r0, sl
 800cb20:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cb24:	f1c1 0114 	rsb	r1, r1, #20
 800cb28:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cb2c:	fa4a fa01 	asr.w	sl, sl, r1
 800cb30:	f1bb 0f00 	cmp.w	fp, #0
 800cb34:	f04f 0200 	mov.w	r2, #0
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	bfb8      	it	lt
 800cb3e:	f1ca 0a00 	rsblt	sl, sl, #0
 800cb42:	f7f3 fba1 	bl	8000288 <__aeabi_dsub>
 800cb46:	ec41 0b19 	vmov	d9, r0, r1
 800cb4a:	4642      	mov	r2, r8
 800cb4c:	464b      	mov	r3, r9
 800cb4e:	ec51 0b19 	vmov	r0, r1, d9
 800cb52:	f7f3 fb9b 	bl	800028c <__adddf3>
 800cb56:	a37a      	add	r3, pc, #488	; (adr r3, 800cd40 <__ieee754_pow+0x9f8>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	4604      	mov	r4, r0
 800cb60:	460d      	mov	r5, r1
 800cb62:	f7f3 fd49 	bl	80005f8 <__aeabi_dmul>
 800cb66:	ec53 2b19 	vmov	r2, r3, d9
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460f      	mov	r7, r1
 800cb6e:	4620      	mov	r0, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	f7f3 fb89 	bl	8000288 <__aeabi_dsub>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	4649      	mov	r1, r9
 800cb7e:	f7f3 fb83 	bl	8000288 <__aeabi_dsub>
 800cb82:	a371      	add	r3, pc, #452	; (adr r3, 800cd48 <__ieee754_pow+0xa00>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	f7f3 fd36 	bl	80005f8 <__aeabi_dmul>
 800cb8c:	a370      	add	r3, pc, #448	; (adr r3, 800cd50 <__ieee754_pow+0xa08>)
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	4680      	mov	r8, r0
 800cb94:	4689      	mov	r9, r1
 800cb96:	4620      	mov	r0, r4
 800cb98:	4629      	mov	r1, r5
 800cb9a:	f7f3 fd2d 	bl	80005f8 <__aeabi_dmul>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	4640      	mov	r0, r8
 800cba4:	4649      	mov	r1, r9
 800cba6:	f7f3 fb71 	bl	800028c <__adddf3>
 800cbaa:	4604      	mov	r4, r0
 800cbac:	460d      	mov	r5, r1
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	4639      	mov	r1, r7
 800cbb6:	f7f3 fb69 	bl	800028c <__adddf3>
 800cbba:	4632      	mov	r2, r6
 800cbbc:	463b      	mov	r3, r7
 800cbbe:	4680      	mov	r8, r0
 800cbc0:	4689      	mov	r9, r1
 800cbc2:	f7f3 fb61 	bl	8000288 <__aeabi_dsub>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4620      	mov	r0, r4
 800cbcc:	4629      	mov	r1, r5
 800cbce:	f7f3 fb5b 	bl	8000288 <__aeabi_dsub>
 800cbd2:	4642      	mov	r2, r8
 800cbd4:	4606      	mov	r6, r0
 800cbd6:	460f      	mov	r7, r1
 800cbd8:	464b      	mov	r3, r9
 800cbda:	4640      	mov	r0, r8
 800cbdc:	4649      	mov	r1, r9
 800cbde:	f7f3 fd0b 	bl	80005f8 <__aeabi_dmul>
 800cbe2:	a35d      	add	r3, pc, #372	; (adr r3, 800cd58 <__ieee754_pow+0xa10>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	4604      	mov	r4, r0
 800cbea:	460d      	mov	r5, r1
 800cbec:	f7f3 fd04 	bl	80005f8 <__aeabi_dmul>
 800cbf0:	a35b      	add	r3, pc, #364	; (adr r3, 800cd60 <__ieee754_pow+0xa18>)
 800cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf6:	f7f3 fb47 	bl	8000288 <__aeabi_dsub>
 800cbfa:	4622      	mov	r2, r4
 800cbfc:	462b      	mov	r3, r5
 800cbfe:	f7f3 fcfb 	bl	80005f8 <__aeabi_dmul>
 800cc02:	a359      	add	r3, pc, #356	; (adr r3, 800cd68 <__ieee754_pow+0xa20>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fb40 	bl	800028c <__adddf3>
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	462b      	mov	r3, r5
 800cc10:	f7f3 fcf2 	bl	80005f8 <__aeabi_dmul>
 800cc14:	a356      	add	r3, pc, #344	; (adr r3, 800cd70 <__ieee754_pow+0xa28>)
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	f7f3 fb35 	bl	8000288 <__aeabi_dsub>
 800cc1e:	4622      	mov	r2, r4
 800cc20:	462b      	mov	r3, r5
 800cc22:	f7f3 fce9 	bl	80005f8 <__aeabi_dmul>
 800cc26:	a354      	add	r3, pc, #336	; (adr r3, 800cd78 <__ieee754_pow+0xa30>)
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f7f3 fb2e 	bl	800028c <__adddf3>
 800cc30:	4622      	mov	r2, r4
 800cc32:	462b      	mov	r3, r5
 800cc34:	f7f3 fce0 	bl	80005f8 <__aeabi_dmul>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	4649      	mov	r1, r9
 800cc40:	f7f3 fb22 	bl	8000288 <__aeabi_dsub>
 800cc44:	4604      	mov	r4, r0
 800cc46:	460d      	mov	r5, r1
 800cc48:	4602      	mov	r2, r0
 800cc4a:	460b      	mov	r3, r1
 800cc4c:	4640      	mov	r0, r8
 800cc4e:	4649      	mov	r1, r9
 800cc50:	f7f3 fcd2 	bl	80005f8 <__aeabi_dmul>
 800cc54:	2200      	movs	r2, #0
 800cc56:	ec41 0b19 	vmov	d9, r0, r1
 800cc5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc5e:	4620      	mov	r0, r4
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7f3 fb11 	bl	8000288 <__aeabi_dsub>
 800cc66:	4602      	mov	r2, r0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	ec51 0b19 	vmov	r0, r1, d9
 800cc6e:	f7f3 fded 	bl	800084c <__aeabi_ddiv>
 800cc72:	4632      	mov	r2, r6
 800cc74:	4604      	mov	r4, r0
 800cc76:	460d      	mov	r5, r1
 800cc78:	463b      	mov	r3, r7
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	4649      	mov	r1, r9
 800cc7e:	f7f3 fcbb 	bl	80005f8 <__aeabi_dmul>
 800cc82:	4632      	mov	r2, r6
 800cc84:	463b      	mov	r3, r7
 800cc86:	f7f3 fb01 	bl	800028c <__adddf3>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	4620      	mov	r0, r4
 800cc90:	4629      	mov	r1, r5
 800cc92:	f7f3 faf9 	bl	8000288 <__aeabi_dsub>
 800cc96:	4642      	mov	r2, r8
 800cc98:	464b      	mov	r3, r9
 800cc9a:	f7f3 faf5 	bl	8000288 <__aeabi_dsub>
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4602      	mov	r2, r0
 800cca2:	4939      	ldr	r1, [pc, #228]	; (800cd88 <__ieee754_pow+0xa40>)
 800cca4:	2000      	movs	r0, #0
 800cca6:	f7f3 faef 	bl	8000288 <__aeabi_dsub>
 800ccaa:	ec41 0b10 	vmov	d0, r0, r1
 800ccae:	ee10 3a90 	vmov	r3, s1
 800ccb2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ccb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccba:	da2b      	bge.n	800cd14 <__ieee754_pow+0x9cc>
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	f000 f877 	bl	800cdb0 <scalbn>
 800ccc2:	ec51 0b10 	vmov	r0, r1, d0
 800ccc6:	ec53 2b18 	vmov	r2, r3, d8
 800ccca:	f7ff bbee 	b.w	800c4aa <__ieee754_pow+0x162>
 800ccce:	4b2f      	ldr	r3, [pc, #188]	; (800cd8c <__ieee754_pow+0xa44>)
 800ccd0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ccd4:	429e      	cmp	r6, r3
 800ccd6:	f77f af0d 	ble.w	800caf4 <__ieee754_pow+0x7ac>
 800ccda:	4b2d      	ldr	r3, [pc, #180]	; (800cd90 <__ieee754_pow+0xa48>)
 800ccdc:	440b      	add	r3, r1
 800ccde:	4303      	orrs	r3, r0
 800cce0:	d009      	beq.n	800ccf6 <__ieee754_pow+0x9ae>
 800cce2:	ec51 0b18 	vmov	r0, r1, d8
 800cce6:	2200      	movs	r2, #0
 800cce8:	2300      	movs	r3, #0
 800ccea:	f7f3 fef7 	bl	8000adc <__aeabi_dcmplt>
 800ccee:	3800      	subs	r0, #0
 800ccf0:	bf18      	it	ne
 800ccf2:	2001      	movne	r0, #1
 800ccf4:	e448      	b.n	800c588 <__ieee754_pow+0x240>
 800ccf6:	4622      	mov	r2, r4
 800ccf8:	462b      	mov	r3, r5
 800ccfa:	f7f3 fac5 	bl	8000288 <__aeabi_dsub>
 800ccfe:	4642      	mov	r2, r8
 800cd00:	464b      	mov	r3, r9
 800cd02:	f7f3 feff 	bl	8000b04 <__aeabi_dcmpge>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	f43f aef4 	beq.w	800caf4 <__ieee754_pow+0x7ac>
 800cd0c:	e7e9      	b.n	800cce2 <__ieee754_pow+0x99a>
 800cd0e:	f04f 0a00 	mov.w	sl, #0
 800cd12:	e71a      	b.n	800cb4a <__ieee754_pow+0x802>
 800cd14:	ec51 0b10 	vmov	r0, r1, d0
 800cd18:	4619      	mov	r1, r3
 800cd1a:	e7d4      	b.n	800ccc6 <__ieee754_pow+0x97e>
 800cd1c:	491a      	ldr	r1, [pc, #104]	; (800cd88 <__ieee754_pow+0xa40>)
 800cd1e:	2000      	movs	r0, #0
 800cd20:	f7ff bb31 	b.w	800c386 <__ieee754_pow+0x3e>
 800cd24:	2000      	movs	r0, #0
 800cd26:	2100      	movs	r1, #0
 800cd28:	f7ff bb2d 	b.w	800c386 <__ieee754_pow+0x3e>
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	4639      	mov	r1, r7
 800cd30:	f7ff bb29 	b.w	800c386 <__ieee754_pow+0x3e>
 800cd34:	9204      	str	r2, [sp, #16]
 800cd36:	f7ff bb7b 	b.w	800c430 <__ieee754_pow+0xe8>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	f7ff bb65 	b.w	800c40a <__ieee754_pow+0xc2>
 800cd40:	00000000 	.word	0x00000000
 800cd44:	3fe62e43 	.word	0x3fe62e43
 800cd48:	fefa39ef 	.word	0xfefa39ef
 800cd4c:	3fe62e42 	.word	0x3fe62e42
 800cd50:	0ca86c39 	.word	0x0ca86c39
 800cd54:	be205c61 	.word	0xbe205c61
 800cd58:	72bea4d0 	.word	0x72bea4d0
 800cd5c:	3e663769 	.word	0x3e663769
 800cd60:	c5d26bf1 	.word	0xc5d26bf1
 800cd64:	3ebbbd41 	.word	0x3ebbbd41
 800cd68:	af25de2c 	.word	0xaf25de2c
 800cd6c:	3f11566a 	.word	0x3f11566a
 800cd70:	16bebd93 	.word	0x16bebd93
 800cd74:	3f66c16c 	.word	0x3f66c16c
 800cd78:	5555553e 	.word	0x5555553e
 800cd7c:	3fc55555 	.word	0x3fc55555
 800cd80:	3fe00000 	.word	0x3fe00000
 800cd84:	fff00000 	.word	0xfff00000
 800cd88:	3ff00000 	.word	0x3ff00000
 800cd8c:	4090cbff 	.word	0x4090cbff
 800cd90:	3f6f3400 	.word	0x3f6f3400
 800cd94:	652b82fe 	.word	0x652b82fe
 800cd98:	3c971547 	.word	0x3c971547

0800cd9c <fabs>:
 800cd9c:	ec51 0b10 	vmov	r0, r1, d0
 800cda0:	ee10 2a10 	vmov	r2, s0
 800cda4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cda8:	ec43 2b10 	vmov	d0, r2, r3
 800cdac:	4770      	bx	lr
	...

0800cdb0 <scalbn>:
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	ec55 4b10 	vmov	r4, r5, d0
 800cdb6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cdba:	4606      	mov	r6, r0
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	b999      	cbnz	r1, 800cde8 <scalbn+0x38>
 800cdc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdc4:	4323      	orrs	r3, r4
 800cdc6:	d03f      	beq.n	800ce48 <scalbn+0x98>
 800cdc8:	4b35      	ldr	r3, [pc, #212]	; (800cea0 <scalbn+0xf0>)
 800cdca:	4629      	mov	r1, r5
 800cdcc:	ee10 0a10 	vmov	r0, s0
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f7f3 fc11 	bl	80005f8 <__aeabi_dmul>
 800cdd6:	4b33      	ldr	r3, [pc, #204]	; (800cea4 <scalbn+0xf4>)
 800cdd8:	429e      	cmp	r6, r3
 800cdda:	4604      	mov	r4, r0
 800cddc:	460d      	mov	r5, r1
 800cdde:	da10      	bge.n	800ce02 <scalbn+0x52>
 800cde0:	a327      	add	r3, pc, #156	; (adr r3, 800ce80 <scalbn+0xd0>)
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	e01f      	b.n	800ce28 <scalbn+0x78>
 800cde8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cdec:	4291      	cmp	r1, r2
 800cdee:	d10c      	bne.n	800ce0a <scalbn+0x5a>
 800cdf0:	ee10 2a10 	vmov	r2, s0
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	f7f3 fa48 	bl	800028c <__adddf3>
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	460d      	mov	r5, r1
 800ce00:	e022      	b.n	800ce48 <scalbn+0x98>
 800ce02:	460b      	mov	r3, r1
 800ce04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ce08:	3936      	subs	r1, #54	; 0x36
 800ce0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ce0e:	4296      	cmp	r6, r2
 800ce10:	dd0d      	ble.n	800ce2e <scalbn+0x7e>
 800ce12:	2d00      	cmp	r5, #0
 800ce14:	a11c      	add	r1, pc, #112	; (adr r1, 800ce88 <scalbn+0xd8>)
 800ce16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce1a:	da02      	bge.n	800ce22 <scalbn+0x72>
 800ce1c:	a11c      	add	r1, pc, #112	; (adr r1, 800ce90 <scalbn+0xe0>)
 800ce1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce22:	a319      	add	r3, pc, #100	; (adr r3, 800ce88 <scalbn+0xd8>)
 800ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce28:	f7f3 fbe6 	bl	80005f8 <__aeabi_dmul>
 800ce2c:	e7e6      	b.n	800cdfc <scalbn+0x4c>
 800ce2e:	1872      	adds	r2, r6, r1
 800ce30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce34:	428a      	cmp	r2, r1
 800ce36:	dcec      	bgt.n	800ce12 <scalbn+0x62>
 800ce38:	2a00      	cmp	r2, #0
 800ce3a:	dd08      	ble.n	800ce4e <scalbn+0x9e>
 800ce3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce48:	ec45 4b10 	vmov	d0, r4, r5
 800ce4c:	bd70      	pop	{r4, r5, r6, pc}
 800ce4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ce52:	da08      	bge.n	800ce66 <scalbn+0xb6>
 800ce54:	2d00      	cmp	r5, #0
 800ce56:	a10a      	add	r1, pc, #40	; (adr r1, 800ce80 <scalbn+0xd0>)
 800ce58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce5c:	dac0      	bge.n	800cde0 <scalbn+0x30>
 800ce5e:	a10e      	add	r1, pc, #56	; (adr r1, 800ce98 <scalbn+0xe8>)
 800ce60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce64:	e7bc      	b.n	800cde0 <scalbn+0x30>
 800ce66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce6a:	3236      	adds	r2, #54	; 0x36
 800ce6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce74:	4620      	mov	r0, r4
 800ce76:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <scalbn+0xf8>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	e7d5      	b.n	800ce28 <scalbn+0x78>
 800ce7c:	f3af 8000 	nop.w
 800ce80:	c2f8f359 	.word	0xc2f8f359
 800ce84:	01a56e1f 	.word	0x01a56e1f
 800ce88:	8800759c 	.word	0x8800759c
 800ce8c:	7e37e43c 	.word	0x7e37e43c
 800ce90:	8800759c 	.word	0x8800759c
 800ce94:	fe37e43c 	.word	0xfe37e43c
 800ce98:	c2f8f359 	.word	0xc2f8f359
 800ce9c:	81a56e1f 	.word	0x81a56e1f
 800cea0:	43500000 	.word	0x43500000
 800cea4:	ffff3cb0 	.word	0xffff3cb0
 800cea8:	3c900000 	.word	0x3c900000

0800ceac <with_errno>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	4604      	mov	r4, r0
 800ceb0:	460d      	mov	r5, r1
 800ceb2:	4616      	mov	r6, r2
 800ceb4:	f7fd f924 	bl	800a100 <__errno>
 800ceb8:	4629      	mov	r1, r5
 800ceba:	6006      	str	r6, [r0, #0]
 800cebc:	4620      	mov	r0, r4
 800cebe:	bd70      	pop	{r4, r5, r6, pc}

0800cec0 <xflow>:
 800cec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cec2:	4614      	mov	r4, r2
 800cec4:	461d      	mov	r5, r3
 800cec6:	b108      	cbz	r0, 800cecc <xflow+0xc>
 800cec8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cecc:	e9cd 2300 	strd	r2, r3, [sp]
 800ced0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ced4:	4620      	mov	r0, r4
 800ced6:	4629      	mov	r1, r5
 800ced8:	f7f3 fb8e 	bl	80005f8 <__aeabi_dmul>
 800cedc:	2222      	movs	r2, #34	; 0x22
 800cede:	b003      	add	sp, #12
 800cee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cee4:	f7ff bfe2 	b.w	800ceac <with_errno>

0800cee8 <__math_uflow>:
 800cee8:	b508      	push	{r3, lr}
 800ceea:	2200      	movs	r2, #0
 800ceec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cef0:	f7ff ffe6 	bl	800cec0 <xflow>
 800cef4:	ec41 0b10 	vmov	d0, r0, r1
 800cef8:	bd08      	pop	{r3, pc}

0800cefa <__math_oflow>:
 800cefa:	b508      	push	{r3, lr}
 800cefc:	2200      	movs	r2, #0
 800cefe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cf02:	f7ff ffdd 	bl	800cec0 <xflow>
 800cf06:	ec41 0b10 	vmov	d0, r0, r1
 800cf0a:	bd08      	pop	{r3, pc}

0800cf0c <__ieee754_sqrt>:
 800cf0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf10:	ec55 4b10 	vmov	r4, r5, d0
 800cf14:	4e67      	ldr	r6, [pc, #412]	; (800d0b4 <__ieee754_sqrt+0x1a8>)
 800cf16:	43ae      	bics	r6, r5
 800cf18:	ee10 0a10 	vmov	r0, s0
 800cf1c:	ee10 2a10 	vmov	r2, s0
 800cf20:	4629      	mov	r1, r5
 800cf22:	462b      	mov	r3, r5
 800cf24:	d10d      	bne.n	800cf42 <__ieee754_sqrt+0x36>
 800cf26:	f7f3 fb67 	bl	80005f8 <__aeabi_dmul>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4620      	mov	r0, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	f7f3 f9ab 	bl	800028c <__adddf3>
 800cf36:	4604      	mov	r4, r0
 800cf38:	460d      	mov	r5, r1
 800cf3a:	ec45 4b10 	vmov	d0, r4, r5
 800cf3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf42:	2d00      	cmp	r5, #0
 800cf44:	dc0b      	bgt.n	800cf5e <__ieee754_sqrt+0x52>
 800cf46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf4a:	4326      	orrs	r6, r4
 800cf4c:	d0f5      	beq.n	800cf3a <__ieee754_sqrt+0x2e>
 800cf4e:	b135      	cbz	r5, 800cf5e <__ieee754_sqrt+0x52>
 800cf50:	f7f3 f99a 	bl	8000288 <__aeabi_dsub>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	f7f3 fc78 	bl	800084c <__aeabi_ddiv>
 800cf5c:	e7eb      	b.n	800cf36 <__ieee754_sqrt+0x2a>
 800cf5e:	1509      	asrs	r1, r1, #20
 800cf60:	f000 808d 	beq.w	800d07e <__ieee754_sqrt+0x172>
 800cf64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf68:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cf6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf70:	07c9      	lsls	r1, r1, #31
 800cf72:	bf5c      	itt	pl
 800cf74:	005b      	lslpl	r3, r3, #1
 800cf76:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cf7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf7e:	bf58      	it	pl
 800cf80:	0052      	lslpl	r2, r2, #1
 800cf82:	2500      	movs	r5, #0
 800cf84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf88:	1076      	asrs	r6, r6, #1
 800cf8a:	0052      	lsls	r2, r2, #1
 800cf8c:	f04f 0e16 	mov.w	lr, #22
 800cf90:	46ac      	mov	ip, r5
 800cf92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf96:	eb0c 0001 	add.w	r0, ip, r1
 800cf9a:	4298      	cmp	r0, r3
 800cf9c:	bfde      	ittt	le
 800cf9e:	1a1b      	suble	r3, r3, r0
 800cfa0:	eb00 0c01 	addle.w	ip, r0, r1
 800cfa4:	186d      	addle	r5, r5, r1
 800cfa6:	005b      	lsls	r3, r3, #1
 800cfa8:	f1be 0e01 	subs.w	lr, lr, #1
 800cfac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cfb0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cfb4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cfb8:	d1ed      	bne.n	800cf96 <__ieee754_sqrt+0x8a>
 800cfba:	4674      	mov	r4, lr
 800cfbc:	2720      	movs	r7, #32
 800cfbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cfc2:	4563      	cmp	r3, ip
 800cfc4:	eb01 000e 	add.w	r0, r1, lr
 800cfc8:	dc02      	bgt.n	800cfd0 <__ieee754_sqrt+0xc4>
 800cfca:	d113      	bne.n	800cff4 <__ieee754_sqrt+0xe8>
 800cfcc:	4290      	cmp	r0, r2
 800cfce:	d811      	bhi.n	800cff4 <__ieee754_sqrt+0xe8>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	eb00 0e01 	add.w	lr, r0, r1
 800cfd6:	da57      	bge.n	800d088 <__ieee754_sqrt+0x17c>
 800cfd8:	f1be 0f00 	cmp.w	lr, #0
 800cfdc:	db54      	blt.n	800d088 <__ieee754_sqrt+0x17c>
 800cfde:	f10c 0801 	add.w	r8, ip, #1
 800cfe2:	eba3 030c 	sub.w	r3, r3, ip
 800cfe6:	4290      	cmp	r0, r2
 800cfe8:	bf88      	it	hi
 800cfea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cfee:	1a12      	subs	r2, r2, r0
 800cff0:	440c      	add	r4, r1
 800cff2:	46c4      	mov	ip, r8
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	3f01      	subs	r7, #1
 800cff8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cffc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d000:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d004:	d1dd      	bne.n	800cfc2 <__ieee754_sqrt+0xb6>
 800d006:	4313      	orrs	r3, r2
 800d008:	d01b      	beq.n	800d042 <__ieee754_sqrt+0x136>
 800d00a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d0b8 <__ieee754_sqrt+0x1ac>
 800d00e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d0bc <__ieee754_sqrt+0x1b0>
 800d012:	e9da 0100 	ldrd	r0, r1, [sl]
 800d016:	e9db 2300 	ldrd	r2, r3, [fp]
 800d01a:	f7f3 f935 	bl	8000288 <__aeabi_dsub>
 800d01e:	e9da 8900 	ldrd	r8, r9, [sl]
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f3 fd61 	bl	8000af0 <__aeabi_dcmple>
 800d02e:	b140      	cbz	r0, 800d042 <__ieee754_sqrt+0x136>
 800d030:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d034:	e9da 0100 	ldrd	r0, r1, [sl]
 800d038:	e9db 2300 	ldrd	r2, r3, [fp]
 800d03c:	d126      	bne.n	800d08c <__ieee754_sqrt+0x180>
 800d03e:	3501      	adds	r5, #1
 800d040:	463c      	mov	r4, r7
 800d042:	106a      	asrs	r2, r5, #1
 800d044:	0863      	lsrs	r3, r4, #1
 800d046:	07e9      	lsls	r1, r5, #31
 800d048:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d04c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d050:	bf48      	it	mi
 800d052:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d056:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d05a:	461c      	mov	r4, r3
 800d05c:	e76d      	b.n	800cf3a <__ieee754_sqrt+0x2e>
 800d05e:	0ad3      	lsrs	r3, r2, #11
 800d060:	3815      	subs	r0, #21
 800d062:	0552      	lsls	r2, r2, #21
 800d064:	2b00      	cmp	r3, #0
 800d066:	d0fa      	beq.n	800d05e <__ieee754_sqrt+0x152>
 800d068:	02dc      	lsls	r4, r3, #11
 800d06a:	d50a      	bpl.n	800d082 <__ieee754_sqrt+0x176>
 800d06c:	f1c1 0420 	rsb	r4, r1, #32
 800d070:	fa22 f404 	lsr.w	r4, r2, r4
 800d074:	1e4d      	subs	r5, r1, #1
 800d076:	408a      	lsls	r2, r1
 800d078:	4323      	orrs	r3, r4
 800d07a:	1b41      	subs	r1, r0, r5
 800d07c:	e772      	b.n	800cf64 <__ieee754_sqrt+0x58>
 800d07e:	4608      	mov	r0, r1
 800d080:	e7f0      	b.n	800d064 <__ieee754_sqrt+0x158>
 800d082:	005b      	lsls	r3, r3, #1
 800d084:	3101      	adds	r1, #1
 800d086:	e7ef      	b.n	800d068 <__ieee754_sqrt+0x15c>
 800d088:	46e0      	mov	r8, ip
 800d08a:	e7aa      	b.n	800cfe2 <__ieee754_sqrt+0xd6>
 800d08c:	f7f3 f8fe 	bl	800028c <__adddf3>
 800d090:	e9da 8900 	ldrd	r8, r9, [sl]
 800d094:	4602      	mov	r2, r0
 800d096:	460b      	mov	r3, r1
 800d098:	4640      	mov	r0, r8
 800d09a:	4649      	mov	r1, r9
 800d09c:	f7f3 fd1e 	bl	8000adc <__aeabi_dcmplt>
 800d0a0:	b120      	cbz	r0, 800d0ac <__ieee754_sqrt+0x1a0>
 800d0a2:	1ca0      	adds	r0, r4, #2
 800d0a4:	bf08      	it	eq
 800d0a6:	3501      	addeq	r5, #1
 800d0a8:	3402      	adds	r4, #2
 800d0aa:	e7ca      	b.n	800d042 <__ieee754_sqrt+0x136>
 800d0ac:	3401      	adds	r4, #1
 800d0ae:	f024 0401 	bic.w	r4, r4, #1
 800d0b2:	e7c6      	b.n	800d042 <__ieee754_sqrt+0x136>
 800d0b4:	7ff00000 	.word	0x7ff00000
 800d0b8:	200002c8 	.word	0x200002c8
 800d0bc:	200002d0 	.word	0x200002d0

0800d0c0 <_init>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr

0800d0cc <_fini>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	bf00      	nop
 800d0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d2:	bc08      	pop	{r3}
 800d0d4:	469e      	mov	lr, r3
 800d0d6:	4770      	bx	lr
